# Generated from qasm3.g4 by ANTLR 4.7.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3x")
        buf.write("\u0417\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\3\2\3\2\3\2\7\2\u00dc\n\2")
        buf.write("\f\2\16\2\u00df\13\2\3\3\5\3\u00e2\n\3\3\3\7\3\u00e5\n")
        buf.write("\3\f\3\16\3\u00e8\13\3\3\3\7\3\u00eb\n\3\f\3\16\3\u00ee")
        buf.write("\13\3\3\4\3\4\3\4\3\4\3\5\3\5\3\5\3\5\3\6\3\6\3\7\3\7")
        buf.write("\3\7\3\7\3\7\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u0105\n\b\3\t")
        buf.write("\3\t\3\t\3\t\3\t\3\t\3\t\3\t\5\t\u010f\n\t\3\n\3\n\3\n")
        buf.write("\3\13\3\13\5\13\u0116\n\13\3\13\3\13\3\f\3\f\5\f\u011c")
        buf.write("\n\f\3\f\3\f\3\f\3\r\3\r\5\r\u0123\n\r\3\r\3\r\3\16\3")
        buf.write("\16\3\16\3\17\3\17\3\17\3\17\3\20\3\20\3\20\3\20\3\20")
        buf.write("\3\20\3\21\3\21\7\21\u0136\n\21\f\21\16\21\u0139\13\21")
        buf.write("\3\21\3\21\3\22\3\22\3\22\5\22\u0140\n\22\3\22\3\22\5")
        buf.write("\22\u0144\n\22\3\22\5\22\u0147\n\22\3\23\3\23\3\23\5\23")
        buf.write("\u014c\n\23\3\23\3\23\5\23\u0150\n\23\3\23\5\23\u0153")
        buf.write("\n\23\3\24\3\24\3\24\7\24\u0158\n\24\f\24\16\24\u015b")
        buf.write("\13\24\3\25\3\25\3\26\3\26\3\27\3\27\3\30\3\30\5\30\u0165")
        buf.write("\n\30\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\5\31")
        buf.write("\u0170\n\31\3\31\3\31\3\31\3\31\3\31\5\31\u0177\n\31\3")
        buf.write("\32\3\32\3\32\3\32\3\32\3\32\5\32\u017f\n\32\3\33\3\33")
        buf.write("\3\33\3\33\3\34\3\34\3\34\3\34\5\34\u0189\n\34\3\35\3")
        buf.write("\35\3\35\3\35\5\35\u018f\n\35\3\36\3\36\3\36\5\36\u0194")
        buf.write("\n\36\3\37\3\37\3\37\5\37\u0199\n\37\3\37\3\37\5\37\u019d")
        buf.write("\n\37\3\37\5\37\u01a0\n\37\3\37\5\37\u01a3\n\37\3 \3 ")
        buf.write("\3 \3 \3 \3 \5 \u01ab\n \3!\3!\3!\3!\3!\5!\u01b2\n!\3")
        buf.write("\"\3\"\3\"\7\"\u01b7\n\"\f\"\16\"\u01ba\13\"\3\"\3\"\3")
        buf.write("#\3#\3#\3#\3#\3#\3#\5#\u01c5\n#\3#\3#\3#\3#\3#\5#\u01cc")
        buf.write("\n#\3#\3#\5#\u01d0\n#\3#\3#\3#\3#\3#\3#\3#\5#\u01d9\n")
        buf.write("#\3$\3$\3$\7$\u01de\n$\f$\16$\u01e1\13$\3%\3%\5%\u01e5")
        buf.write("\n%\3&\3&\3&\7&\u01ea\n&\f&\16&\u01ed\13&\3&\3&\3\'\3")
        buf.write("\'\3\'\3\'\3\'\3\'\3(\3(\3(\3(\3(\3(\3(\3(\5(\u01ff\n")
        buf.write("(\5(\u0201\n(\3(\3(\3(\7(\u0206\n(\f(\16(\u0209\13(\3")
        buf.write(")\3)\3)\7)\u020e\n)\f)\16)\u0211\13)\3*\3*\5*\u0215\n")
        buf.write("*\3*\3*\5*\u0219\n*\3*\3*\5*\u021d\n*\3*\3*\3+\3+\3+\3")
        buf.write("+\3,\3,\3,\5,\u0228\n,\3,\5,\u022b\n,\3,\3,\3-\3-\3.\3")
        buf.write(".\3.\7.\u0234\n.\f.\16.\u0237\13.\3.\3.\3/\3/\3/\3\60")
        buf.write("\3\60\3\60\7\60\u0241\n\60\f\60\16\60\u0244\13\60\3\60")
        buf.write("\5\60\u0247\n\60\3\61\3\61\3\61\3\61\5\61\u024d\n\61\3")
        buf.write("\62\3\62\3\62\3\62\3\62\5\62\u0254\n\62\3\63\7\63\u0257")
        buf.write("\n\63\f\63\16\63\u025a\13\63\3\63\3\63\3\63\3\63\3\63")
        buf.write("\5\63\u0261\n\63\3\64\3\64\3\64\3\65\3\65\3\65\3\66\3")
        buf.write("\66\3\66\5\66\u026c\n\66\3\66\3\66\3\66\3\66\5\66\u0272")
        buf.write("\n\66\3\67\3\67\5\67\u0276\n\67\38\38\38\58\u027b\n8\3")
        buf.write("8\38\39\39\39\39\39\3:\3:\3:\3:\3:\5:\u0289\n:\3;\7;\u028c")
        buf.write("\n;\f;\16;\u028f\13;\3;\3;\3;\3;\3;\5;\u0296\n;\3;\3;")
        buf.write("\3<\3<\3=\3=\3>\3>\3?\3?\3@\3@\3@\3A\3A\3A\3A\5A\u02a9")
        buf.write("\nA\3A\3A\3A\7A\u02ae\nA\fA\16A\u02b1\13A\3B\3B\3B\3B")
        buf.write("\3B\3B\7B\u02b9\nB\fB\16B\u02bc\13B\3C\3C\3C\3C\3C\3C")
        buf.write("\7C\u02c4\nC\fC\16C\u02c7\13C\3D\3D\3D\3D\3D\3D\7D\u02cf")
        buf.write("\nD\fD\16D\u02d2\13D\3E\3E\3E\3E\3E\3E\7E\u02da\nE\fE")
        buf.write("\16E\u02dd\13E\3F\3F\3F\3F\3F\3F\3F\7F\u02e6\nF\fF\16")
        buf.write("F\u02e9\13F\3G\3G\3G\3G\3G\3G\3G\7G\u02f2\nG\fG\16G\u02f5")
        buf.write("\13G\3H\3H\3H\3H\3H\3H\7H\u02fd\nH\fH\16H\u0300\13H\3")
        buf.write("I\3I\3I\3I\3I\3I\7I\u0308\nI\fI\16I\u030b\13I\3J\3J\3")
        buf.write("J\5J\u0310\nJ\3J\3J\3J\3J\5J\u0316\nJ\7J\u0318\nJ\fJ\16")
        buf.write("J\u031b\13J\3K\3K\3K\3L\3L\3L\3L\3L\5L\u0325\nL\3M\3M")
        buf.write("\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\5M\u0336\nM\3")
        buf.write("M\3M\3M\3M\3M\7M\u033d\nM\fM\16M\u0340\13M\3N\3N\3O\3")
        buf.write("O\5O\u0346\nO\3O\3O\3O\3O\3P\3P\3Q\3Q\3R\3R\3R\7R\u0353")
        buf.write("\nR\fR\16R\u0356\13R\3S\3S\3S\3T\3T\3U\3U\3U\3U\3U\3U")
        buf.write("\5U\u0363\nU\3V\3V\3V\3V\3V\7V\u036a\nV\fV\16V\u036d\13")
        buf.write("V\3V\5V\u0370\nV\3W\3W\3W\3W\3W\3W\3W\5W\u0379\nW\3X\3")
        buf.write("X\3X\3X\3X\3X\3X\3X\3X\5X\u0384\nX\3Y\3Y\3Y\3Z\3Z\3Z\3")
        buf.write("[\3[\3[\5[\u038f\n[\3[\3[\3\\\3\\\3\\\3\\\5\\\u0397\n")
        buf.write("\\\3]\3]\3]\3]\5]\u039d\n]\3]\3]\5]\u03a1\n]\3]\3]\3^")
        buf.write("\3^\3^\5^\u03a8\n^\3^\3^\3_\3_\3_\3_\5_\u03b0\n_\3_\3")
        buf.write("_\5_\u03b4\n_\3_\3_\3`\3`\7`\u03ba\n`\f`\16`\u03bd\13")
        buf.write("`\3`\5`\u03c0\n`\3`\3`\3a\3a\3a\7a\u03c7\na\fa\16a\u03ca")
        buf.write("\13a\3a\3a\3b\3b\3c\3c\5c\u03d2\nc\3c\3c\3d\3d\3d\3d\3")
        buf.write("d\5d\u03db\nd\3d\5d\u03de\nd\3e\3e\3f\3f\3f\5f\u03e5\n")
        buf.write("f\3f\5f\u03e8\nf\3f\3f\3f\3g\3g\3g\3g\5g\u03f1\ng\3h\3")
        buf.write("h\5h\u03f5\nh\3i\3i\3i\3i\3j\3j\3j\3j\5j\u03ff\nj\3j\5")
        buf.write("j\u0402\nj\3j\3j\5j\u0406\nj\3j\3j\7j\u040a\nj\fj\16j")
        buf.write("\u040d\13j\3j\3j\3k\3k\3l\3l\5l\u0415\nl\3l\3\u040b\16")
        buf.write("N\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090")
        buf.write("\u0092\u0098m\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 ")
        buf.write("\"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtv")
        buf.write("xz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090")
        buf.write("\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2")
        buf.write("\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4")
        buf.write("\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6")
        buf.write("\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\2\26")
        buf.write("\4\2rrtt\3\2\5\6\3\2\t\n\3\2\13\16\4\2\26\27ss\3\2\37")
        buf.write(" \4\2!\"ii\3\2#&\3\2\'(\4\2\24\24))\3\2-.\3\2hi\3\2jl")
        buf.write("\3\2\60\61\3\2\62:\4\2;Fff\3\2NO\3\2ST\3\2WX\4\2[[vv\2")
        buf.write("\u043d\2\u00d8\3\2\2\2\4\u00e1\3\2\2\2\6\u00ef\3\2\2\2")
        buf.write("\b\u00f3\3\2\2\2\n\u00f7\3\2\2\2\f\u00f9\3\2\2\2\16\u0104")
        buf.write("\3\2\2\2\20\u010e\3\2\2\2\22\u0110\3\2\2\2\24\u0115\3")
        buf.write("\2\2\2\26\u0119\3\2\2\2\30\u0122\3\2\2\2\32\u0126\3\2")
        buf.write("\2\2\34\u0129\3\2\2\2\36\u012d\3\2\2\2 \u0137\3\2\2\2")
        buf.write("\"\u0146\3\2\2\2$\u0152\3\2\2\2&\u0154\3\2\2\2(\u015c")
        buf.write("\3\2\2\2*\u015e\3\2\2\2,\u0160\3\2\2\2.\u0164\3\2\2\2")
        buf.write("\60\u0176\3\2\2\2\62\u017e\3\2\2\2\64\u0180\3\2\2\2\66")
        buf.write("\u0184\3\2\2\28\u018a\3\2\2\2:\u0190\3\2\2\2<\u019f\3")
        buf.write("\2\2\2>\u01a4\3\2\2\2@\u01b1\3\2\2\2B\u01b8\3\2\2\2D\u01d8")
        buf.write("\3\2\2\2F\u01da\3\2\2\2H\u01e4\3\2\2\2J\u01eb\3\2\2\2")
        buf.write("L\u01f0\3\2\2\2N\u0200\3\2\2\2P\u020a\3\2\2\2R\u0212\3")
        buf.write("\2\2\2T\u0220\3\2\2\2V\u0224\3\2\2\2X\u022e\3\2\2\2Z\u0230")
        buf.write("\3\2\2\2\\\u023a\3\2\2\2^\u0246\3\2\2\2`\u024c\3\2\2\2")
        buf.write("b\u0253\3\2\2\2d\u0258\3\2\2\2f\u0262\3\2\2\2h\u0265\3")
        buf.write("\2\2\2j\u0271\3\2\2\2l\u0273\3\2\2\2n\u027a\3\2\2\2p\u027e")
        buf.write("\3\2\2\2r\u0283\3\2\2\2t\u028d\3\2\2\2v\u0299\3\2\2\2")
        buf.write("x\u029b\3\2\2\2z\u029d\3\2\2\2|\u029f\3\2\2\2~\u02a1\3")
        buf.write("\2\2\2\u0080\u02a8\3\2\2\2\u0082\u02b2\3\2\2\2\u0084\u02bd")
        buf.write("\3\2\2\2\u0086\u02c8\3\2\2\2\u0088\u02d3\3\2\2\2\u008a")
        buf.write("\u02de\3\2\2\2\u008c\u02ea\3\2\2\2\u008e\u02f6\3\2\2\2")
        buf.write("\u0090\u0301\3\2\2\2\u0092\u030f\3\2\2\2\u0094\u031c\3")
        buf.write("\2\2\2\u0096\u0324\3\2\2\2\u0098\u0335\3\2\2\2\u009a\u0341")
        buf.write("\3\2\2\2\u009c\u0345\3\2\2\2\u009e\u034b\3\2\2\2\u00a0")
        buf.write("\u034d\3\2\2\2\u00a2\u034f\3\2\2\2\u00a4\u0357\3\2\2\2")
        buf.write("\u00a6\u035a\3\2\2\2\u00a8\u0362\3\2\2\2\u00aa\u036f\3")
        buf.write("\2\2\2\u00ac\u0371\3\2\2\2\u00ae\u0383\3\2\2\2\u00b0\u0385")
        buf.write("\3\2\2\2\u00b2\u0388\3\2\2\2\u00b4\u038b\3\2\2\2\u00b6")
        buf.write("\u0396\3\2\2\2\u00b8\u0398\3\2\2\2\u00ba\u03a4\3\2\2\2")
        buf.write("\u00bc\u03ab\3\2\2\2\u00be\u03b7\3\2\2\2\u00c0\u03c3\3")
        buf.write("\2\2\2\u00c2\u03cd\3\2\2\2\u00c4\u03cf\3\2\2\2\u00c6\u03dd")
        buf.write("\3\2\2\2\u00c8\u03df\3\2\2\2\u00ca\u03e1\3\2\2\2\u00cc")
        buf.write("\u03f0\3\2\2\2\u00ce\u03f4\3\2\2\2\u00d0\u03f6\3\2\2\2")
        buf.write("\u00d2\u03fa\3\2\2\2\u00d4\u0410\3\2\2\2\u00d6\u0414\3")
        buf.write("\2\2\2\u00d8\u00dd\5\4\3\2\u00d9\u00dc\5\16\b\2\u00da")
        buf.write("\u00dc\5\20\t\2\u00db\u00d9\3\2\2\2\u00db\u00da\3\2\2")
        buf.write("\2\u00dc\u00df\3\2\2\2\u00dd\u00db\3\2\2\2\u00dd\u00de")
        buf.write("\3\2\2\2\u00de\3\3\2\2\2\u00df\u00dd\3\2\2\2\u00e0\u00e2")
        buf.write("\5\6\4\2\u00e1\u00e0\3\2\2\2\u00e1\u00e2\3\2\2\2\u00e2")
        buf.write("\u00e6\3\2\2\2\u00e3\u00e5\5\b\5\2\u00e4\u00e3\3\2\2\2")
        buf.write("\u00e5\u00e8\3\2\2\2\u00e6\u00e4\3\2\2\2\u00e6\u00e7\3")
        buf.write("\2\2\2\u00e7\u00ec\3\2\2\2\u00e8\u00e6\3\2\2\2\u00e9\u00eb")
        buf.write("\5\f\7\2\u00ea\u00e9\3\2\2\2\u00eb\u00ee\3\2\2\2\u00ec")
        buf.write("\u00ea\3\2\2\2\u00ec\u00ed\3\2\2\2\u00ed\5\3\2\2\2\u00ee")
        buf.write("\u00ec\3\2\2\2\u00ef\u00f0\7\3\2\2\u00f0\u00f1\t\2\2\2")
        buf.write("\u00f1\u00f2\7c\2\2\u00f2\7\3\2\2\2\u00f3\u00f4\7\4\2")
        buf.write("\2\u00f4\u00f5\7v\2\2\u00f5\u00f6\7c\2\2\u00f6\t\3\2\2")
        buf.write("\2\u00f7\u00f8\t\3\2\2\u00f8\13\3\2\2\2\u00f9\u00fa\5")
        buf.write("\n\6\2\u00fa\u00fb\5\60\31\2\u00fb\u00fc\7s\2\2\u00fc")
        buf.write("\u00fd\7c\2\2\u00fd\r\3\2\2\2\u00fe\u0105\5\u00bc_\2\u00ff")
        buf.write("\u0105\5\u00b8]\2\u0100\u0105\5T+\2\u0101\u0105\5\u00ce")
        buf.write("h\2\u0102\u0105\5\22\n\2\u0103\u0105\5\u00c0a\2\u0104")
        buf.write("\u00fe\3\2\2\2\u0104\u00ff\3\2\2\2\u0104\u0100\3\2\2\2")
        buf.write("\u0104\u0101\3\2\2\2\u0104\u0102\3\2\2\2\u0104\u0103\3")
        buf.write("\2\2\2\u0105\17\3\2\2\2\u0106\u010f\5~@\2\u0107\u010f")
        buf.write("\5\30\r\2\u0108\u010f\5\24\13\2\u0109\u010f\5\u00acW\2")
        buf.write("\u010a\u010f\5\u00b0Y\2\u010b\u010f\5\u00b2Z\2\u010c\u010f")
        buf.write("\5L\'\2\u010d\u010f\5`\61\2\u010e\u0106\3\2\2\2\u010e")
        buf.write("\u0107\3\2\2\2\u010e\u0108\3\2\2\2\u010e\u0109\3\2\2\2")
        buf.write("\u010e\u010a\3\2\2\2\u010e\u010b\3\2\2\2\u010e\u010c\3")
        buf.write("\2\2\2\u010e\u010d\3\2\2\2\u010f\21\3\2\2\2\u0110\u0111")
        buf.write("\5\"\22\2\u0111\u0112\7c\2\2\u0112\23\3\2\2\2\u0113\u0116")
        buf.write("\5@!\2\u0114\u0116\5\64\33\2\u0115\u0113\3\2\2\2\u0115")
        buf.write("\u0114\3\2\2\2\u0116\u0117\3\2\2\2\u0117\u0118\7c\2\2")
        buf.write("\u0118\25\3\2\2\2\u0119\u011b\7s\2\2\u011a\u011c\5\34")
        buf.write("\17\2\u011b\u011a\3\2\2\2\u011b\u011c\3\2\2\2\u011c\u011d")
        buf.write("\3\2\2\2\u011d\u011e\5\u00a6T\2\u011e\u011f\5\u0080A\2")
        buf.write("\u011f\27\3\2\2\2\u0120\u0123\5\26\f\2\u0121\u0123\5j")
        buf.write("\66\2\u0122\u0120\3\2\2\2\u0122\u0121\3\2\2\2\u0123\u0124")
        buf.write("\3\2\2\2\u0124\u0125\7c\2\2\u0125\31\3\2\2\2\u0126\u0127")
        buf.write("\7g\2\2\u0127\u0128\5\60\31\2\u0128\33\3\2\2\2\u0129\u012a")
        buf.write("\7\\\2\2\u012a\u012b\5\u0080A\2\u012b\u012c\7]\2\2\u012c")
        buf.write("\35\3\2\2\2\u012d\u012e\7\\\2\2\u012e\u012f\5\u0080A\2")
        buf.write("\u012f\u0130\7e\2\2\u0130\u0131\5\u0080A\2\u0131\u0132")
        buf.write("\7]\2\2\u0132\37\3\2\2\2\u0133\u0134\7s\2\2\u0134\u0136")
        buf.write("\7e\2\2\u0135\u0133\3\2\2\2\u0136\u0139\3\2\2\2\u0137")
        buf.write("\u0135\3\2\2\2\u0137\u0138\3\2\2\2\u0138\u013a\3\2\2\2")
        buf.write("\u0139\u0137\3\2\2\2\u013a\u013b\7s\2\2\u013b!\3\2\2\2")
        buf.write("\u013c\u013d\7\7\2\2\u013d\u013f\7s\2\2\u013e\u0140\5")
        buf.write("\34\17\2\u013f\u013e\3\2\2\2\u013f\u0140\3\2\2\2\u0140")
        buf.write("\u0147\3\2\2\2\u0141\u0143\7\b\2\2\u0142\u0144\5\34\17")
        buf.write("\2\u0143\u0142\3\2\2\2\u0143\u0144\3\2\2\2\u0144\u0145")
        buf.write("\3\2\2\2\u0145\u0147\7s\2\2\u0146\u013c\3\2\2\2\u0146")
        buf.write("\u0141\3\2\2\2\u0147#\3\2\2\2\u0148\u0149\7\7\2\2\u0149")
        buf.write("\u014b\7s\2\2\u014a\u014c\5\34\17\2\u014b\u014a\3\2\2")
        buf.write("\2\u014b\u014c\3\2\2\2\u014c\u0153\3\2\2\2\u014d\u014f")
        buf.write("\7\b\2\2\u014e\u0150\5\34\17\2\u014f\u014e\3\2\2\2\u014f")
        buf.write("\u0150\3\2\2\2\u0150\u0151\3\2\2\2\u0151\u0153\7s\2\2")
        buf.write("\u0152\u0148\3\2\2\2\u0152\u014d\3\2\2\2\u0153%\3\2\2")
        buf.write("\2\u0154\u0159\5$\23\2\u0155\u0156\7e\2\2\u0156\u0158")
        buf.write("\5$\23\2\u0157\u0155\3\2\2\2\u0158\u015b\3\2\2\2\u0159")
        buf.write("\u0157\3\2\2\2\u0159\u015a\3\2\2\2\u015a\'\3\2\2\2\u015b")
        buf.write("\u0159\3\2\2\2\u015c\u015d\t\4\2\2\u015d)\3\2\2\2\u015e")
        buf.write("\u015f\t\5\2\2\u015f+\3\2\2\2\u0160\u0161\7\17\2\2\u0161")
        buf.write("-\3\2\2\2\u0162\u0165\7\20\2\2\u0163\u0165\5\u00c2b\2")
        buf.write("\u0164\u0162\3\2\2\2\u0164\u0163\3\2\2\2\u0165/\3\2\2")
        buf.write("\2\u0166\u0167\5*\26\2\u0167\u0168\5\34\17\2\u0168\u0177")
        buf.write("\3\2\2\2\u0169\u016a\5,\27\2\u016a\u016b\5\36\20\2\u016b")
        buf.write("\u0177\3\2\2\2\u016c\u0177\5.\30\2\u016d\u016f\5(\25\2")
        buf.write("\u016e\u0170\5\34\17\2\u016f\u016e\3\2\2\2\u016f\u0170")
        buf.write("\3\2\2\2\u0170\u0177\3\2\2\2\u0171\u0172\7\21\2\2\u0172")
        buf.write("\u0173\7\\\2\2\u0173\u0174\5\62\32\2\u0174\u0175\7]\2")
        buf.write("\2\u0175\u0177\3\2\2\2\u0176\u0166\3\2\2\2\u0176\u0169")
        buf.write("\3\2\2\2\u0176\u016c\3\2\2\2\u0176\u016d\3\2\2\2\u0176")
        buf.write("\u0171\3\2\2\2\u0177\61\3\2\2\2\u0178\u0179\5*\26\2\u0179")
        buf.write("\u017a\5\34\17\2\u017a\u017f\3\2\2\2\u017b\u017c\5,\27")
        buf.write("\2\u017c\u017d\5\36\20\2\u017d\u017f\3\2\2\2\u017e\u0178")
        buf.write("\3\2\2\2\u017e\u017b\3\2\2\2\u017f\63\3\2\2\2\u0180\u0181")
        buf.write("\7\22\2\2\u0181\u0182\7s\2\2\u0182\u0183\5\u00a4S\2\u0183")
        buf.write("\65\3\2\2\2\u0184\u0185\5*\26\2\u0185\u0186\5\34\17\2")
        buf.write("\u0186\u0188\7s\2\2\u0187\u0189\5\u00a4S\2\u0188\u0187")
        buf.write("\3\2\2\2\u0188\u0189\3\2\2\2\u0189\67\3\2\2\2\u018a\u018b")
        buf.write("\5,\27\2\u018b\u018c\5\36\20\2\u018c\u018e\7s\2\2\u018d")
        buf.write("\u018f\5\u00a4S\2\u018e\u018d\3\2\2\2\u018e\u018f\3\2")
        buf.write("\2\2\u018f9\3\2\2\2\u0190\u0191\5.\30\2\u0191\u0193\7")
        buf.write("s\2\2\u0192\u0194\5\u00a4S\2\u0193\u0192\3\2\2\2\u0193")
        buf.write("\u0194\3\2\2\2\u0194;\3\2\2\2\u0195\u0196\7\n\2\2\u0196")
        buf.write("\u0198\7s\2\2\u0197\u0199\5\34\17\2\u0198\u0197\3\2\2")
        buf.write("\2\u0198\u0199\3\2\2\2\u0199\u01a0\3\2\2\2\u019a\u019c")
        buf.write("\7\t\2\2\u019b\u019d\5\34\17\2\u019c\u019b\3\2\2\2\u019c")
        buf.write("\u019d\3\2\2\2\u019d\u019e\3\2\2\2\u019e\u01a0\7s\2\2")
        buf.write("\u019f\u0195\3\2\2\2\u019f\u019a\3\2\2\2\u01a0\u01a2\3")
        buf.write("\2\2\2\u01a1\u01a3\5\u00a4S\2\u01a2\u01a1\3\2\2\2\u01a2")
        buf.write("\u01a3\3\2\2\2\u01a3=\3\2\2\2\u01a4\u01a5\7\21\2\2\u01a5")
        buf.write("\u01a6\7\\\2\2\u01a6\u01a7\5\62\32\2\u01a7\u01a8\7]\2")
        buf.write("\2\u01a8\u01aa\7s\2\2\u01a9\u01ab\5\u00a4S\2\u01aa\u01a9")
        buf.write("\3\2\2\2\u01aa\u01ab\3\2\2\2\u01ab?\3\2\2\2\u01ac\u01b2")
        buf.write("\5\66\34\2\u01ad\u01b2\58\35\2\u01ae\u01b2\5:\36\2\u01af")
        buf.write("\u01b2\5<\37\2\u01b0\u01b2\5> \2\u01b1\u01ac\3\2\2\2\u01b1")
        buf.write("\u01ad\3\2\2\2\u01b1\u01ae\3\2\2\2\u01b1\u01af\3\2\2\2")
        buf.write("\u01b1\u01b0\3\2\2\2\u01b2A\3\2\2\2\u01b3\u01b4\5\60\31")
        buf.write("\2\u01b4\u01b5\7e\2\2\u01b5\u01b7\3\2\2\2\u01b6\u01b3")
        buf.write("\3\2\2\2\u01b7\u01ba\3\2\2\2\u01b8\u01b6\3\2\2\2\u01b8")
        buf.write("\u01b9\3\2\2\2\u01b9\u01bb\3\2\2\2\u01ba\u01b8\3\2\2\2")
        buf.write("\u01bb\u01bc\5\60\31\2\u01bcC\3\2\2\2\u01bd\u01be\5*\26")
        buf.write("\2\u01be\u01bf\5\34\17\2\u01bf\u01c5\3\2\2\2\u01c0\u01c1")
        buf.write("\5,\27\2\u01c1\u01c2\5\36\20\2\u01c2\u01c5\3\2\2\2\u01c3")
        buf.write("\u01c5\5.\30\2\u01c4\u01bd\3\2\2\2\u01c4\u01c0\3\2\2\2")
        buf.write("\u01c4\u01c3\3\2\2\2\u01c5\u01c6\3\2\2\2\u01c6\u01c7\7")
        buf.write("s\2\2\u01c7\u01d9\3\2\2\2\u01c8\u01c9\7\n\2\2\u01c9\u01cb")
        buf.write("\7s\2\2\u01ca\u01cc\5\34\17\2\u01cb\u01ca\3\2\2\2\u01cb")
        buf.write("\u01cc\3\2\2\2\u01cc\u01d9\3\2\2\2\u01cd\u01cf\7\t\2\2")
        buf.write("\u01ce\u01d0\5\34\17\2\u01cf\u01ce\3\2\2\2\u01cf\u01d0")
        buf.write("\3\2\2\2\u01d0\u01d1\3\2\2\2\u01d1\u01d9\7s\2\2\u01d2")
        buf.write("\u01d3\7\21\2\2\u01d3\u01d4\7\\\2\2\u01d4\u01d5\5\62\32")
        buf.write("\2\u01d5\u01d6\7]\2\2\u01d6\u01d7\7s\2\2\u01d7\u01d9\3")
        buf.write("\2\2\2\u01d8\u01c4\3\2\2\2\u01d8\u01c8\3\2\2\2\u01d8\u01cd")
        buf.write("\3\2\2\2\u01d8\u01d2\3\2\2\2\u01d9E\3\2\2\2\u01da\u01df")
        buf.write("\5D#\2\u01db\u01dc\7e\2\2\u01dc\u01de\5D#\2\u01dd\u01db")
        buf.write("\3\2\2\2\u01de\u01e1\3\2\2\2\u01df\u01dd\3\2\2\2\u01df")
        buf.write("\u01e0\3\2\2\2\u01e0G\3\2\2\2\u01e1\u01df\3\2\2\2\u01e2")
        buf.write("\u01e5\5D#\2\u01e3\u01e5\5$\23\2\u01e4\u01e2\3\2\2\2\u01e4")
        buf.write("\u01e3\3\2\2\2\u01e5I\3\2\2\2\u01e6\u01e7\5H%\2\u01e7")
        buf.write("\u01e8\7e\2\2\u01e8\u01ea\3\2\2\2\u01e9\u01e6\3\2\2\2")
        buf.write("\u01ea\u01ed\3\2\2\2\u01eb\u01e9\3\2\2\2\u01eb\u01ec\3")
        buf.write("\2\2\2\u01ec\u01ee\3\2\2\2\u01ed\u01eb\3\2\2\2\u01ee\u01ef")
        buf.write("\5H%\2\u01efK\3\2\2\2\u01f0\u01f1\7\23\2\2\u01f1\u01f2")
        buf.write("\7s\2\2\u01f2\u01f3\7f\2\2\u01f3\u01f4\5N(\2\u01f4\u01f5")
        buf.write("\7c\2\2\u01f5M\3\2\2\2\u01f6\u01f7\b(\1\2\u01f7\u01f8")
        buf.write("\7s\2\2\u01f8\u0201\5R*\2\u01f9\u01fe\7s\2\2\u01fa\u01fb")
        buf.write("\7\\\2\2\u01fb\u01fc\5\u00a2R\2\u01fc\u01fd\7]\2\2\u01fd")
        buf.write("\u01ff\3\2\2\2\u01fe\u01fa\3\2\2\2\u01fe\u01ff\3\2\2\2")
        buf.write("\u01ff\u0201\3\2\2\2\u0200\u01f6\3\2\2\2\u0200\u01f9\3")
        buf.write("\2\2\2\u0201\u0207\3\2\2\2\u0202\u0203\f\3\2\2\u0203\u0204")
        buf.write("\7\24\2\2\u0204\u0206\5N(\4\u0205\u0202\3\2\2\2\u0206")
        buf.write("\u0209\3\2\2\2\u0207\u0205\3\2\2\2\u0207\u0208\3\2\2\2")
        buf.write("\u0208O\3\2\2\2\u0209\u0207\3\2\2\2\u020a\u020f\5N(\2")
        buf.write("\u020b\u020c\7e\2\2\u020c\u020e\5N(\2\u020d\u020b\3\2")
        buf.write("\2\2\u020e\u0211\3\2\2\2\u020f\u020d\3\2\2\2\u020f\u0210")
        buf.write("\3\2\2\2\u0210Q\3\2\2\2\u0211\u020f\3\2\2\2\u0212\u0214")
        buf.write("\7\\\2\2\u0213\u0215\5\u0080A\2\u0214\u0213\3\2\2\2\u0214")
        buf.write("\u0215\3\2\2\2\u0215\u0216\3\2\2\2\u0216\u0218\7b\2\2")
        buf.write("\u0217\u0219\5\u0080A\2\u0218\u0217\3\2\2\2\u0218\u0219")
        buf.write("\3\2\2\2\u0219\u021c\3\2\2\2\u021a\u021b\7b\2\2\u021b")
        buf.write("\u021d\5\u0080A\2\u021c\u021a\3\2\2\2\u021c\u021d\3\2")
        buf.write("\2\2\u021d\u021e\3\2\2\2\u021e\u021f\7]\2\2\u021fS\3\2")
        buf.write("\2\2\u0220\u0221\7\25\2\2\u0221\u0222\5V,\2\u0222\u0223")
        buf.write("\5Z.\2\u0223U\3\2\2\2\u0224\u022a\5X-\2\u0225\u0227\7")
        buf.write("`\2\2\u0226\u0228\5 \21\2\u0227\u0226\3\2\2\2\u0227\u0228")
        buf.write("\3\2\2\2\u0228\u0229\3\2\2\2\u0229\u022b\7a\2\2\u022a")
        buf.write("\u0225\3\2\2\2\u022a\u022b\3\2\2\2\u022b\u022c\3\2\2\2")
        buf.write("\u022c\u022d\5 \21\2\u022dW\3\2\2\2\u022e\u022f\t\6\2")
        buf.write("\2\u022fY\3\2\2\2\u0230\u0235\7^\2\2\u0231\u0234\5`\61")
        buf.write("\2\u0232\u0234\5\\/\2\u0233\u0231\3\2\2\2\u0233\u0232")
        buf.write("\3\2\2\2\u0234\u0237\3\2\2\2\u0235\u0233\3\2\2\2\u0235")
        buf.write("\u0236\3\2\2\2\u0236\u0238\3\2\2\2\u0237\u0235\3\2\2\2")
        buf.write("\u0238\u0239\7_\2\2\u0239[\3\2\2\2\u023a\u023b\5\u00ae")
        buf.write("X\2\u023b\u023c\5^\60\2\u023c]\3\2\2\2\u023d\u0247\5`")
        buf.write("\61\2\u023e\u0242\7^\2\2\u023f\u0241\5`\61\2\u0240\u023f")
        buf.write("\3\2\2\2\u0241\u0244\3\2\2\2\u0242\u0240\3\2\2\2\u0242")
        buf.write("\u0243\3\2\2\2\u0243\u0245\3\2\2\2\u0244\u0242\3\2\2\2")
        buf.write("\u0245\u0247\7_\2\2\u0246\u023d\3\2\2\2\u0246\u023e\3")
        buf.write("\2\2\2\u0247_\3\2\2\2\u0248\u0249\5b\62\2\u0249\u024a")
        buf.write("\7c\2\2\u024a\u024d\3\2\2\2\u024b\u024d\5\u00ccg\2\u024c")
        buf.write("\u0248\3\2\2\2\u024c\u024b\3\2\2\2\u024da\3\2\2\2\u024e")
        buf.write("\u0254\5t;\2\u024f\u0254\5d\63\2\u0250\u0254\5h\65\2\u0251")
        buf.write("\u0254\5f\64\2\u0252\u0254\5l\67\2\u0253\u024e\3\2\2\2")
        buf.write("\u0253\u024f\3\2\2\2\u0253\u0250\3\2\2\2\u0253\u0251\3")
        buf.write("\2\2\2\u0253\u0252\3\2\2\2\u0254c\3\2\2\2\u0255\u0257")
        buf.write("\5n8\2\u0256\u0255\3\2\2\2\u0257\u025a\3\2\2\2\u0258\u0256")
        buf.write("\3\2\2\2\u0258\u0259\3\2\2\2\u0259\u025b\3\2\2\2\u025a")
        buf.write("\u0258\3\2\2\2\u025b\u025c\7\30\2\2\u025c\u025d\7`\2\2")
        buf.write("\u025d\u025e\5\u0080A\2\u025e\u0260\7a\2\2\u025f\u0261")
        buf.write("\5P)\2\u0260\u025f\3\2\2\2\u0260\u0261\3\2\2\2\u0261e")
        buf.write("\3\2\2\2\u0262\u0263\7\31\2\2\u0263\u0264\5P)\2\u0264")
        buf.write("g\3\2\2\2\u0265\u0266\7\32\2\2\u0266\u0267\5P)\2\u0267")
        buf.write("i\3\2\2\2\u0268\u026b\5h\65\2\u0269\u026a\7g\2\2\u026a")
        buf.write("\u026c\5P)\2\u026b\u0269\3\2\2\2\u026b\u026c\3\2\2\2\u026c")
        buf.write("\u0272\3\2\2\2\u026d\u026e\5P)\2\u026e\u026f\7f\2\2\u026f")
        buf.write("\u0270\5h\65\2\u0270\u0272\3\2\2\2\u0271\u0268\3\2\2\2")
        buf.write("\u0271\u026d\3\2\2\2\u0272k\3\2\2\2\u0273\u0275\7\33\2")
        buf.write("\2\u0274\u0276\5P)\2\u0275\u0274\3\2\2\2\u0275\u0276\3")
        buf.write("\2\2\2\u0276m\3\2\2\2\u0277\u027b\7\34\2\2\u0278\u027b")
        buf.write("\5p9\2\u0279\u027b\5r:\2\u027a\u0277\3\2\2\2\u027a\u0278")
        buf.write("\3\2\2\2\u027a\u0279\3\2\2\2\u027b\u027c\3\2\2\2\u027c")
        buf.write("\u027d\7\35\2\2\u027do\3\2\2\2\u027e\u027f\7\36\2\2\u027f")
        buf.write("\u0280\7`\2\2\u0280\u0281\5\u0080A\2\u0281\u0282\7a\2")
        buf.write("\2\u0282q\3\2\2\2\u0283\u0288\t\7\2\2\u0284\u0285\7`\2")
        buf.write("\2\u0285\u0286\5\u0080A\2\u0286\u0287\7a\2\2\u0287\u0289")
        buf.write("\3\2\2\2\u0288\u0284\3\2\2\2\u0288\u0289\3\2\2\2\u0289")
        buf.write("s\3\2\2\2\u028a\u028c\5n8\2\u028b\u028a\3\2\2\2\u028c")
        buf.write("\u028f\3\2\2\2\u028d\u028b\3\2\2\2\u028d\u028e\3\2\2\2")
        buf.write("\u028e\u0290\3\2\2\2\u028f\u028d\3\2\2\2\u0290\u0295\5")
        buf.write("X-\2\u0291\u0292\7`\2\2\u0292\u0293\5\u00a2R\2\u0293\u0294")
        buf.write("\7a\2\2\u0294\u0296\3\2\2\2\u0295\u0291\3\2\2\2\u0295")
        buf.write("\u0296\3\2\2\2\u0296\u0297\3\2\2\2\u0297\u0298\5P)\2\u0298")
        buf.write("u\3\2\2\2\u0299\u029a\t\b\2\2\u029aw\3\2\2\2\u029b\u029c")
        buf.write("\t\t\2\2\u029cy\3\2\2\2\u029d\u029e\t\n\2\2\u029e{\3\2")
        buf.write("\2\2\u029f\u02a0\t\13\2\2\u02a0}\3\2\2\2\u02a1\u02a2\5")
        buf.write("\u0080A\2\u02a2\u02a3\7c\2\2\u02a3\177\3\2\2\2\u02a4\u02a5")
        buf.write("\bA\1\2\u02a5\u02a9\5\u0098M\2\u02a6\u02a9\5\u0094K\2")
        buf.write("\u02a7\u02a9\5\u0082B\2\u02a8\u02a4\3\2\2\2\u02a8\u02a6")
        buf.write("\3\2\2\2\u02a8\u02a7\3\2\2\2\u02a9\u02af\3\2\2\2\u02aa")
        buf.write("\u02ab\f\3\2\2\u02ab\u02ac\7\24\2\2\u02ac\u02ae\5\u0082")
        buf.write("B\2\u02ad\u02aa\3\2\2\2\u02ae\u02b1\3\2\2\2\u02af\u02ad")
        buf.write("\3\2\2\2\u02af\u02b0\3\2\2\2\u02b0\u0081\3\2\2\2\u02b1")
        buf.write("\u02af\3\2\2\2\u02b2\u02b3\bB\1\2\u02b3\u02b4\5\u0084")
        buf.write("C\2\u02b4\u02ba\3\2\2\2\u02b5\u02b6\f\3\2\2\u02b6\u02b7")
        buf.write("\7)\2\2\u02b7\u02b9\5\u0084C\2\u02b8\u02b5\3\2\2\2\u02b9")
        buf.write("\u02bc\3\2\2\2\u02ba\u02b8\3\2\2\2\u02ba\u02bb\3\2\2\2")
        buf.write("\u02bb\u0083\3\2\2\2\u02bc\u02ba\3\2\2\2\u02bd\u02be\b")
        buf.write("C\1\2\u02be\u02bf\5\u0086D\2\u02bf\u02c5\3\2\2\2\u02c0")
        buf.write("\u02c1\f\3\2\2\u02c1\u02c2\7*\2\2\u02c2\u02c4\5\u0086")
        buf.write("D\2\u02c3\u02c0\3\2\2\2\u02c4\u02c7\3\2\2\2\u02c5\u02c3")
        buf.write("\3\2\2\2\u02c5\u02c6\3\2\2\2\u02c6\u0085\3\2\2\2\u02c7")
        buf.write("\u02c5\3\2\2\2\u02c8\u02c9\bD\1\2\u02c9\u02ca\5\u0088")
        buf.write("E\2\u02ca\u02d0\3\2\2\2\u02cb\u02cc\f\3\2\2\u02cc\u02cd")
        buf.write("\7+\2\2\u02cd\u02cf\5\u0088E\2\u02ce\u02cb\3\2\2\2\u02cf")
        buf.write("\u02d2\3\2\2\2\u02d0\u02ce\3\2\2\2\u02d0\u02d1\3\2\2\2")
        buf.write("\u02d1\u0087\3\2\2\2\u02d2\u02d0\3\2\2\2\u02d3\u02d4\b")
        buf.write("E\1\2\u02d4\u02d5\5\u008aF\2\u02d5\u02db\3\2\2\2\u02d6")
        buf.write("\u02d7\f\3\2\2\u02d7\u02d8\7,\2\2\u02d8\u02da\5\u008a")
        buf.write("F\2\u02d9\u02d6\3\2\2\2\u02da\u02dd\3\2\2\2\u02db\u02d9")
        buf.write("\3\2\2\2\u02db\u02dc\3\2\2\2\u02dc\u0089\3\2\2\2\u02dd")
        buf.write("\u02db\3\2\2\2\u02de\u02df\bF\1\2\u02df\u02e0\5\u008c")
        buf.write("G\2\u02e0\u02e7\3\2\2\2\u02e1\u02e2\f\3\2\2\u02e2\u02e3")
        buf.write("\5z>\2\u02e3\u02e4\5\u008cG\2\u02e4\u02e6\3\2\2\2\u02e5")
        buf.write("\u02e1\3\2\2\2\u02e6\u02e9\3\2\2\2\u02e7\u02e5\3\2\2\2")
        buf.write("\u02e7\u02e8\3\2\2\2\u02e8\u008b\3\2\2\2\u02e9\u02e7\3")
        buf.write("\2\2\2\u02ea\u02eb\bG\1\2\u02eb\u02ec\5\u008eH\2\u02ec")
        buf.write("\u02f3\3\2\2\2\u02ed\u02ee\f\3\2\2\u02ee\u02ef\5x=\2\u02ef")
        buf.write("\u02f0\5\u008eH\2\u02f0\u02f2\3\2\2\2\u02f1\u02ed\3\2")
        buf.write("\2\2\u02f2\u02f5\3\2\2\2\u02f3\u02f1\3\2\2\2\u02f3\u02f4")
        buf.write("\3\2\2\2\u02f4\u008d\3\2\2\2\u02f5\u02f3\3\2\2\2\u02f6")
        buf.write("\u02f7\bH\1\2\u02f7\u02f8\5\u0090I\2\u02f8\u02fe\3\2\2")
        buf.write("\2\u02f9\u02fa\f\3\2\2\u02fa\u02fb\t\f\2\2\u02fb\u02fd")
        buf.write("\5\u0090I\2\u02fc\u02f9\3\2\2\2\u02fd\u0300\3\2\2\2\u02fe")
        buf.write("\u02fc\3\2\2\2\u02fe\u02ff\3\2\2\2\u02ff\u008f\3\2\2\2")
        buf.write("\u0300\u02fe\3\2\2\2\u0301\u0302\bI\1\2\u0302\u0303\5")
        buf.write("\u0092J\2\u0303\u0309\3\2\2\2\u0304\u0305\f\3\2\2\u0305")
        buf.write("\u0306\t\r\2\2\u0306\u0308\5\u0092J\2\u0307\u0304\3\2")
        buf.write("\2\2\u0308\u030b\3\2\2\2\u0309\u0307\3\2\2\2\u0309\u030a")
        buf.write("\3\2\2\2\u030a\u0091\3\2\2\2\u030b\u0309\3\2\2\2\u030c")
        buf.write("\u030d\bJ\1\2\u030d\u0310\5\u0096L\2\u030e\u0310\5\u0094")
        buf.write("K\2\u030f\u030c\3\2\2\2\u030f\u030e\3\2\2\2\u0310\u0319")
        buf.write("\3\2\2\2\u0311\u0312\f\3\2\2\u0312\u0315\t\16\2\2\u0313")
        buf.write("\u0316\5\u0096L\2\u0314\u0316\5\u0094K\2\u0315\u0313\3")
        buf.write("\2\2\2\u0315\u0314\3\2\2\2\u0316\u0318\3\2\2\2\u0317\u0311")
        buf.write("\3\2\2\2\u0318\u031b\3\2\2\2\u0319\u0317\3\2\2\2\u0319")
        buf.write("\u031a\3\2\2\2\u031a\u0093\3\2\2\2\u031b\u0319\3\2\2\2")
        buf.write("\u031c\u031d\5v<\2\u031d\u031e\5\u0096L\2\u031e\u0095")
        buf.write("\3\2\2\2\u031f\u0325\5\u0098M\2\u0320\u0321\5\u0098M\2")
        buf.write("\u0321\u0322\7/\2\2\u0322\u0323\5\u0096L\2\u0323\u0325")
        buf.write("\3\2\2\2\u0324\u031f\3\2\2\2\u0324\u0320\3\2\2\2\u0325")
        buf.write("\u0097\3\2\2\2\u0326\u0327\bM\1\2\u0327\u0336\7o\2\2\u0328")
        buf.write("\u0336\7r\2\2\u0329\u0336\7t\2\2\u032a\u0336\7n\2\2\u032b")
        buf.write("\u0336\5\u009aN\2\u032c\u0336\7s\2\2\u032d\u0336\7v\2")
        buf.write("\2\u032e\u0336\5\u009cO\2\u032f\u0336\5\u00ba^\2\u0330")
        buf.write("\u0336\5\u00c6d\2\u0331\u0332\7`\2\2\u0332\u0333\5\u0080")
        buf.write("A\2\u0333\u0334\7a\2\2\u0334\u0336\3\2\2\2\u0335\u0326")
        buf.write("\3\2\2\2\u0335\u0328\3\2\2\2\u0335\u0329\3\2\2\2\u0335")
        buf.write("\u032a\3\2\2\2\u0335\u032b\3\2\2\2\u0335\u032c\3\2\2\2")
        buf.write("\u0335\u032d\3\2\2\2\u0335\u032e\3\2\2\2\u0335\u032f\3")
        buf.write("\2\2\2\u0335\u0330\3\2\2\2\u0335\u0331\3\2\2\2\u0336\u033e")
        buf.write("\3\2\2\2\u0337\u0338\f\3\2\2\u0338\u0339\7\\\2\2\u0339")
        buf.write("\u033a\5\u0080A\2\u033a\u033b\7]\2\2\u033b\u033d\3\2\2")
        buf.write("\2\u033c\u0337\3\2\2\2\u033d\u0340\3\2\2\2\u033e\u033c")
        buf.write("\3\2\2\2\u033e\u033f\3\2\2\2\u033f\u0099\3\2\2\2\u0340")
        buf.write("\u033e\3\2\2\2\u0341\u0342\t\17\2\2\u0342\u009b\3\2\2")
        buf.write("\2\u0343\u0346\5\u009eP\2\u0344\u0346\5\u00a0Q\2\u0345")
        buf.write("\u0343\3\2\2\2\u0345\u0344\3\2\2\2\u0346\u0347\3\2\2\2")
        buf.write("\u0347\u0348\7`\2\2\u0348\u0349\5\u00a2R\2\u0349\u034a")
        buf.write("\7a\2\2\u034a\u009d\3\2\2\2\u034b\u034c\t\20\2\2\u034c")
        buf.write("\u009f\3\2\2\2\u034d\u034e\5\60\31\2\u034e\u00a1\3\2\2")
        buf.write("\2\u034f\u0354\5\u0080A\2\u0350\u0351\7e\2\2\u0351\u0353")
        buf.write("\5\u0080A\2\u0352\u0350\3\2\2\2\u0353\u0356\3\2\2\2\u0354")
        buf.write("\u0352\3\2\2\2\u0354\u0355\3\2\2\2\u0355\u00a3\3\2\2\2")
        buf.write("\u0356\u0354\3\2\2\2\u0357\u0358\7f\2\2\u0358\u0359\5")
        buf.write("\u0080A\2\u0359\u00a5\3\2\2\2\u035a\u035b\t\21\2\2\u035b")
        buf.write("\u00a7\3\2\2\2\u035c\u035d\7^\2\2\u035d\u035e\5\u00a2")
        buf.write("R\2\u035e\u035f\7_\2\2\u035f\u0363\3\2\2\2\u0360\u0363")
        buf.write("\5R*\2\u0361\u0363\7s\2\2\u0362\u035c\3\2\2\2\u0362\u0360")
        buf.write("\3\2\2\2\u0362\u0361\3\2\2\2\u0363\u00a9\3\2\2\2\u0364")
        buf.write("\u0370\5\20\t\2\u0365\u0370\5\u00b6\\\2\u0366\u036b\7")
        buf.write("^\2\2\u0367\u036a\5\20\t\2\u0368\u036a\5\u00b6\\\2\u0369")
        buf.write("\u0367\3\2\2\2\u0369\u0368\3\2\2\2\u036a\u036d\3\2\2\2")
        buf.write("\u036b\u0369\3\2\2\2\u036b\u036c\3\2\2\2\u036c\u036e\3")
        buf.write("\2\2\2\u036d\u036b\3\2\2\2\u036e\u0370\7_\2\2\u036f\u0364")
        buf.write("\3\2\2\2\u036f\u0365\3\2\2\2\u036f\u0366\3\2\2\2\u0370")
        buf.write("\u00ab\3\2\2\2\u0371\u0372\7G\2\2\u0372\u0373\7`\2\2\u0373")
        buf.write("\u0374\5\u0080A\2\u0374\u0375\7a\2\2\u0375\u0378\5\u00aa")
        buf.write("V\2\u0376\u0377\7H\2\2\u0377\u0379\5\u00aaV\2\u0378\u0376")
        buf.write("\3\2\2\2\u0378\u0379\3\2\2\2\u0379\u00ad\3\2\2\2\u037a")
        buf.write("\u037b\7I\2\2\u037b\u037c\7s\2\2\u037c\u037d\7J\2\2\u037d")
        buf.write("\u0384\5\u00a8U\2\u037e\u037f\7K\2\2\u037f\u0380\7`\2")
        buf.write("\2\u0380\u0381\5\u0080A\2\u0381\u0382\7a\2\2\u0382\u0384")
        buf.write("\3\2\2\2\u0383\u037a\3\2\2\2\u0383\u037e\3\2\2\2\u0384")
        buf.write("\u00af\3\2\2\2\u0385\u0386\5\u00aeX\2\u0386\u0387\5\u00aa")
        buf.write("V\2\u0387\u00b1\3\2\2\2\u0388\u0389\7L\2\2\u0389\u038a")
        buf.write("\7c\2\2\u038a\u00b3\3\2\2\2\u038b\u038e\7M\2\2\u038c\u038f")
        buf.write("\5\u0080A\2\u038d\u038f\5h\65\2\u038e\u038c\3\2\2\2\u038e")
        buf.write("\u038d\3\2\2\2\u038e\u038f\3\2\2\2\u038f\u0390\3\2\2\2")
        buf.write("\u0390\u0391\7c\2\2\u0391\u00b5\3\2\2\2\u0392\u0393\t")
        buf.write("\22\2\2\u0393\u0397\7c\2\2\u0394\u0397\5\u00b2Z\2\u0395")
        buf.write("\u0397\5\u00b4[\2\u0396\u0392\3\2\2\2\u0396\u0394\3\2")
        buf.write("\2\2\u0396\u0395\3\2\2\2\u0397\u00b7\3\2\2\2\u0398\u0399")
        buf.write("\7P\2\2\u0399\u039a\7s\2\2\u039a\u039c\7`\2\2\u039b\u039d")
        buf.write("\5B\"\2\u039c\u039b\3\2\2\2\u039c\u039d\3\2\2\2\u039d")
        buf.write("\u039e\3\2\2\2\u039e\u03a0\7a\2\2\u039f\u03a1\5\32\16")
        buf.write("\2\u03a0\u039f\3\2\2\2\u03a0\u03a1\3\2\2\2\u03a1\u03a2")
        buf.write("\3\2\2\2\u03a2\u03a3\7c\2\2\u03a3\u00b9\3\2\2\2\u03a4")
        buf.write("\u03a5\7s\2\2\u03a5\u03a7\7`\2\2\u03a6\u03a8\5\u00a2R")
        buf.write("\2\u03a7\u03a6\3\2\2\2\u03a7\u03a8\3\2\2\2\u03a8\u03a9")
        buf.write("\3\2\2\2\u03a9\u03aa\7a\2\2\u03aa\u00bb\3\2\2\2\u03ab")
        buf.write("\u03ac\7Q\2\2\u03ac\u03ad\7s\2\2\u03ad\u03af\7`\2\2\u03ae")
        buf.write("\u03b0\5J&\2\u03af\u03ae\3\2\2\2\u03af\u03b0\3\2\2\2\u03b0")
        buf.write("\u03b1\3\2\2\2\u03b1\u03b3\7a\2\2\u03b2\u03b4\5\32\16")
        buf.write("\2\u03b3\u03b2\3\2\2\2\u03b3\u03b4\3\2\2\2\u03b4\u03b5")
        buf.write("\3\2\2\2\u03b5\u03b6\5\u00be`\2\u03b6\u00bd\3\2\2\2\u03b7")
        buf.write("\u03bb\7^\2\2\u03b8\u03ba\5\20\t\2\u03b9\u03b8\3\2\2\2")
        buf.write("\u03ba\u03bd\3\2\2\2\u03bb\u03b9\3\2\2\2\u03bb\u03bc\3")
        buf.write("\2\2\2\u03bc\u03bf\3\2\2\2\u03bd\u03bb\3\2\2\2\u03be\u03c0")
        buf.write("\5\u00b4[\2\u03bf\u03be\3\2\2\2\u03bf\u03c0\3\2\2\2\u03c0")
        buf.write("\u03c1\3\2\2\2\u03c1\u03c2\7_\2\2\u03c2\u00bf\3\2\2\2")
        buf.write("\u03c3\u03c4\7R\2\2\u03c4\u03c8\7^\2\2\u03c5\u03c7\5\20")
        buf.write("\t\2\u03c6\u03c5\3\2\2\2\u03c7\u03ca\3\2\2\2\u03c8\u03c6")
        buf.write("\3\2\2\2\u03c8\u03c9\3\2\2\2\u03c9\u03cb\3\2\2\2\u03ca")
        buf.write("\u03c8\3\2\2\2\u03cb\u03cc\7_\2\2\u03cc\u00c1\3\2\2\2")
        buf.write("\u03cd\u03ce\t\23\2\2\u03ce\u00c3\3\2\2\2\u03cf\u03d1")
        buf.write("\7U\2\2\u03d0\u03d2\5\34\17\2\u03d1\u03d0\3\2\2\2\u03d1")
        buf.write("\u03d2\3\2\2\2\u03d2\u03d3\3\2\2\2\u03d3\u03d4\5Z.\2\u03d4")
        buf.write("\u00c5\3\2\2\2\u03d5\u03de\7u\2\2\u03d6\u03d7\7V\2\2\u03d7")
        buf.write("\u03da\7`\2\2\u03d8\u03db\7s\2\2\u03d9\u03db\5Z.\2\u03da")
        buf.write("\u03d8\3\2\2\2\u03da\u03d9\3\2\2\2\u03db\u03dc\3\2\2\2")
        buf.write("\u03dc\u03de\7a\2\2\u03dd\u03d5\3\2\2\2\u03dd\u03d6\3")
        buf.write("\2\2\2\u03de\u00c7\3\2\2\2\u03df\u03e0\t\24\2\2\u03e0")
        buf.write("\u00c9\3\2\2\2\u03e1\u03e7\5\u00c8e\2\u03e2\u03e4\7`\2")
        buf.write("\2\u03e3\u03e5\5\u00a2R\2\u03e4\u03e3\3\2\2\2\u03e4\u03e5")
        buf.write("\3\2\2\2\u03e5\u03e6\3\2\2\2\u03e6\u03e8\7a\2\2\u03e7")
        buf.write("\u03e2\3\2\2\2\u03e7\u03e8\3\2\2\2\u03e8\u03e9\3\2\2\2")
        buf.write("\u03e9\u03ea\5\34\17\2\u03ea\u03eb\5P)\2\u03eb\u00cb\3")
        buf.write("\2\2\2\u03ec\u03ed\5\u00caf\2\u03ed\u03ee\7c\2\2\u03ee")
        buf.write("\u03f1\3\2\2\2\u03ef\u03f1\5\u00c4c\2\u03f0\u03ec\3\2")
        buf.write("\2\2\u03f0\u03ef\3\2\2\2\u03f1\u00cd\3\2\2\2\u03f2\u03f5")
        buf.write("\5\u00d0i\2\u03f3\u03f5\5\u00d2j\2\u03f4\u03f2\3\2\2\2")
        buf.write("\u03f4\u03f3\3\2\2\2\u03f5\u00cf\3\2\2\2\u03f6\u03f7\7")
        buf.write("Y\2\2\u03f7\u03f8\5\u00d4k\2\u03f8\u03f9\7c\2\2\u03f9")
        buf.write("\u00d1\3\2\2\2\u03fa\u03fb\7Z\2\2\u03fb\u0401\7s\2\2\u03fc")
        buf.write("\u03fe\7`\2\2\u03fd\u03ff\5\u00d6l\2\u03fe\u03fd\3\2\2")
        buf.write("\2\u03fe\u03ff\3\2\2\2\u03ff\u0400\3\2\2\2\u0400\u0402")
        buf.write("\7a\2\2\u0401\u03fc\3\2\2\2\u0401\u0402\3\2\2\2\u0402")
        buf.write("\u0403\3\2\2\2\u0403\u0405\5 \21\2\u0404\u0406\5\32\16")
        buf.write("\2\u0405\u0404\3\2\2\2\u0405\u0406\3\2\2\2\u0406\u0407")
        buf.write("\3\2\2\2\u0407\u040b\7^\2\2\u0408\u040a\13\2\2\2\u0409")
        buf.write("\u0408\3\2\2\2\u040a\u040d\3\2\2\2\u040b\u040c\3\2\2\2")
        buf.write("\u040b\u0409\3\2\2\2\u040c\u040e\3\2\2\2\u040d\u040b\3")
        buf.write("\2\2\2\u040e\u040f\7_\2\2\u040f\u00d3\3\2\2\2\u0410\u0411")
        buf.write("\t\25\2\2\u0411\u00d5\3\2\2\2\u0412\u0415\5F$\2\u0413")
        buf.write("\u0415\5\u00a2R\2\u0414\u0412\3\2\2\2\u0414\u0413\3\2")
        buf.write("\2\2\u0415\u00d7\3\2\2\2o\u00db\u00dd\u00e1\u00e6\u00ec")
        buf.write("\u0104\u010e\u0115\u011b\u0122\u0137\u013f\u0143\u0146")
        buf.write("\u014b\u014f\u0152\u0159\u0164\u016f\u0176\u017e\u0188")
        buf.write("\u018e\u0193\u0198\u019c\u019f\u01a2\u01aa\u01b1\u01b8")
        buf.write("\u01c4\u01cb\u01cf\u01d8\u01df\u01e4\u01eb\u01fe\u0200")
        buf.write("\u0207\u020f\u0214\u0218\u021c\u0227\u022a\u0233\u0235")
        buf.write("\u0242\u0246\u024c\u0253\u0258\u0260\u026b\u0271\u0275")
        buf.write("\u027a\u0288\u028d\u0295\u02a8\u02af\u02ba\u02c5\u02d0")
        buf.write("\u02db\u02e7\u02f3\u02fe\u0309\u030f\u0315\u0319\u0324")
        buf.write("\u0335\u033e\u0345\u0354\u0362\u0369\u036b\u036f\u0378")
        buf.write("\u0383\u038e\u0396\u039c\u03a0\u03a7\u03af\u03b3\u03bb")
        buf.write("\u03bf\u03c8\u03d1\u03da\u03dd\u03e4\u03e7\u03f0\u03f4")
        buf.write("\u03fe\u0401\u0405\u040b\u0414")
        return buf.getvalue()


class qasm3Parser ( Parser ):

    grammarFileName = "qasm3.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'OPENQASM'", "'include'", "'input'", 
                     "'output'", "'qreg'", "'qubit'", "'bit'", "'creg'", 
                     "'int'", "'uint'", "'float'", "'angle'", "'fixed'", 
                     "'bool'", "'complex'", "'const'", "'let'", "'||'", 
                     "'gate'", "'U'", "'CX'", "'gphase'", "'reset'", "'measure'", 
                     "'barrier'", "'inv'", "'@'", "'pow'", "'ctrl'", "'negctrl'", 
                     "'~'", "'!'", "'>'", "'<'", "'>='", "'<='", "'=='", 
                     "'!='", "'&&'", "'|'", "'^'", "'&'", "'<<'", "'>>'", 
                     "'**'", "'true'", "'false'", "'sin'", "'cos'", "'tan'", 
                     "'exp'", "'ln'", "'sqrt'", "'rotl'", "'rotr'", "'popcount'", 
                     "'+='", "'-='", "'*='", "'/='", "'&='", "'|='", "'~='", 
                     "'^='", "'<<='", "'>>='", "'%='", "'**='", "'if'", 
                     "'else'", "'for'", "'in'", "'while'", "'end'", "'return'", 
                     "'break'", "'continue'", "'extern'", "'def'", "'#pragma'", 
                     "'duration'", "'stretch'", "'box'", "'durationof'", 
                     "'delay'", "'rotary'", "'defcalgrammar'", "'defcal'", 
                     "'\"openpulse\"'", "'['", "']'", "'{'", "'}'", "'('", 
                     "')'", "':'", "';'", "'.'", "','", "'='", "'->'", "'+'", 
                     "'-'", "'*'", "'/'", "'%'", "'im'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "LBRACKET", "RBRACKET", 
                      "LBRACE", "RBRACE", "LPAREN", "RPAREN", "COLON", "SEMICOLON", 
                      "DOT", "COMMA", "EQUALS", "ARROW", "PLUS", "MINUS", 
                      "MUL", "DIV", "MOD", "IMAG", "ImagNumber", "Constant", 
                      "Whitespace", "Newline", "Integer", "Identifier", 
                      "RealNumber", "TimingLiteral", "StringLiteral", "LineComment", 
                      "BlockComment" ]

    RULE_program = 0
    RULE_header = 1
    RULE_version = 2
    RULE_include = 3
    RULE_ioIdentifier = 4
    RULE_io = 5
    RULE_globalStatement = 6
    RULE_statement = 7
    RULE_quantumDeclarationStatement = 8
    RULE_classicalDeclarationStatement = 9
    RULE_classicalAssignment = 10
    RULE_assignmentStatement = 11
    RULE_returnSignature = 12
    RULE_designator = 13
    RULE_doubleDesignator = 14
    RULE_identifierList = 15
    RULE_quantumDeclaration = 16
    RULE_quantumArgument = 17
    RULE_quantumArgumentList = 18
    RULE_bitType = 19
    RULE_singleDesignatorType = 20
    RULE_doubleDesignatorType = 21
    RULE_noDesignatorType = 22
    RULE_classicalType = 23
    RULE_numericType = 24
    RULE_constantDeclaration = 25
    RULE_singleDesignatorDeclaration = 26
    RULE_doubleDesignatorDeclaration = 27
    RULE_noDesignatorDeclaration = 28
    RULE_bitDeclaration = 29
    RULE_complexDeclaration = 30
    RULE_classicalDeclaration = 31
    RULE_classicalTypeList = 32
    RULE_classicalArgument = 33
    RULE_classicalArgumentList = 34
    RULE_anyTypeArgument = 35
    RULE_anyTypeArgumentList = 36
    RULE_aliasStatement = 37
    RULE_indexIdentifier = 38
    RULE_indexIdentifierList = 39
    RULE_rangeDefinition = 40
    RULE_quantumGateDefinition = 41
    RULE_quantumGateSignature = 42
    RULE_quantumGateName = 43
    RULE_quantumBlock = 44
    RULE_quantumLoop = 45
    RULE_quantumLoopBlock = 46
    RULE_quantumStatement = 47
    RULE_quantumInstruction = 48
    RULE_quantumPhase = 49
    RULE_quantumReset = 50
    RULE_quantumMeasurement = 51
    RULE_quantumMeasurementAssignment = 52
    RULE_quantumBarrier = 53
    RULE_quantumGateModifier = 54
    RULE_powModifier = 55
    RULE_ctrlModifier = 56
    RULE_quantumGateCall = 57
    RULE_unaryOperator = 58
    RULE_comparisonOperator = 59
    RULE_equalityOperator = 60
    RULE_logicalOperator = 61
    RULE_expressionStatement = 62
    RULE_expression = 63
    RULE_logicalAndExpression = 64
    RULE_bitOrExpression = 65
    RULE_xOrExpression = 66
    RULE_bitAndExpression = 67
    RULE_equalityExpression = 68
    RULE_comparisonExpression = 69
    RULE_bitShiftExpression = 70
    RULE_additiveExpression = 71
    RULE_multiplicativeExpression = 72
    RULE_unaryExpression = 73
    RULE_powerExpression = 74
    RULE_expressionTerminator = 75
    RULE_booleanLiteral = 76
    RULE_builtInCall = 77
    RULE_builtInMath = 78
    RULE_castOperator = 79
    RULE_expressionList = 80
    RULE_equalsExpression = 81
    RULE_assignmentOperator = 82
    RULE_setDeclaration = 83
    RULE_programBlock = 84
    RULE_branchingStatement = 85
    RULE_loopSignature = 86
    RULE_loopStatement = 87
    RULE_endStatement = 88
    RULE_returnStatement = 89
    RULE_controlDirective = 90
    RULE_externDeclaration = 91
    RULE_externOrSubroutineCall = 92
    RULE_subroutineDefinition = 93
    RULE_subroutineBlock = 94
    RULE_pragma = 95
    RULE_timingType = 96
    RULE_timingBox = 97
    RULE_timingIdentifier = 98
    RULE_timingInstructionName = 99
    RULE_timingInstruction = 100
    RULE_timingStatement = 101
    RULE_calibration = 102
    RULE_calibrationGrammarDeclaration = 103
    RULE_calibrationDefinition = 104
    RULE_calibrationGrammar = 105
    RULE_calibrationArgumentList = 106

    ruleNames =  [ "program", "header", "version", "include", "ioIdentifier", 
                   "io", "globalStatement", "statement", "quantumDeclarationStatement", 
                   "classicalDeclarationStatement", "classicalAssignment", 
                   "assignmentStatement", "returnSignature", "designator", 
                   "doubleDesignator", "identifierList", "quantumDeclaration", 
                   "quantumArgument", "quantumArgumentList", "bitType", 
                   "singleDesignatorType", "doubleDesignatorType", "noDesignatorType", 
                   "classicalType", "numericType", "constantDeclaration", 
                   "singleDesignatorDeclaration", "doubleDesignatorDeclaration", 
                   "noDesignatorDeclaration", "bitDeclaration", "complexDeclaration", 
                   "classicalDeclaration", "classicalTypeList", "classicalArgument", 
                   "classicalArgumentList", "anyTypeArgument", "anyTypeArgumentList", 
                   "aliasStatement", "indexIdentifier", "indexIdentifierList", 
                   "rangeDefinition", "quantumGateDefinition", "quantumGateSignature", 
                   "quantumGateName", "quantumBlock", "quantumLoop", "quantumLoopBlock", 
                   "quantumStatement", "quantumInstruction", "quantumPhase", 
                   "quantumReset", "quantumMeasurement", "quantumMeasurementAssignment", 
                   "quantumBarrier", "quantumGateModifier", "powModifier", 
                   "ctrlModifier", "quantumGateCall", "unaryOperator", "comparisonOperator", 
                   "equalityOperator", "logicalOperator", "expressionStatement", 
                   "expression", "logicalAndExpression", "bitOrExpression", 
                   "xOrExpression", "bitAndExpression", "equalityExpression", 
                   "comparisonExpression", "bitShiftExpression", "additiveExpression", 
                   "multiplicativeExpression", "unaryExpression", "powerExpression", 
                   "expressionTerminator", "booleanLiteral", "builtInCall", 
                   "builtInMath", "castOperator", "expressionList", "equalsExpression", 
                   "assignmentOperator", "setDeclaration", "programBlock", 
                   "branchingStatement", "loopSignature", "loopStatement", 
                   "endStatement", "returnStatement", "controlDirective", 
                   "externDeclaration", "externOrSubroutineCall", "subroutineDefinition", 
                   "subroutineBlock", "pragma", "timingType", "timingBox", 
                   "timingIdentifier", "timingInstructionName", "timingInstruction", 
                   "timingStatement", "calibration", "calibrationGrammarDeclaration", 
                   "calibrationDefinition", "calibrationGrammar", "calibrationArgumentList" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    T__84=85
    T__85=86
    T__86=87
    T__87=88
    T__88=89
    LBRACKET=90
    RBRACKET=91
    LBRACE=92
    RBRACE=93
    LPAREN=94
    RPAREN=95
    COLON=96
    SEMICOLON=97
    DOT=98
    COMMA=99
    EQUALS=100
    ARROW=101
    PLUS=102
    MINUS=103
    MUL=104
    DIV=105
    MOD=106
    IMAG=107
    ImagNumber=108
    Constant=109
    Whitespace=110
    Newline=111
    Integer=112
    Identifier=113
    RealNumber=114
    TimingLiteral=115
    StringLiteral=116
    LineComment=117
    BlockComment=118

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class ProgramContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def header(self):
            return self.getTypedRuleContext(qasm3Parser.HeaderContext,0)


        def globalStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(qasm3Parser.GlobalStatementContext)
            else:
                return self.getTypedRuleContext(qasm3Parser.GlobalStatementContext,i)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(qasm3Parser.StatementContext)
            else:
                return self.getTypedRuleContext(qasm3Parser.StatementContext,i)


        def getRuleIndex(self):
            return qasm3Parser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)




    def program(self):
        
        localctx = qasm3Parser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 214
            self.header()
            self.state = 219
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << qasm3Parser.T__4) | (1 << qasm3Parser.T__5) | (1 << qasm3Parser.T__6) | (1 << qasm3Parser.T__7) | (1 << qasm3Parser.T__8) | (1 << qasm3Parser.T__9) | (1 << qasm3Parser.T__10) | (1 << qasm3Parser.T__11) | (1 << qasm3Parser.T__12) | (1 << qasm3Parser.T__13) | (1 << qasm3Parser.T__14) | (1 << qasm3Parser.T__15) | (1 << qasm3Parser.T__16) | (1 << qasm3Parser.T__18) | (1 << qasm3Parser.T__19) | (1 << qasm3Parser.T__20) | (1 << qasm3Parser.T__21) | (1 << qasm3Parser.T__22) | (1 << qasm3Parser.T__23) | (1 << qasm3Parser.T__24) | (1 << qasm3Parser.T__25) | (1 << qasm3Parser.T__27) | (1 << qasm3Parser.T__28) | (1 << qasm3Parser.T__29) | (1 << qasm3Parser.T__30) | (1 << qasm3Parser.T__31) | (1 << qasm3Parser.T__45) | (1 << qasm3Parser.T__46) | (1 << qasm3Parser.T__47) | (1 << qasm3Parser.T__48) | (1 << qasm3Parser.T__49) | (1 << qasm3Parser.T__50) | (1 << qasm3Parser.T__51) | (1 << qasm3Parser.T__52) | (1 << qasm3Parser.T__53) | (1 << qasm3Parser.T__54) | (1 << qasm3Parser.T__55))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (qasm3Parser.T__68 - 69)) | (1 << (qasm3Parser.T__70 - 69)) | (1 << (qasm3Parser.T__72 - 69)) | (1 << (qasm3Parser.T__73 - 69)) | (1 << (qasm3Parser.T__77 - 69)) | (1 << (qasm3Parser.T__78 - 69)) | (1 << (qasm3Parser.T__79 - 69)) | (1 << (qasm3Parser.T__80 - 69)) | (1 << (qasm3Parser.T__81 - 69)) | (1 << (qasm3Parser.T__82 - 69)) | (1 << (qasm3Parser.T__83 - 69)) | (1 << (qasm3Parser.T__84 - 69)) | (1 << (qasm3Parser.T__85 - 69)) | (1 << (qasm3Parser.T__86 - 69)) | (1 << (qasm3Parser.T__87 - 69)) | (1 << (qasm3Parser.LPAREN - 69)) | (1 << (qasm3Parser.MINUS - 69)) | (1 << (qasm3Parser.ImagNumber - 69)) | (1 << (qasm3Parser.Constant - 69)) | (1 << (qasm3Parser.Integer - 69)) | (1 << (qasm3Parser.Identifier - 69)) | (1 << (qasm3Parser.RealNumber - 69)) | (1 << (qasm3Parser.TimingLiteral - 69)) | (1 << (qasm3Parser.StringLiteral - 69)))) != 0):
                self.state = 217
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [qasm3Parser.T__4, qasm3Parser.T__5, qasm3Parser.T__18, qasm3Parser.T__77, qasm3Parser.T__78, qasm3Parser.T__79, qasm3Parser.T__86, qasm3Parser.T__87]:
                    self.state = 215
                    self.globalStatement()
                    pass
                elif token in [qasm3Parser.T__6, qasm3Parser.T__7, qasm3Parser.T__8, qasm3Parser.T__9, qasm3Parser.T__10, qasm3Parser.T__11, qasm3Parser.T__12, qasm3Parser.T__13, qasm3Parser.T__14, qasm3Parser.T__15, qasm3Parser.T__16, qasm3Parser.T__19, qasm3Parser.T__20, qasm3Parser.T__21, qasm3Parser.T__22, qasm3Parser.T__23, qasm3Parser.T__24, qasm3Parser.T__25, qasm3Parser.T__27, qasm3Parser.T__28, qasm3Parser.T__29, qasm3Parser.T__30, qasm3Parser.T__31, qasm3Parser.T__45, qasm3Parser.T__46, qasm3Parser.T__47, qasm3Parser.T__48, qasm3Parser.T__49, qasm3Parser.T__50, qasm3Parser.T__51, qasm3Parser.T__52, qasm3Parser.T__53, qasm3Parser.T__54, qasm3Parser.T__55, qasm3Parser.T__68, qasm3Parser.T__70, qasm3Parser.T__72, qasm3Parser.T__73, qasm3Parser.T__80, qasm3Parser.T__81, qasm3Parser.T__82, qasm3Parser.T__83, qasm3Parser.T__84, qasm3Parser.T__85, qasm3Parser.LPAREN, qasm3Parser.MINUS, qasm3Parser.ImagNumber, qasm3Parser.Constant, qasm3Parser.Integer, qasm3Parser.Identifier, qasm3Parser.RealNumber, qasm3Parser.TimingLiteral, qasm3Parser.StringLiteral]:
                    self.state = 216
                    self.statement()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 221
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class HeaderContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def version(self):
            return self.getTypedRuleContext(qasm3Parser.VersionContext,0)


        def include(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(qasm3Parser.IncludeContext)
            else:
                return self.getTypedRuleContext(qasm3Parser.IncludeContext,i)


        def io(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(qasm3Parser.IoContext)
            else:
                return self.getTypedRuleContext(qasm3Parser.IoContext,i)


        def getRuleIndex(self):
            return qasm3Parser.RULE_header

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader" ):
                listener.enterHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader" ):
                listener.exitHeader(self)




    def header(self):

        localctx = qasm3Parser.HeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_header)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 223
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==qasm3Parser.T__0:
                self.state = 222
                self.version()


            self.state = 228
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==qasm3Parser.T__1:
                self.state = 225
                self.include()
                self.state = 230
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 234
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==qasm3Parser.T__2 or _la==qasm3Parser.T__3:
                self.state = 231
                self.io()
                self.state = 236
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VersionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(qasm3Parser.SEMICOLON, 0)

        def Integer(self):
            return self.getToken(qasm3Parser.Integer, 0)

        def RealNumber(self):
            return self.getToken(qasm3Parser.RealNumber, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersion" ):
                listener.enterVersion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersion" ):
                listener.exitVersion(self)




    def version(self):

        localctx = qasm3Parser.VersionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_version)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 237
            self.match(qasm3Parser.T__0)
            self.state = 238
            _la = self._input.LA(1)
            if not(_la==qasm3Parser.Integer or _la==qasm3Parser.RealNumber):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 239
            self.match(qasm3Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IncludeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self):
            return self.getToken(qasm3Parser.StringLiteral, 0)

        def SEMICOLON(self):
            return self.getToken(qasm3Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_include

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclude" ):
                listener.enterInclude(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclude" ):
                listener.exitInclude(self)




    def include(self):

        localctx = qasm3Parser.IncludeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_include)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 241
            self.match(qasm3Parser.T__1)
            self.state = 242
            self.match(qasm3Parser.StringLiteral)
            self.state = 243
            self.match(qasm3Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IoIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return qasm3Parser.RULE_ioIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIoIdentifier" ):
                listener.enterIoIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIoIdentifier" ):
                listener.exitIoIdentifier(self)




    def ioIdentifier(self):

        localctx = qasm3Parser.IoIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_ioIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 245
            _la = self._input.LA(1)
            if not(_la==qasm3Parser.T__2 or _la==qasm3Parser.T__3):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IoContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ioIdentifier(self):
            return self.getTypedRuleContext(qasm3Parser.IoIdentifierContext,0)


        def classicalType(self):
            return self.getTypedRuleContext(qasm3Parser.ClassicalTypeContext,0)


        def Identifier(self):
            return self.getToken(qasm3Parser.Identifier, 0)

        def SEMICOLON(self):
            return self.getToken(qasm3Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_io

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIo" ):
                listener.enterIo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIo" ):
                listener.exitIo(self)




    def io(self):

        localctx = qasm3Parser.IoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_io)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 247
            self.ioIdentifier()
            self.state = 248
            self.classicalType()
            self.state = 249
            self.match(qasm3Parser.Identifier)
            self.state = 250
            self.match(qasm3Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GlobalStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subroutineDefinition(self):
            return self.getTypedRuleContext(qasm3Parser.SubroutineDefinitionContext,0)


        def externDeclaration(self):
            return self.getTypedRuleContext(qasm3Parser.ExternDeclarationContext,0)


        def quantumGateDefinition(self):
            return self.getTypedRuleContext(qasm3Parser.QuantumGateDefinitionContext,0)


        def calibration(self):
            return self.getTypedRuleContext(qasm3Parser.CalibrationContext,0)


        def quantumDeclarationStatement(self):
            return self.getTypedRuleContext(qasm3Parser.QuantumDeclarationStatementContext,0)


        def pragma(self):
            return self.getTypedRuleContext(qasm3Parser.PragmaContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_globalStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobalStatement" ):
                listener.enterGlobalStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobalStatement" ):
                listener.exitGlobalStatement(self)




    def globalStatement(self):

        localctx = qasm3Parser.GlobalStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_globalStatement)
        try:
            self.state = 258
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [qasm3Parser.T__78]:
                self.enterOuterAlt(localctx, 1)
                self.state = 252
                self.subroutineDefinition()
                pass
            elif token in [qasm3Parser.T__77]:
                self.enterOuterAlt(localctx, 2)
                self.state = 253
                self.externDeclaration()
                pass
            elif token in [qasm3Parser.T__18]:
                self.enterOuterAlt(localctx, 3)
                self.state = 254
                self.quantumGateDefinition()
                pass
            elif token in [qasm3Parser.T__86, qasm3Parser.T__87]:
                self.enterOuterAlt(localctx, 4)
                self.state = 255
                self.calibration()
                pass
            elif token in [qasm3Parser.T__4, qasm3Parser.T__5]:
                self.enterOuterAlt(localctx, 5)
                self.state = 256
                self.quantumDeclarationStatement()
                pass
            elif token in [qasm3Parser.T__79]:
                self.enterOuterAlt(localctx, 6)
                self.state = 257
                self.pragma()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionStatement(self):
            return self.getTypedRuleContext(qasm3Parser.ExpressionStatementContext,0)


        def assignmentStatement(self):
            return self.getTypedRuleContext(qasm3Parser.AssignmentStatementContext,0)


        def classicalDeclarationStatement(self):
            return self.getTypedRuleContext(qasm3Parser.ClassicalDeclarationStatementContext,0)


        def branchingStatement(self):
            return self.getTypedRuleContext(qasm3Parser.BranchingStatementContext,0)


        def loopStatement(self):
            return self.getTypedRuleContext(qasm3Parser.LoopStatementContext,0)


        def endStatement(self):
            return self.getTypedRuleContext(qasm3Parser.EndStatementContext,0)


        def aliasStatement(self):
            return self.getTypedRuleContext(qasm3Parser.AliasStatementContext,0)


        def quantumStatement(self):
            return self.getTypedRuleContext(qasm3Parser.QuantumStatementContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = qasm3Parser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_statement)
        try:
            self.state = 268
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 260
                self.expressionStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 261
                self.assignmentStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 262
                self.classicalDeclarationStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 263
                self.branchingStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 264
                self.loopStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 265
                self.endStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 266
                self.aliasStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 267
                self.quantumStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QuantumDeclarationStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quantumDeclaration(self):
            return self.getTypedRuleContext(qasm3Parser.QuantumDeclarationContext,0)


        def SEMICOLON(self):
            return self.getToken(qasm3Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_quantumDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumDeclarationStatement" ):
                listener.enterQuantumDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumDeclarationStatement" ):
                listener.exitQuantumDeclarationStatement(self)




    def quantumDeclarationStatement(self):

        localctx = qasm3Parser.QuantumDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_quantumDeclarationStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 270
            self.quantumDeclaration()
            self.state = 271
            self.match(qasm3Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassicalDeclarationStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(qasm3Parser.SEMICOLON, 0)

        def classicalDeclaration(self):
            return self.getTypedRuleContext(qasm3Parser.ClassicalDeclarationContext,0)


        def constantDeclaration(self):
            return self.getTypedRuleContext(qasm3Parser.ConstantDeclarationContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_classicalDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassicalDeclarationStatement" ):
                listener.enterClassicalDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassicalDeclarationStatement" ):
                listener.exitClassicalDeclarationStatement(self)




    def classicalDeclarationStatement(self):

        localctx = qasm3Parser.ClassicalDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_classicalDeclarationStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 275
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [qasm3Parser.T__6, qasm3Parser.T__7, qasm3Parser.T__8, qasm3Parser.T__9, qasm3Parser.T__10, qasm3Parser.T__11, qasm3Parser.T__12, qasm3Parser.T__13, qasm3Parser.T__14, qasm3Parser.T__80, qasm3Parser.T__81]:
                self.state = 273
                self.classicalDeclaration()
                pass
            elif token in [qasm3Parser.T__15]:
                self.state = 274
                self.constantDeclaration()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 277
            self.match(qasm3Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassicalAssignmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(qasm3Parser.Identifier, 0)

        def assignmentOperator(self):
            return self.getTypedRuleContext(qasm3Parser.AssignmentOperatorContext,0)


        def expression(self):
            return self.getTypedRuleContext(qasm3Parser.ExpressionContext,0)


        def designator(self):
            return self.getTypedRuleContext(qasm3Parser.DesignatorContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_classicalAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassicalAssignment" ):
                listener.enterClassicalAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassicalAssignment" ):
                listener.exitClassicalAssignment(self)




    def classicalAssignment(self):

        localctx = qasm3Parser.ClassicalAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_classicalAssignment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 279
            self.match(qasm3Parser.Identifier)
            self.state = 281
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==qasm3Parser.LBRACKET:
                self.state = 280
                self.designator()


            self.state = 283
            self.assignmentOperator()
            self.state = 284
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(qasm3Parser.SEMICOLON, 0)

        def classicalAssignment(self):
            return self.getTypedRuleContext(qasm3Parser.ClassicalAssignmentContext,0)


        def quantumMeasurementAssignment(self):
            return self.getTypedRuleContext(qasm3Parser.QuantumMeasurementAssignmentContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_assignmentStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentStatement" ):
                listener.enterAssignmentStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentStatement" ):
                listener.exitAssignmentStatement(self)




    def assignmentStatement(self):

        localctx = qasm3Parser.AssignmentStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_assignmentStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 288
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.state = 286
                self.classicalAssignment()
                pass

            elif la_ == 2:
                self.state = 287
                self.quantumMeasurementAssignment()
                pass


            self.state = 290
            self.match(qasm3Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReturnSignatureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARROW(self):
            return self.getToken(qasm3Parser.ARROW, 0)

        def classicalType(self):
            return self.getTypedRuleContext(qasm3Parser.ClassicalTypeContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_returnSignature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnSignature" ):
                listener.enterReturnSignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnSignature" ):
                listener.exitReturnSignature(self)




    def returnSignature(self):

        localctx = qasm3Parser.ReturnSignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_returnSignature)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 292
            self.match(qasm3Parser.ARROW)
            self.state = 293
            self.classicalType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DesignatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACKET(self):
            return self.getToken(qasm3Parser.LBRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(qasm3Parser.ExpressionContext,0)


        def RBRACKET(self):
            return self.getToken(qasm3Parser.RBRACKET, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_designator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDesignator" ):
                listener.enterDesignator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDesignator" ):
                listener.exitDesignator(self)




    def designator(self):

        localctx = qasm3Parser.DesignatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_designator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 295
            self.match(qasm3Parser.LBRACKET)
            self.state = 296
            self.expression(0)
            self.state = 297
            self.match(qasm3Parser.RBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DoubleDesignatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACKET(self):
            return self.getToken(qasm3Parser.LBRACKET, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(qasm3Parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(qasm3Parser.ExpressionContext,i)


        def COMMA(self):
            return self.getToken(qasm3Parser.COMMA, 0)

        def RBRACKET(self):
            return self.getToken(qasm3Parser.RBRACKET, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_doubleDesignator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoubleDesignator" ):
                listener.enterDoubleDesignator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoubleDesignator" ):
                listener.exitDoubleDesignator(self)




    def doubleDesignator(self):

        localctx = qasm3Parser.DoubleDesignatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_doubleDesignator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 299
            self.match(qasm3Parser.LBRACKET)
            self.state = 300
            self.expression(0)
            self.state = 301
            self.match(qasm3Parser.COMMA)
            self.state = 302
            self.expression(0)
            self.state = 303
            self.match(qasm3Parser.RBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(qasm3Parser.Identifier)
            else:
                return self.getToken(qasm3Parser.Identifier, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(qasm3Parser.COMMA)
            else:
                return self.getToken(qasm3Parser.COMMA, i)

        def getRuleIndex(self):
            return qasm3Parser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)




    def identifierList(self):

        localctx = qasm3Parser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_identifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 309
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,10,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 305
                    self.match(qasm3Parser.Identifier)
                    self.state = 306
                    self.match(qasm3Parser.COMMA) 
                self.state = 311
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,10,self._ctx)

            self.state = 312
            self.match(qasm3Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QuantumDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(qasm3Parser.Identifier, 0)

        def designator(self):
            return self.getTypedRuleContext(qasm3Parser.DesignatorContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_quantumDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumDeclaration" ):
                listener.enterQuantumDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumDeclaration" ):
                listener.exitQuantumDeclaration(self)




    def quantumDeclaration(self):

        localctx = qasm3Parser.QuantumDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_quantumDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 324
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [qasm3Parser.T__4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 314
                self.match(qasm3Parser.T__4)
                self.state = 315
                self.match(qasm3Parser.Identifier)
                self.state = 317
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==qasm3Parser.LBRACKET:
                    self.state = 316
                    self.designator()


                pass
            elif token in [qasm3Parser.T__5]:
                self.enterOuterAlt(localctx, 2)
                self.state = 319
                self.match(qasm3Parser.T__5)
                self.state = 321
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==qasm3Parser.LBRACKET:
                    self.state = 320
                    self.designator()


                self.state = 323
                self.match(qasm3Parser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QuantumArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(qasm3Parser.Identifier, 0)

        def designator(self):
            return self.getTypedRuleContext(qasm3Parser.DesignatorContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_quantumArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumArgument" ):
                listener.enterQuantumArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumArgument" ):
                listener.exitQuantumArgument(self)




    def quantumArgument(self):

        localctx = qasm3Parser.QuantumArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_quantumArgument)
        self._la = 0 # Token type
        try:
            self.state = 336
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [qasm3Parser.T__4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 326
                self.match(qasm3Parser.T__4)
                self.state = 327
                self.match(qasm3Parser.Identifier)
                self.state = 329
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==qasm3Parser.LBRACKET:
                    self.state = 328
                    self.designator()


                pass
            elif token in [qasm3Parser.T__5]:
                self.enterOuterAlt(localctx, 2)
                self.state = 331
                self.match(qasm3Parser.T__5)
                self.state = 333
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==qasm3Parser.LBRACKET:
                    self.state = 332
                    self.designator()


                self.state = 335
                self.match(qasm3Parser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QuantumArgumentListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quantumArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(qasm3Parser.QuantumArgumentContext)
            else:
                return self.getTypedRuleContext(qasm3Parser.QuantumArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(qasm3Parser.COMMA)
            else:
                return self.getToken(qasm3Parser.COMMA, i)

        def getRuleIndex(self):
            return qasm3Parser.RULE_quantumArgumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumArgumentList" ):
                listener.enterQuantumArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumArgumentList" ):
                listener.exitQuantumArgumentList(self)




    def quantumArgumentList(self):

        localctx = qasm3Parser.QuantumArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_quantumArgumentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 338
            self.quantumArgument()
            self.state = 343
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==qasm3Parser.COMMA:
                self.state = 339
                self.match(qasm3Parser.COMMA)
                self.state = 340
                self.quantumArgument()
                self.state = 345
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BitTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return qasm3Parser.RULE_bitType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitType" ):
                listener.enterBitType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitType" ):
                listener.exitBitType(self)




    def bitType(self):

        localctx = qasm3Parser.BitTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_bitType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 346
            _la = self._input.LA(1)
            if not(_la==qasm3Parser.T__6 or _la==qasm3Parser.T__7):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SingleDesignatorTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return qasm3Parser.RULE_singleDesignatorType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleDesignatorType" ):
                listener.enterSingleDesignatorType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleDesignatorType" ):
                listener.exitSingleDesignatorType(self)




    def singleDesignatorType(self):

        localctx = qasm3Parser.SingleDesignatorTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_singleDesignatorType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 348
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << qasm3Parser.T__8) | (1 << qasm3Parser.T__9) | (1 << qasm3Parser.T__10) | (1 << qasm3Parser.T__11))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DoubleDesignatorTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return qasm3Parser.RULE_doubleDesignatorType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoubleDesignatorType" ):
                listener.enterDoubleDesignatorType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoubleDesignatorType" ):
                listener.exitDoubleDesignatorType(self)




    def doubleDesignatorType(self):

        localctx = qasm3Parser.DoubleDesignatorTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_doubleDesignatorType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 350
            self.match(qasm3Parser.T__12)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NoDesignatorTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def timingType(self):
            return self.getTypedRuleContext(qasm3Parser.TimingTypeContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_noDesignatorType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoDesignatorType" ):
                listener.enterNoDesignatorType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoDesignatorType" ):
                listener.exitNoDesignatorType(self)




    def noDesignatorType(self):

        localctx = qasm3Parser.NoDesignatorTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_noDesignatorType)
        try:
            self.state = 354
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [qasm3Parser.T__13]:
                self.enterOuterAlt(localctx, 1)
                self.state = 352
                self.match(qasm3Parser.T__13)
                pass
            elif token in [qasm3Parser.T__80, qasm3Parser.T__81]:
                self.enterOuterAlt(localctx, 2)
                self.state = 353
                self.timingType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassicalTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleDesignatorType(self):
            return self.getTypedRuleContext(qasm3Parser.SingleDesignatorTypeContext,0)


        def designator(self):
            return self.getTypedRuleContext(qasm3Parser.DesignatorContext,0)


        def doubleDesignatorType(self):
            return self.getTypedRuleContext(qasm3Parser.DoubleDesignatorTypeContext,0)


        def doubleDesignator(self):
            return self.getTypedRuleContext(qasm3Parser.DoubleDesignatorContext,0)


        def noDesignatorType(self):
            return self.getTypedRuleContext(qasm3Parser.NoDesignatorTypeContext,0)


        def bitType(self):
            return self.getTypedRuleContext(qasm3Parser.BitTypeContext,0)


        def LBRACKET(self):
            return self.getToken(qasm3Parser.LBRACKET, 0)

        def numericType(self):
            return self.getTypedRuleContext(qasm3Parser.NumericTypeContext,0)


        def RBRACKET(self):
            return self.getToken(qasm3Parser.RBRACKET, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_classicalType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassicalType" ):
                listener.enterClassicalType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassicalType" ):
                listener.exitClassicalType(self)




    def classicalType(self):

        localctx = qasm3Parser.ClassicalTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_classicalType)
        self._la = 0 # Token type
        try:
            self.state = 372
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [qasm3Parser.T__8, qasm3Parser.T__9, qasm3Parser.T__10, qasm3Parser.T__11]:
                self.enterOuterAlt(localctx, 1)
                self.state = 356
                self.singleDesignatorType()
                self.state = 357
                self.designator()
                pass
            elif token in [qasm3Parser.T__12]:
                self.enterOuterAlt(localctx, 2)
                self.state = 359
                self.doubleDesignatorType()
                self.state = 360
                self.doubleDesignator()
                pass
            elif token in [qasm3Parser.T__13, qasm3Parser.T__80, qasm3Parser.T__81]:
                self.enterOuterAlt(localctx, 3)
                self.state = 362
                self.noDesignatorType()
                pass
            elif token in [qasm3Parser.T__6, qasm3Parser.T__7]:
                self.enterOuterAlt(localctx, 4)
                self.state = 363
                self.bitType()
                self.state = 365
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==qasm3Parser.LBRACKET:
                    self.state = 364
                    self.designator()


                pass
            elif token in [qasm3Parser.T__14]:
                self.enterOuterAlt(localctx, 5)
                self.state = 367
                self.match(qasm3Parser.T__14)
                self.state = 368
                self.match(qasm3Parser.LBRACKET)
                self.state = 369
                self.numericType()
                self.state = 370
                self.match(qasm3Parser.RBRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumericTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleDesignatorType(self):
            return self.getTypedRuleContext(qasm3Parser.SingleDesignatorTypeContext,0)


        def designator(self):
            return self.getTypedRuleContext(qasm3Parser.DesignatorContext,0)


        def doubleDesignatorType(self):
            return self.getTypedRuleContext(qasm3Parser.DoubleDesignatorTypeContext,0)


        def doubleDesignator(self):
            return self.getTypedRuleContext(qasm3Parser.DoubleDesignatorContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_numericType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumericType" ):
                listener.enterNumericType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumericType" ):
                listener.exitNumericType(self)




    def numericType(self):

        localctx = qasm3Parser.NumericTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_numericType)
        try:
            self.state = 380
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [qasm3Parser.T__8, qasm3Parser.T__9, qasm3Parser.T__10, qasm3Parser.T__11]:
                self.enterOuterAlt(localctx, 1)
                self.state = 374
                self.singleDesignatorType()
                self.state = 375
                self.designator()
                pass
            elif token in [qasm3Parser.T__12]:
                self.enterOuterAlt(localctx, 2)
                self.state = 377
                self.doubleDesignatorType()
                self.state = 378
                self.doubleDesignator()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstantDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(qasm3Parser.Identifier, 0)

        def equalsExpression(self):
            return self.getTypedRuleContext(qasm3Parser.EqualsExpressionContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_constantDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantDeclaration" ):
                listener.enterConstantDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantDeclaration" ):
                listener.exitConstantDeclaration(self)




    def constantDeclaration(self):

        localctx = qasm3Parser.ConstantDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_constantDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 382
            self.match(qasm3Parser.T__15)
            self.state = 383
            self.match(qasm3Parser.Identifier)
            self.state = 384
            self.equalsExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SingleDesignatorDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleDesignatorType(self):
            return self.getTypedRuleContext(qasm3Parser.SingleDesignatorTypeContext,0)


        def designator(self):
            return self.getTypedRuleContext(qasm3Parser.DesignatorContext,0)


        def Identifier(self):
            return self.getToken(qasm3Parser.Identifier, 0)

        def equalsExpression(self):
            return self.getTypedRuleContext(qasm3Parser.EqualsExpressionContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_singleDesignatorDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleDesignatorDeclaration" ):
                listener.enterSingleDesignatorDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleDesignatorDeclaration" ):
                listener.exitSingleDesignatorDeclaration(self)




    def singleDesignatorDeclaration(self):

        localctx = qasm3Parser.SingleDesignatorDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_singleDesignatorDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 386
            self.singleDesignatorType()
            self.state = 387
            self.designator()
            self.state = 388
            self.match(qasm3Parser.Identifier)
            self.state = 390
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==qasm3Parser.EQUALS:
                self.state = 389
                self.equalsExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DoubleDesignatorDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def doubleDesignatorType(self):
            return self.getTypedRuleContext(qasm3Parser.DoubleDesignatorTypeContext,0)


        def doubleDesignator(self):
            return self.getTypedRuleContext(qasm3Parser.DoubleDesignatorContext,0)


        def Identifier(self):
            return self.getToken(qasm3Parser.Identifier, 0)

        def equalsExpression(self):
            return self.getTypedRuleContext(qasm3Parser.EqualsExpressionContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_doubleDesignatorDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoubleDesignatorDeclaration" ):
                listener.enterDoubleDesignatorDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoubleDesignatorDeclaration" ):
                listener.exitDoubleDesignatorDeclaration(self)




    def doubleDesignatorDeclaration(self):

        localctx = qasm3Parser.DoubleDesignatorDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_doubleDesignatorDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 392
            self.doubleDesignatorType()
            self.state = 393
            self.doubleDesignator()
            self.state = 394
            self.match(qasm3Parser.Identifier)
            self.state = 396
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==qasm3Parser.EQUALS:
                self.state = 395
                self.equalsExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NoDesignatorDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noDesignatorType(self):
            return self.getTypedRuleContext(qasm3Parser.NoDesignatorTypeContext,0)


        def Identifier(self):
            return self.getToken(qasm3Parser.Identifier, 0)

        def equalsExpression(self):
            return self.getTypedRuleContext(qasm3Parser.EqualsExpressionContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_noDesignatorDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoDesignatorDeclaration" ):
                listener.enterNoDesignatorDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoDesignatorDeclaration" ):
                listener.exitNoDesignatorDeclaration(self)




    def noDesignatorDeclaration(self):

        localctx = qasm3Parser.NoDesignatorDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_noDesignatorDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 398
            self.noDesignatorType()
            self.state = 399
            self.match(qasm3Parser.Identifier)
            self.state = 401
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==qasm3Parser.EQUALS:
                self.state = 400
                self.equalsExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BitDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(qasm3Parser.Identifier, 0)

        def equalsExpression(self):
            return self.getTypedRuleContext(qasm3Parser.EqualsExpressionContext,0)


        def designator(self):
            return self.getTypedRuleContext(qasm3Parser.DesignatorContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_bitDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitDeclaration" ):
                listener.enterBitDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitDeclaration" ):
                listener.exitBitDeclaration(self)




    def bitDeclaration(self):

        localctx = qasm3Parser.BitDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_bitDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 413
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [qasm3Parser.T__7]:
                self.state = 403
                self.match(qasm3Parser.T__7)
                self.state = 404
                self.match(qasm3Parser.Identifier)
                self.state = 406
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==qasm3Parser.LBRACKET:
                    self.state = 405
                    self.designator()


                pass
            elif token in [qasm3Parser.T__6]:
                self.state = 408
                self.match(qasm3Parser.T__6)
                self.state = 410
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==qasm3Parser.LBRACKET:
                    self.state = 409
                    self.designator()


                self.state = 412
                self.match(qasm3Parser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 416
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==qasm3Parser.EQUALS:
                self.state = 415
                self.equalsExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ComplexDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACKET(self):
            return self.getToken(qasm3Parser.LBRACKET, 0)

        def numericType(self):
            return self.getTypedRuleContext(qasm3Parser.NumericTypeContext,0)


        def RBRACKET(self):
            return self.getToken(qasm3Parser.RBRACKET, 0)

        def Identifier(self):
            return self.getToken(qasm3Parser.Identifier, 0)

        def equalsExpression(self):
            return self.getTypedRuleContext(qasm3Parser.EqualsExpressionContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_complexDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplexDeclaration" ):
                listener.enterComplexDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplexDeclaration" ):
                listener.exitComplexDeclaration(self)




    def complexDeclaration(self):

        localctx = qasm3Parser.ComplexDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_complexDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 418
            self.match(qasm3Parser.T__14)
            self.state = 419
            self.match(qasm3Parser.LBRACKET)
            self.state = 420
            self.numericType()
            self.state = 421
            self.match(qasm3Parser.RBRACKET)
            self.state = 422
            self.match(qasm3Parser.Identifier)
            self.state = 424
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==qasm3Parser.EQUALS:
                self.state = 423
                self.equalsExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassicalDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleDesignatorDeclaration(self):
            return self.getTypedRuleContext(qasm3Parser.SingleDesignatorDeclarationContext,0)


        def doubleDesignatorDeclaration(self):
            return self.getTypedRuleContext(qasm3Parser.DoubleDesignatorDeclarationContext,0)


        def noDesignatorDeclaration(self):
            return self.getTypedRuleContext(qasm3Parser.NoDesignatorDeclarationContext,0)


        def bitDeclaration(self):
            return self.getTypedRuleContext(qasm3Parser.BitDeclarationContext,0)


        def complexDeclaration(self):
            return self.getTypedRuleContext(qasm3Parser.ComplexDeclarationContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_classicalDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassicalDeclaration" ):
                listener.enterClassicalDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassicalDeclaration" ):
                listener.exitClassicalDeclaration(self)




    def classicalDeclaration(self):

        localctx = qasm3Parser.ClassicalDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_classicalDeclaration)
        try:
            self.state = 431
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [qasm3Parser.T__8, qasm3Parser.T__9, qasm3Parser.T__10, qasm3Parser.T__11]:
                self.enterOuterAlt(localctx, 1)
                self.state = 426
                self.singleDesignatorDeclaration()
                pass
            elif token in [qasm3Parser.T__12]:
                self.enterOuterAlt(localctx, 2)
                self.state = 427
                self.doubleDesignatorDeclaration()
                pass
            elif token in [qasm3Parser.T__13, qasm3Parser.T__80, qasm3Parser.T__81]:
                self.enterOuterAlt(localctx, 3)
                self.state = 428
                self.noDesignatorDeclaration()
                pass
            elif token in [qasm3Parser.T__6, qasm3Parser.T__7]:
                self.enterOuterAlt(localctx, 4)
                self.state = 429
                self.bitDeclaration()
                pass
            elif token in [qasm3Parser.T__14]:
                self.enterOuterAlt(localctx, 5)
                self.state = 430
                self.complexDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassicalTypeListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classicalType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(qasm3Parser.ClassicalTypeContext)
            else:
                return self.getTypedRuleContext(qasm3Parser.ClassicalTypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(qasm3Parser.COMMA)
            else:
                return self.getToken(qasm3Parser.COMMA, i)

        def getRuleIndex(self):
            return qasm3Parser.RULE_classicalTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassicalTypeList" ):
                listener.enterClassicalTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassicalTypeList" ):
                listener.exitClassicalTypeList(self)




    def classicalTypeList(self):

        localctx = qasm3Parser.ClassicalTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_classicalTypeList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 438
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,31,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 433
                    self.classicalType()
                    self.state = 434
                    self.match(qasm3Parser.COMMA) 
                self.state = 440
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,31,self._ctx)

            self.state = 441
            self.classicalType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassicalArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(qasm3Parser.Identifier, 0)

        def singleDesignatorType(self):
            return self.getTypedRuleContext(qasm3Parser.SingleDesignatorTypeContext,0)


        def designator(self):
            return self.getTypedRuleContext(qasm3Parser.DesignatorContext,0)


        def doubleDesignatorType(self):
            return self.getTypedRuleContext(qasm3Parser.DoubleDesignatorTypeContext,0)


        def doubleDesignator(self):
            return self.getTypedRuleContext(qasm3Parser.DoubleDesignatorContext,0)


        def noDesignatorType(self):
            return self.getTypedRuleContext(qasm3Parser.NoDesignatorTypeContext,0)


        def LBRACKET(self):
            return self.getToken(qasm3Parser.LBRACKET, 0)

        def numericType(self):
            return self.getTypedRuleContext(qasm3Parser.NumericTypeContext,0)


        def RBRACKET(self):
            return self.getToken(qasm3Parser.RBRACKET, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_classicalArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassicalArgument" ):
                listener.enterClassicalArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassicalArgument" ):
                listener.exitClassicalArgument(self)




    def classicalArgument(self):

        localctx = qasm3Parser.ClassicalArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_classicalArgument)
        self._la = 0 # Token type
        try:
            self.state = 470
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [qasm3Parser.T__8, qasm3Parser.T__9, qasm3Parser.T__10, qasm3Parser.T__11, qasm3Parser.T__12, qasm3Parser.T__13, qasm3Parser.T__80, qasm3Parser.T__81]:
                self.enterOuterAlt(localctx, 1)
                self.state = 450
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [qasm3Parser.T__8, qasm3Parser.T__9, qasm3Parser.T__10, qasm3Parser.T__11]:
                    self.state = 443
                    self.singleDesignatorType()
                    self.state = 444
                    self.designator()
                    pass
                elif token in [qasm3Parser.T__12]:
                    self.state = 446
                    self.doubleDesignatorType()
                    self.state = 447
                    self.doubleDesignator()
                    pass
                elif token in [qasm3Parser.T__13, qasm3Parser.T__80, qasm3Parser.T__81]:
                    self.state = 449
                    self.noDesignatorType()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 452
                self.match(qasm3Parser.Identifier)
                pass
            elif token in [qasm3Parser.T__7]:
                self.enterOuterAlt(localctx, 2)
                self.state = 454
                self.match(qasm3Parser.T__7)
                self.state = 455
                self.match(qasm3Parser.Identifier)
                self.state = 457
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==qasm3Parser.LBRACKET:
                    self.state = 456
                    self.designator()


                pass
            elif token in [qasm3Parser.T__6]:
                self.enterOuterAlt(localctx, 3)
                self.state = 459
                self.match(qasm3Parser.T__6)
                self.state = 461
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==qasm3Parser.LBRACKET:
                    self.state = 460
                    self.designator()


                self.state = 463
                self.match(qasm3Parser.Identifier)
                pass
            elif token in [qasm3Parser.T__14]:
                self.enterOuterAlt(localctx, 4)
                self.state = 464
                self.match(qasm3Parser.T__14)
                self.state = 465
                self.match(qasm3Parser.LBRACKET)
                self.state = 466
                self.numericType()
                self.state = 467
                self.match(qasm3Parser.RBRACKET)
                self.state = 468
                self.match(qasm3Parser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassicalArgumentListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classicalArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(qasm3Parser.ClassicalArgumentContext)
            else:
                return self.getTypedRuleContext(qasm3Parser.ClassicalArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(qasm3Parser.COMMA)
            else:
                return self.getToken(qasm3Parser.COMMA, i)

        def getRuleIndex(self):
            return qasm3Parser.RULE_classicalArgumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassicalArgumentList" ):
                listener.enterClassicalArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassicalArgumentList" ):
                listener.exitClassicalArgumentList(self)




    def classicalArgumentList(self):

        localctx = qasm3Parser.ClassicalArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_classicalArgumentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 472
            self.classicalArgument()
            self.state = 477
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==qasm3Parser.COMMA:
                self.state = 473
                self.match(qasm3Parser.COMMA)
                self.state = 474
                self.classicalArgument()
                self.state = 479
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnyTypeArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classicalArgument(self):
            return self.getTypedRuleContext(qasm3Parser.ClassicalArgumentContext,0)


        def quantumArgument(self):
            return self.getTypedRuleContext(qasm3Parser.QuantumArgumentContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_anyTypeArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnyTypeArgument" ):
                listener.enterAnyTypeArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnyTypeArgument" ):
                listener.exitAnyTypeArgument(self)




    def anyTypeArgument(self):

        localctx = qasm3Parser.AnyTypeArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_anyTypeArgument)
        try:
            self.state = 482
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [qasm3Parser.T__6, qasm3Parser.T__7, qasm3Parser.T__8, qasm3Parser.T__9, qasm3Parser.T__10, qasm3Parser.T__11, qasm3Parser.T__12, qasm3Parser.T__13, qasm3Parser.T__14, qasm3Parser.T__80, qasm3Parser.T__81]:
                self.enterOuterAlt(localctx, 1)
                self.state = 480
                self.classicalArgument()
                pass
            elif token in [qasm3Parser.T__4, qasm3Parser.T__5]:
                self.enterOuterAlt(localctx, 2)
                self.state = 481
                self.quantumArgument()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnyTypeArgumentListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def anyTypeArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(qasm3Parser.AnyTypeArgumentContext)
            else:
                return self.getTypedRuleContext(qasm3Parser.AnyTypeArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(qasm3Parser.COMMA)
            else:
                return self.getToken(qasm3Parser.COMMA, i)

        def getRuleIndex(self):
            return qasm3Parser.RULE_anyTypeArgumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnyTypeArgumentList" ):
                listener.enterAnyTypeArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnyTypeArgumentList" ):
                listener.exitAnyTypeArgumentList(self)




    def anyTypeArgumentList(self):

        localctx = qasm3Parser.AnyTypeArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_anyTypeArgumentList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 489
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,38,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 484
                    self.anyTypeArgument()
                    self.state = 485
                    self.match(qasm3Parser.COMMA) 
                self.state = 491
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,38,self._ctx)

            self.state = 492
            self.anyTypeArgument()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AliasStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(qasm3Parser.Identifier, 0)

        def EQUALS(self):
            return self.getToken(qasm3Parser.EQUALS, 0)

        def indexIdentifier(self):
            return self.getTypedRuleContext(qasm3Parser.IndexIdentifierContext,0)


        def SEMICOLON(self):
            return self.getToken(qasm3Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_aliasStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasStatement" ):
                listener.enterAliasStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasStatement" ):
                listener.exitAliasStatement(self)




    def aliasStatement(self):

        localctx = qasm3Parser.AliasStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_aliasStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 494
            self.match(qasm3Parser.T__16)
            self.state = 495
            self.match(qasm3Parser.Identifier)
            self.state = 496
            self.match(qasm3Parser.EQUALS)
            self.state = 497
            self.indexIdentifier(0)
            self.state = 498
            self.match(qasm3Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IndexIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(qasm3Parser.Identifier, 0)

        def rangeDefinition(self):
            return self.getTypedRuleContext(qasm3Parser.RangeDefinitionContext,0)


        def LBRACKET(self):
            return self.getToken(qasm3Parser.LBRACKET, 0)

        def expressionList(self):
            return self.getTypedRuleContext(qasm3Parser.ExpressionListContext,0)


        def RBRACKET(self):
            return self.getToken(qasm3Parser.RBRACKET, 0)

        def indexIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(qasm3Parser.IndexIdentifierContext)
            else:
                return self.getTypedRuleContext(qasm3Parser.IndexIdentifierContext,i)


        def getRuleIndex(self):
            return qasm3Parser.RULE_indexIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexIdentifier" ):
                listener.enterIndexIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexIdentifier" ):
                listener.exitIndexIdentifier(self)



    def indexIdentifier(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = qasm3Parser.IndexIdentifierContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 76
        self.enterRecursionRule(localctx, 76, self.RULE_indexIdentifier, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 510
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.state = 501
                self.match(qasm3Parser.Identifier)
                self.state = 502
                self.rangeDefinition()
                pass

            elif la_ == 2:
                self.state = 503
                self.match(qasm3Parser.Identifier)
                self.state = 508
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
                if la_ == 1:
                    self.state = 504
                    self.match(qasm3Parser.LBRACKET)
                    self.state = 505
                    self.expressionList()
                    self.state = 506
                    self.match(qasm3Parser.RBRACKET)


                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 517
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,41,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = qasm3Parser.IndexIdentifierContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_indexIdentifier)
                    self.state = 512
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 513
                    self.match(qasm3Parser.T__17)
                    self.state = 514
                    self.indexIdentifier(2) 
                self.state = 519
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,41,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class IndexIdentifierListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indexIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(qasm3Parser.IndexIdentifierContext)
            else:
                return self.getTypedRuleContext(qasm3Parser.IndexIdentifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(qasm3Parser.COMMA)
            else:
                return self.getToken(qasm3Parser.COMMA, i)

        def getRuleIndex(self):
            return qasm3Parser.RULE_indexIdentifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexIdentifierList" ):
                listener.enterIndexIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexIdentifierList" ):
                listener.exitIndexIdentifierList(self)




    def indexIdentifierList(self):

        localctx = qasm3Parser.IndexIdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_indexIdentifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 520
            self.indexIdentifier(0)
            self.state = 525
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==qasm3Parser.COMMA:
                self.state = 521
                self.match(qasm3Parser.COMMA)
                self.state = 522
                self.indexIdentifier(0)
                self.state = 527
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RangeDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACKET(self):
            return self.getToken(qasm3Parser.LBRACKET, 0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(qasm3Parser.COLON)
            else:
                return self.getToken(qasm3Parser.COLON, i)

        def RBRACKET(self):
            return self.getToken(qasm3Parser.RBRACKET, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(qasm3Parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(qasm3Parser.ExpressionContext,i)


        def getRuleIndex(self):
            return qasm3Parser.RULE_rangeDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRangeDefinition" ):
                listener.enterRangeDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRangeDefinition" ):
                listener.exitRangeDefinition(self)




    def rangeDefinition(self):

        localctx = qasm3Parser.RangeDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_rangeDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 528
            self.match(qasm3Parser.LBRACKET)
            self.state = 530
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << qasm3Parser.T__6) | (1 << qasm3Parser.T__7) | (1 << qasm3Parser.T__8) | (1 << qasm3Parser.T__9) | (1 << qasm3Parser.T__10) | (1 << qasm3Parser.T__11) | (1 << qasm3Parser.T__12) | (1 << qasm3Parser.T__13) | (1 << qasm3Parser.T__14) | (1 << qasm3Parser.T__30) | (1 << qasm3Parser.T__31) | (1 << qasm3Parser.T__45) | (1 << qasm3Parser.T__46) | (1 << qasm3Parser.T__47) | (1 << qasm3Parser.T__48) | (1 << qasm3Parser.T__49) | (1 << qasm3Parser.T__50) | (1 << qasm3Parser.T__51) | (1 << qasm3Parser.T__52) | (1 << qasm3Parser.T__53) | (1 << qasm3Parser.T__54) | (1 << qasm3Parser.T__55))) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (qasm3Parser.T__80 - 81)) | (1 << (qasm3Parser.T__81 - 81)) | (1 << (qasm3Parser.T__83 - 81)) | (1 << (qasm3Parser.LPAREN - 81)) | (1 << (qasm3Parser.MINUS - 81)) | (1 << (qasm3Parser.ImagNumber - 81)) | (1 << (qasm3Parser.Constant - 81)) | (1 << (qasm3Parser.Integer - 81)) | (1 << (qasm3Parser.Identifier - 81)) | (1 << (qasm3Parser.RealNumber - 81)) | (1 << (qasm3Parser.TimingLiteral - 81)) | (1 << (qasm3Parser.StringLiteral - 81)))) != 0):
                self.state = 529
                self.expression(0)


            self.state = 532
            self.match(qasm3Parser.COLON)
            self.state = 534
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << qasm3Parser.T__6) | (1 << qasm3Parser.T__7) | (1 << qasm3Parser.T__8) | (1 << qasm3Parser.T__9) | (1 << qasm3Parser.T__10) | (1 << qasm3Parser.T__11) | (1 << qasm3Parser.T__12) | (1 << qasm3Parser.T__13) | (1 << qasm3Parser.T__14) | (1 << qasm3Parser.T__30) | (1 << qasm3Parser.T__31) | (1 << qasm3Parser.T__45) | (1 << qasm3Parser.T__46) | (1 << qasm3Parser.T__47) | (1 << qasm3Parser.T__48) | (1 << qasm3Parser.T__49) | (1 << qasm3Parser.T__50) | (1 << qasm3Parser.T__51) | (1 << qasm3Parser.T__52) | (1 << qasm3Parser.T__53) | (1 << qasm3Parser.T__54) | (1 << qasm3Parser.T__55))) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (qasm3Parser.T__80 - 81)) | (1 << (qasm3Parser.T__81 - 81)) | (1 << (qasm3Parser.T__83 - 81)) | (1 << (qasm3Parser.LPAREN - 81)) | (1 << (qasm3Parser.MINUS - 81)) | (1 << (qasm3Parser.ImagNumber - 81)) | (1 << (qasm3Parser.Constant - 81)) | (1 << (qasm3Parser.Integer - 81)) | (1 << (qasm3Parser.Identifier - 81)) | (1 << (qasm3Parser.RealNumber - 81)) | (1 << (qasm3Parser.TimingLiteral - 81)) | (1 << (qasm3Parser.StringLiteral - 81)))) != 0):
                self.state = 533
                self.expression(0)


            self.state = 538
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==qasm3Parser.COLON:
                self.state = 536
                self.match(qasm3Parser.COLON)
                self.state = 537
                self.expression(0)


            self.state = 540
            self.match(qasm3Parser.RBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QuantumGateDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quantumGateSignature(self):
            return self.getTypedRuleContext(qasm3Parser.QuantumGateSignatureContext,0)


        def quantumBlock(self):
            return self.getTypedRuleContext(qasm3Parser.QuantumBlockContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_quantumGateDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumGateDefinition" ):
                listener.enterQuantumGateDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumGateDefinition" ):
                listener.exitQuantumGateDefinition(self)




    def quantumGateDefinition(self):

        localctx = qasm3Parser.QuantumGateDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_quantumGateDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 542
            self.match(qasm3Parser.T__18)
            self.state = 543
            self.quantumGateSignature()
            self.state = 544
            self.quantumBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QuantumGateSignatureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quantumGateName(self):
            return self.getTypedRuleContext(qasm3Parser.QuantumGateNameContext,0)


        def identifierList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(qasm3Parser.IdentifierListContext)
            else:
                return self.getTypedRuleContext(qasm3Parser.IdentifierListContext,i)


        def LPAREN(self):
            return self.getToken(qasm3Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(qasm3Parser.RPAREN, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_quantumGateSignature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumGateSignature" ):
                listener.enterQuantumGateSignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumGateSignature" ):
                listener.exitQuantumGateSignature(self)




    def quantumGateSignature(self):

        localctx = qasm3Parser.QuantumGateSignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_quantumGateSignature)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 546
            self.quantumGateName()
            self.state = 552
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==qasm3Parser.LPAREN:
                self.state = 547
                self.match(qasm3Parser.LPAREN)
                self.state = 549
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==qasm3Parser.Identifier:
                    self.state = 548
                    self.identifierList()


                self.state = 551
                self.match(qasm3Parser.RPAREN)


            self.state = 554
            self.identifierList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QuantumGateNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(qasm3Parser.Identifier, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_quantumGateName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumGateName" ):
                listener.enterQuantumGateName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumGateName" ):
                listener.exitQuantumGateName(self)




    def quantumGateName(self):

        localctx = qasm3Parser.QuantumGateNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_quantumGateName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 556
            _la = self._input.LA(1)
            if not(_la==qasm3Parser.T__19 or _la==qasm3Parser.T__20 or _la==qasm3Parser.Identifier):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QuantumBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(qasm3Parser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(qasm3Parser.RBRACE, 0)

        def quantumStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(qasm3Parser.QuantumStatementContext)
            else:
                return self.getTypedRuleContext(qasm3Parser.QuantumStatementContext,i)


        def quantumLoop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(qasm3Parser.QuantumLoopContext)
            else:
                return self.getTypedRuleContext(qasm3Parser.QuantumLoopContext,i)


        def getRuleIndex(self):
            return qasm3Parser.RULE_quantumBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumBlock" ):
                listener.enterQuantumBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumBlock" ):
                listener.exitQuantumBlock(self)




    def quantumBlock(self):

        localctx = qasm3Parser.QuantumBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_quantumBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 558
            self.match(qasm3Parser.LBRACE)
            self.state = 563
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << qasm3Parser.T__19) | (1 << qasm3Parser.T__20) | (1 << qasm3Parser.T__21) | (1 << qasm3Parser.T__22) | (1 << qasm3Parser.T__23) | (1 << qasm3Parser.T__24) | (1 << qasm3Parser.T__25) | (1 << qasm3Parser.T__27) | (1 << qasm3Parser.T__28) | (1 << qasm3Parser.T__29))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (qasm3Parser.T__70 - 71)) | (1 << (qasm3Parser.T__72 - 71)) | (1 << (qasm3Parser.T__82 - 71)) | (1 << (qasm3Parser.T__84 - 71)) | (1 << (qasm3Parser.T__85 - 71)) | (1 << (qasm3Parser.Identifier - 71)))) != 0):
                self.state = 561
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [qasm3Parser.T__19, qasm3Parser.T__20, qasm3Parser.T__21, qasm3Parser.T__22, qasm3Parser.T__23, qasm3Parser.T__24, qasm3Parser.T__25, qasm3Parser.T__27, qasm3Parser.T__28, qasm3Parser.T__29, qasm3Parser.T__82, qasm3Parser.T__84, qasm3Parser.T__85, qasm3Parser.Identifier]:
                    self.state = 559
                    self.quantumStatement()
                    pass
                elif token in [qasm3Parser.T__70, qasm3Parser.T__72]:
                    self.state = 560
                    self.quantumLoop()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 565
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 566
            self.match(qasm3Parser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QuantumLoopContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def loopSignature(self):
            return self.getTypedRuleContext(qasm3Parser.LoopSignatureContext,0)


        def quantumLoopBlock(self):
            return self.getTypedRuleContext(qasm3Parser.QuantumLoopBlockContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_quantumLoop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumLoop" ):
                listener.enterQuantumLoop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumLoop" ):
                listener.exitQuantumLoop(self)




    def quantumLoop(self):

        localctx = qasm3Parser.QuantumLoopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_quantumLoop)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 568
            self.loopSignature()
            self.state = 569
            self.quantumLoopBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QuantumLoopBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quantumStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(qasm3Parser.QuantumStatementContext)
            else:
                return self.getTypedRuleContext(qasm3Parser.QuantumStatementContext,i)


        def LBRACE(self):
            return self.getToken(qasm3Parser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(qasm3Parser.RBRACE, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_quantumLoopBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumLoopBlock" ):
                listener.enterQuantumLoopBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumLoopBlock" ):
                listener.exitQuantumLoopBlock(self)




    def quantumLoopBlock(self):

        localctx = qasm3Parser.QuantumLoopBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_quantumLoopBlock)
        self._la = 0 # Token type
        try:
            self.state = 580
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [qasm3Parser.T__19, qasm3Parser.T__20, qasm3Parser.T__21, qasm3Parser.T__22, qasm3Parser.T__23, qasm3Parser.T__24, qasm3Parser.T__25, qasm3Parser.T__27, qasm3Parser.T__28, qasm3Parser.T__29, qasm3Parser.T__82, qasm3Parser.T__84, qasm3Parser.T__85, qasm3Parser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 571
                self.quantumStatement()
                pass
            elif token in [qasm3Parser.LBRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 572
                self.match(qasm3Parser.LBRACE)
                self.state = 576
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << qasm3Parser.T__19) | (1 << qasm3Parser.T__20) | (1 << qasm3Parser.T__21) | (1 << qasm3Parser.T__22) | (1 << qasm3Parser.T__23) | (1 << qasm3Parser.T__24) | (1 << qasm3Parser.T__25) | (1 << qasm3Parser.T__27) | (1 << qasm3Parser.T__28) | (1 << qasm3Parser.T__29))) != 0) or ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & ((1 << (qasm3Parser.T__82 - 83)) | (1 << (qasm3Parser.T__84 - 83)) | (1 << (qasm3Parser.T__85 - 83)) | (1 << (qasm3Parser.Identifier - 83)))) != 0):
                    self.state = 573
                    self.quantumStatement()
                    self.state = 578
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 579
                self.match(qasm3Parser.RBRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QuantumStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quantumInstruction(self):
            return self.getTypedRuleContext(qasm3Parser.QuantumInstructionContext,0)


        def SEMICOLON(self):
            return self.getToken(qasm3Parser.SEMICOLON, 0)

        def timingStatement(self):
            return self.getTypedRuleContext(qasm3Parser.TimingStatementContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_quantumStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumStatement" ):
                listener.enterQuantumStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumStatement" ):
                listener.exitQuantumStatement(self)




    def quantumStatement(self):

        localctx = qasm3Parser.QuantumStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_quantumStatement)
        try:
            self.state = 586
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [qasm3Parser.T__19, qasm3Parser.T__20, qasm3Parser.T__21, qasm3Parser.T__22, qasm3Parser.T__23, qasm3Parser.T__24, qasm3Parser.T__25, qasm3Parser.T__27, qasm3Parser.T__28, qasm3Parser.T__29, qasm3Parser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 582
                self.quantumInstruction()
                self.state = 583
                self.match(qasm3Parser.SEMICOLON)
                pass
            elif token in [qasm3Parser.T__82, qasm3Parser.T__84, qasm3Parser.T__85]:
                self.enterOuterAlt(localctx, 2)
                self.state = 585
                self.timingStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QuantumInstructionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quantumGateCall(self):
            return self.getTypedRuleContext(qasm3Parser.QuantumGateCallContext,0)


        def quantumPhase(self):
            return self.getTypedRuleContext(qasm3Parser.QuantumPhaseContext,0)


        def quantumMeasurement(self):
            return self.getTypedRuleContext(qasm3Parser.QuantumMeasurementContext,0)


        def quantumReset(self):
            return self.getTypedRuleContext(qasm3Parser.QuantumResetContext,0)


        def quantumBarrier(self):
            return self.getTypedRuleContext(qasm3Parser.QuantumBarrierContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_quantumInstruction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumInstruction" ):
                listener.enterQuantumInstruction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumInstruction" ):
                listener.exitQuantumInstruction(self)




    def quantumInstruction(self):

        localctx = qasm3Parser.QuantumInstructionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_quantumInstruction)
        try:
            self.state = 593
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 588
                self.quantumGateCall()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 589
                self.quantumPhase()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 590
                self.quantumMeasurement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 591
                self.quantumReset()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 592
                self.quantumBarrier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QuantumPhaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(qasm3Parser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(qasm3Parser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(qasm3Parser.RPAREN, 0)

        def quantumGateModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(qasm3Parser.QuantumGateModifierContext)
            else:
                return self.getTypedRuleContext(qasm3Parser.QuantumGateModifierContext,i)


        def indexIdentifierList(self):
            return self.getTypedRuleContext(qasm3Parser.IndexIdentifierListContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_quantumPhase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumPhase" ):
                listener.enterQuantumPhase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumPhase" ):
                listener.exitQuantumPhase(self)




    def quantumPhase(self):

        localctx = qasm3Parser.QuantumPhaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_quantumPhase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 598
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << qasm3Parser.T__25) | (1 << qasm3Parser.T__27) | (1 << qasm3Parser.T__28) | (1 << qasm3Parser.T__29))) != 0):
                self.state = 595
                self.quantumGateModifier()
                self.state = 600
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 601
            self.match(qasm3Parser.T__21)
            self.state = 602
            self.match(qasm3Parser.LPAREN)
            self.state = 603
            self.expression(0)
            self.state = 604
            self.match(qasm3Parser.RPAREN)
            self.state = 606
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==qasm3Parser.Identifier:
                self.state = 605
                self.indexIdentifierList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QuantumResetContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indexIdentifierList(self):
            return self.getTypedRuleContext(qasm3Parser.IndexIdentifierListContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_quantumReset

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumReset" ):
                listener.enterQuantumReset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumReset" ):
                listener.exitQuantumReset(self)




    def quantumReset(self):

        localctx = qasm3Parser.QuantumResetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_quantumReset)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 608
            self.match(qasm3Parser.T__22)
            self.state = 609
            self.indexIdentifierList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QuantumMeasurementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indexIdentifierList(self):
            return self.getTypedRuleContext(qasm3Parser.IndexIdentifierListContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_quantumMeasurement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumMeasurement" ):
                listener.enterQuantumMeasurement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumMeasurement" ):
                listener.exitQuantumMeasurement(self)




    def quantumMeasurement(self):

        localctx = qasm3Parser.QuantumMeasurementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_quantumMeasurement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 611
            self.match(qasm3Parser.T__23)
            self.state = 612
            self.indexIdentifierList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QuantumMeasurementAssignmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quantumMeasurement(self):
            return self.getTypedRuleContext(qasm3Parser.QuantumMeasurementContext,0)


        def ARROW(self):
            return self.getToken(qasm3Parser.ARROW, 0)

        def indexIdentifierList(self):
            return self.getTypedRuleContext(qasm3Parser.IndexIdentifierListContext,0)


        def EQUALS(self):
            return self.getToken(qasm3Parser.EQUALS, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_quantumMeasurementAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumMeasurementAssignment" ):
                listener.enterQuantumMeasurementAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumMeasurementAssignment" ):
                listener.exitQuantumMeasurementAssignment(self)




    def quantumMeasurementAssignment(self):

        localctx = qasm3Parser.QuantumMeasurementAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_quantumMeasurementAssignment)
        self._la = 0 # Token type
        try:
            self.state = 623
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [qasm3Parser.T__23]:
                self.enterOuterAlt(localctx, 1)
                self.state = 614
                self.quantumMeasurement()
                self.state = 617
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==qasm3Parser.ARROW:
                    self.state = 615
                    self.match(qasm3Parser.ARROW)
                    self.state = 616
                    self.indexIdentifierList()


                pass
            elif token in [qasm3Parser.Identifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 619
                self.indexIdentifierList()
                self.state = 620
                self.match(qasm3Parser.EQUALS)
                self.state = 621
                self.quantumMeasurement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QuantumBarrierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indexIdentifierList(self):
            return self.getTypedRuleContext(qasm3Parser.IndexIdentifierListContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_quantumBarrier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumBarrier" ):
                listener.enterQuantumBarrier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumBarrier" ):
                listener.exitQuantumBarrier(self)




    def quantumBarrier(self):

        localctx = qasm3Parser.QuantumBarrierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_quantumBarrier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 625
            self.match(qasm3Parser.T__24)
            self.state = 627
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==qasm3Parser.Identifier:
                self.state = 626
                self.indexIdentifierList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QuantumGateModifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def powModifier(self):
            return self.getTypedRuleContext(qasm3Parser.PowModifierContext,0)


        def ctrlModifier(self):
            return self.getTypedRuleContext(qasm3Parser.CtrlModifierContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_quantumGateModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumGateModifier" ):
                listener.enterQuantumGateModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumGateModifier" ):
                listener.exitQuantumGateModifier(self)




    def quantumGateModifier(self):

        localctx = qasm3Parser.QuantumGateModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_quantumGateModifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 632
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [qasm3Parser.T__25]:
                self.state = 629
                self.match(qasm3Parser.T__25)
                pass
            elif token in [qasm3Parser.T__27]:
                self.state = 630
                self.powModifier()
                pass
            elif token in [qasm3Parser.T__28, qasm3Parser.T__29]:
                self.state = 631
                self.ctrlModifier()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 634
            self.match(qasm3Parser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PowModifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(qasm3Parser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(qasm3Parser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(qasm3Parser.RPAREN, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_powModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPowModifier" ):
                listener.enterPowModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPowModifier" ):
                listener.exitPowModifier(self)




    def powModifier(self):

        localctx = qasm3Parser.PowModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_powModifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 636
            self.match(qasm3Parser.T__27)
            self.state = 637
            self.match(qasm3Parser.LPAREN)
            self.state = 638
            self.expression(0)
            self.state = 639
            self.match(qasm3Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CtrlModifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(qasm3Parser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(qasm3Parser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(qasm3Parser.RPAREN, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_ctrlModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCtrlModifier" ):
                listener.enterCtrlModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCtrlModifier" ):
                listener.exitCtrlModifier(self)




    def ctrlModifier(self):

        localctx = qasm3Parser.CtrlModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_ctrlModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 641
            _la = self._input.LA(1)
            if not(_la==qasm3Parser.T__28 or _la==qasm3Parser.T__29):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 646
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==qasm3Parser.LPAREN:
                self.state = 642
                self.match(qasm3Parser.LPAREN)
                self.state = 643
                self.expression(0)
                self.state = 644
                self.match(qasm3Parser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QuantumGateCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quantumGateName(self):
            return self.getTypedRuleContext(qasm3Parser.QuantumGateNameContext,0)


        def indexIdentifierList(self):
            return self.getTypedRuleContext(qasm3Parser.IndexIdentifierListContext,0)


        def quantumGateModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(qasm3Parser.QuantumGateModifierContext)
            else:
                return self.getTypedRuleContext(qasm3Parser.QuantumGateModifierContext,i)


        def LPAREN(self):
            return self.getToken(qasm3Parser.LPAREN, 0)

        def expressionList(self):
            return self.getTypedRuleContext(qasm3Parser.ExpressionListContext,0)


        def RPAREN(self):
            return self.getToken(qasm3Parser.RPAREN, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_quantumGateCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumGateCall" ):
                listener.enterQuantumGateCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumGateCall" ):
                listener.exitQuantumGateCall(self)




    def quantumGateCall(self):

        localctx = qasm3Parser.QuantumGateCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_quantumGateCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 651
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << qasm3Parser.T__25) | (1 << qasm3Parser.T__27) | (1 << qasm3Parser.T__28) | (1 << qasm3Parser.T__29))) != 0):
                self.state = 648
                self.quantumGateModifier()
                self.state = 653
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 654
            self.quantumGateName()
            self.state = 659
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==qasm3Parser.LPAREN:
                self.state = 655
                self.match(qasm3Parser.LPAREN)
                self.state = 656
                self.expressionList()
                self.state = 657
                self.match(qasm3Parser.RPAREN)


            self.state = 661
            self.indexIdentifierList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnaryOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS(self):
            return self.getToken(qasm3Parser.MINUS, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_unaryOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryOperator" ):
                listener.enterUnaryOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryOperator" ):
                listener.exitUnaryOperator(self)




    def unaryOperator(self):

        localctx = qasm3Parser.UnaryOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_unaryOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 663
            _la = self._input.LA(1)
            if not(_la==qasm3Parser.T__30 or _la==qasm3Parser.T__31 or _la==qasm3Parser.MINUS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ComparisonOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return qasm3Parser.RULE_comparisonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonOperator" ):
                listener.enterComparisonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonOperator" ):
                listener.exitComparisonOperator(self)




    def comparisonOperator(self):

        localctx = qasm3Parser.ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_comparisonOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 665
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << qasm3Parser.T__32) | (1 << qasm3Parser.T__33) | (1 << qasm3Parser.T__34) | (1 << qasm3Parser.T__35))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EqualityOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return qasm3Parser.RULE_equalityOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityOperator" ):
                listener.enterEqualityOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityOperator" ):
                listener.exitEqualityOperator(self)




    def equalityOperator(self):

        localctx = qasm3Parser.EqualityOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_equalityOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 667
            _la = self._input.LA(1)
            if not(_la==qasm3Parser.T__36 or _la==qasm3Parser.T__37):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LogicalOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return qasm3Parser.RULE_logicalOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalOperator" ):
                listener.enterLogicalOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalOperator" ):
                listener.exitLogicalOperator(self)




    def logicalOperator(self):

        localctx = qasm3Parser.LogicalOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_logicalOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 669
            _la = self._input.LA(1)
            if not(_la==qasm3Parser.T__17 or _la==qasm3Parser.T__38):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(qasm3Parser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(qasm3Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)




    def expressionStatement(self):

        localctx = qasm3Parser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_expressionStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 671
            self.expression(0)
            self.state = 672
            self.match(qasm3Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionTerminator(self):
            return self.getTypedRuleContext(qasm3Parser.ExpressionTerminatorContext,0)


        def unaryExpression(self):
            return self.getTypedRuleContext(qasm3Parser.UnaryExpressionContext,0)


        def logicalAndExpression(self):
            return self.getTypedRuleContext(qasm3Parser.LogicalAndExpressionContext,0)


        def expression(self):
            return self.getTypedRuleContext(qasm3Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = qasm3Parser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 126
        self.enterRecursionRule(localctx, 126, self.RULE_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 678
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.state = 675
                self.expressionTerminator(0)
                pass

            elif la_ == 2:
                self.state = 676
                self.unaryExpression()
                pass

            elif la_ == 3:
                self.state = 677
                self.logicalAndExpression(0)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 685
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,64,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = qasm3Parser.ExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                    self.state = 680
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 681
                    self.match(qasm3Parser.T__17)
                    self.state = 682
                    self.logicalAndExpression(0) 
                self.state = 687
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,64,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class LogicalAndExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitOrExpression(self):
            return self.getTypedRuleContext(qasm3Parser.BitOrExpressionContext,0)


        def logicalAndExpression(self):
            return self.getTypedRuleContext(qasm3Parser.LogicalAndExpressionContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_logicalAndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalAndExpression" ):
                listener.enterLogicalAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalAndExpression" ):
                listener.exitLogicalAndExpression(self)



    def logicalAndExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = qasm3Parser.LogicalAndExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 128
        self.enterRecursionRule(localctx, 128, self.RULE_logicalAndExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 689
            self.bitOrExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 696
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,65,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = qasm3Parser.LogicalAndExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_logicalAndExpression)
                    self.state = 691
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 692
                    self.match(qasm3Parser.T__38)
                    self.state = 693
                    self.bitOrExpression(0) 
                self.state = 698
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,65,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class BitOrExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xOrExpression(self):
            return self.getTypedRuleContext(qasm3Parser.XOrExpressionContext,0)


        def bitOrExpression(self):
            return self.getTypedRuleContext(qasm3Parser.BitOrExpressionContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_bitOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitOrExpression" ):
                listener.enterBitOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitOrExpression" ):
                listener.exitBitOrExpression(self)



    def bitOrExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = qasm3Parser.BitOrExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 130
        self.enterRecursionRule(localctx, 130, self.RULE_bitOrExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 700
            self.xOrExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 707
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,66,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = qasm3Parser.BitOrExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_bitOrExpression)
                    self.state = 702
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 703
                    self.match(qasm3Parser.T__39)
                    self.state = 704
                    self.xOrExpression(0) 
                self.state = 709
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,66,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class XOrExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitAndExpression(self):
            return self.getTypedRuleContext(qasm3Parser.BitAndExpressionContext,0)


        def xOrExpression(self):
            return self.getTypedRuleContext(qasm3Parser.XOrExpressionContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_xOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXOrExpression" ):
                listener.enterXOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXOrExpression" ):
                listener.exitXOrExpression(self)



    def xOrExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = qasm3Parser.XOrExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 132
        self.enterRecursionRule(localctx, 132, self.RULE_xOrExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 711
            self.bitAndExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 718
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,67,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = qasm3Parser.XOrExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_xOrExpression)
                    self.state = 713
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 714
                    self.match(qasm3Parser.T__40)
                    self.state = 715
                    self.bitAndExpression(0) 
                self.state = 720
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,67,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class BitAndExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equalityExpression(self):
            return self.getTypedRuleContext(qasm3Parser.EqualityExpressionContext,0)


        def bitAndExpression(self):
            return self.getTypedRuleContext(qasm3Parser.BitAndExpressionContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_bitAndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitAndExpression" ):
                listener.enterBitAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitAndExpression" ):
                listener.exitBitAndExpression(self)



    def bitAndExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = qasm3Parser.BitAndExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 134
        self.enterRecursionRule(localctx, 134, self.RULE_bitAndExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 722
            self.equalityExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 729
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,68,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = qasm3Parser.BitAndExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_bitAndExpression)
                    self.state = 724
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 725
                    self.match(qasm3Parser.T__41)
                    self.state = 726
                    self.equalityExpression(0) 
                self.state = 731
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,68,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class EqualityExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comparisonExpression(self):
            return self.getTypedRuleContext(qasm3Parser.ComparisonExpressionContext,0)


        def equalityExpression(self):
            return self.getTypedRuleContext(qasm3Parser.EqualityExpressionContext,0)


        def equalityOperator(self):
            return self.getTypedRuleContext(qasm3Parser.EqualityOperatorContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_equalityExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityExpression" ):
                listener.enterEqualityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityExpression" ):
                listener.exitEqualityExpression(self)



    def equalityExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = qasm3Parser.EqualityExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 136
        self.enterRecursionRule(localctx, 136, self.RULE_equalityExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 733
            self.comparisonExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 741
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,69,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = qasm3Parser.EqualityExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_equalityExpression)
                    self.state = 735
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 736
                    self.equalityOperator()
                    self.state = 737
                    self.comparisonExpression(0) 
                self.state = 743
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,69,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ComparisonExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitShiftExpression(self):
            return self.getTypedRuleContext(qasm3Parser.BitShiftExpressionContext,0)


        def comparisonExpression(self):
            return self.getTypedRuleContext(qasm3Parser.ComparisonExpressionContext,0)


        def comparisonOperator(self):
            return self.getTypedRuleContext(qasm3Parser.ComparisonOperatorContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_comparisonExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonExpression" ):
                listener.enterComparisonExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonExpression" ):
                listener.exitComparisonExpression(self)



    def comparisonExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = qasm3Parser.ComparisonExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 138
        self.enterRecursionRule(localctx, 138, self.RULE_comparisonExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 745
            self.bitShiftExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 753
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,70,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = qasm3Parser.ComparisonExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_comparisonExpression)
                    self.state = 747
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 748
                    self.comparisonOperator()
                    self.state = 749
                    self.bitShiftExpression(0) 
                self.state = 755
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,70,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class BitShiftExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additiveExpression(self):
            return self.getTypedRuleContext(qasm3Parser.AdditiveExpressionContext,0)


        def bitShiftExpression(self):
            return self.getTypedRuleContext(qasm3Parser.BitShiftExpressionContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_bitShiftExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitShiftExpression" ):
                listener.enterBitShiftExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitShiftExpression" ):
                listener.exitBitShiftExpression(self)



    def bitShiftExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = qasm3Parser.BitShiftExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 140
        self.enterRecursionRule(localctx, 140, self.RULE_bitShiftExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 757
            self.additiveExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 764
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,71,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = qasm3Parser.BitShiftExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_bitShiftExpression)
                    self.state = 759
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 760
                    _la = self._input.LA(1)
                    if not(_la==qasm3Parser.T__42 or _la==qasm3Parser.T__43):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 761
                    self.additiveExpression(0) 
                self.state = 766
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,71,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AdditiveExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicativeExpression(self):
            return self.getTypedRuleContext(qasm3Parser.MultiplicativeExpressionContext,0)


        def additiveExpression(self):
            return self.getTypedRuleContext(qasm3Parser.AdditiveExpressionContext,0)


        def PLUS(self):
            return self.getToken(qasm3Parser.PLUS, 0)

        def MINUS(self):
            return self.getToken(qasm3Parser.MINUS, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_additiveExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveExpression" ):
                listener.enterAdditiveExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveExpression" ):
                listener.exitAdditiveExpression(self)



    def additiveExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = qasm3Parser.AdditiveExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 142
        self.enterRecursionRule(localctx, 142, self.RULE_additiveExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 768
            self.multiplicativeExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 775
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,72,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = qasm3Parser.AdditiveExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_additiveExpression)
                    self.state = 770
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 771
                    _la = self._input.LA(1)
                    if not(_la==qasm3Parser.PLUS or _la==qasm3Parser.MINUS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 772
                    self.multiplicativeExpression(0) 
                self.state = 777
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,72,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class MultiplicativeExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def powerExpression(self):
            return self.getTypedRuleContext(qasm3Parser.PowerExpressionContext,0)


        def unaryExpression(self):
            return self.getTypedRuleContext(qasm3Parser.UnaryExpressionContext,0)


        def multiplicativeExpression(self):
            return self.getTypedRuleContext(qasm3Parser.MultiplicativeExpressionContext,0)


        def MUL(self):
            return self.getToken(qasm3Parser.MUL, 0)

        def DIV(self):
            return self.getToken(qasm3Parser.DIV, 0)

        def MOD(self):
            return self.getToken(qasm3Parser.MOD, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_multiplicativeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeExpression" ):
                listener.enterMultiplicativeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeExpression" ):
                listener.exitMultiplicativeExpression(self)



    def multiplicativeExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = qasm3Parser.MultiplicativeExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 144
        self.enterRecursionRule(localctx, 144, self.RULE_multiplicativeExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 781
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [qasm3Parser.T__6, qasm3Parser.T__7, qasm3Parser.T__8, qasm3Parser.T__9, qasm3Parser.T__10, qasm3Parser.T__11, qasm3Parser.T__12, qasm3Parser.T__13, qasm3Parser.T__14, qasm3Parser.T__45, qasm3Parser.T__46, qasm3Parser.T__47, qasm3Parser.T__48, qasm3Parser.T__49, qasm3Parser.T__50, qasm3Parser.T__51, qasm3Parser.T__52, qasm3Parser.T__53, qasm3Parser.T__54, qasm3Parser.T__55, qasm3Parser.T__80, qasm3Parser.T__81, qasm3Parser.T__83, qasm3Parser.LPAREN, qasm3Parser.ImagNumber, qasm3Parser.Constant, qasm3Parser.Integer, qasm3Parser.Identifier, qasm3Parser.RealNumber, qasm3Parser.TimingLiteral, qasm3Parser.StringLiteral]:
                self.state = 779
                self.powerExpression()
                pass
            elif token in [qasm3Parser.T__30, qasm3Parser.T__31, qasm3Parser.MINUS]:
                self.state = 780
                self.unaryExpression()
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 791
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,75,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = qasm3Parser.MultiplicativeExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicativeExpression)
                    self.state = 783
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 784
                    _la = self._input.LA(1)
                    if not(((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (qasm3Parser.MUL - 104)) | (1 << (qasm3Parser.DIV - 104)) | (1 << (qasm3Parser.MOD - 104)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 787
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [qasm3Parser.T__6, qasm3Parser.T__7, qasm3Parser.T__8, qasm3Parser.T__9, qasm3Parser.T__10, qasm3Parser.T__11, qasm3Parser.T__12, qasm3Parser.T__13, qasm3Parser.T__14, qasm3Parser.T__45, qasm3Parser.T__46, qasm3Parser.T__47, qasm3Parser.T__48, qasm3Parser.T__49, qasm3Parser.T__50, qasm3Parser.T__51, qasm3Parser.T__52, qasm3Parser.T__53, qasm3Parser.T__54, qasm3Parser.T__55, qasm3Parser.T__80, qasm3Parser.T__81, qasm3Parser.T__83, qasm3Parser.LPAREN, qasm3Parser.ImagNumber, qasm3Parser.Constant, qasm3Parser.Integer, qasm3Parser.Identifier, qasm3Parser.RealNumber, qasm3Parser.TimingLiteral, qasm3Parser.StringLiteral]:
                        self.state = 785
                        self.powerExpression()
                        pass
                    elif token in [qasm3Parser.T__30, qasm3Parser.T__31, qasm3Parser.MINUS]:
                        self.state = 786
                        self.unaryExpression()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 793
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,75,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class UnaryExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unaryOperator(self):
            return self.getTypedRuleContext(qasm3Parser.UnaryOperatorContext,0)


        def powerExpression(self):
            return self.getTypedRuleContext(qasm3Parser.PowerExpressionContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_unaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryExpression" ):
                listener.enterUnaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryExpression" ):
                listener.exitUnaryExpression(self)




    def unaryExpression(self):

        localctx = qasm3Parser.UnaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_unaryExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 794
            self.unaryOperator()
            self.state = 795
            self.powerExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PowerExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionTerminator(self):
            return self.getTypedRuleContext(qasm3Parser.ExpressionTerminatorContext,0)


        def powerExpression(self):
            return self.getTypedRuleContext(qasm3Parser.PowerExpressionContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_powerExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPowerExpression" ):
                listener.enterPowerExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPowerExpression" ):
                listener.exitPowerExpression(self)




    def powerExpression(self):

        localctx = qasm3Parser.PowerExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_powerExpression)
        try:
            self.state = 802
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 797
                self.expressionTerminator(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 798
                self.expressionTerminator(0)
                self.state = 799
                self.match(qasm3Parser.T__44)
                self.state = 800
                self.powerExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionTerminatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Constant(self):
            return self.getToken(qasm3Parser.Constant, 0)

        def Integer(self):
            return self.getToken(qasm3Parser.Integer, 0)

        def RealNumber(self):
            return self.getToken(qasm3Parser.RealNumber, 0)

        def ImagNumber(self):
            return self.getToken(qasm3Parser.ImagNumber, 0)

        def booleanLiteral(self):
            return self.getTypedRuleContext(qasm3Parser.BooleanLiteralContext,0)


        def Identifier(self):
            return self.getToken(qasm3Parser.Identifier, 0)

        def StringLiteral(self):
            return self.getToken(qasm3Parser.StringLiteral, 0)

        def builtInCall(self):
            return self.getTypedRuleContext(qasm3Parser.BuiltInCallContext,0)


        def externOrSubroutineCall(self):
            return self.getTypedRuleContext(qasm3Parser.ExternOrSubroutineCallContext,0)


        def timingIdentifier(self):
            return self.getTypedRuleContext(qasm3Parser.TimingIdentifierContext,0)


        def LPAREN(self):
            return self.getToken(qasm3Parser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(qasm3Parser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(qasm3Parser.RPAREN, 0)

        def expressionTerminator(self):
            return self.getTypedRuleContext(qasm3Parser.ExpressionTerminatorContext,0)


        def LBRACKET(self):
            return self.getToken(qasm3Parser.LBRACKET, 0)

        def RBRACKET(self):
            return self.getToken(qasm3Parser.RBRACKET, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_expressionTerminator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionTerminator" ):
                listener.enterExpressionTerminator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionTerminator" ):
                listener.exitExpressionTerminator(self)



    def expressionTerminator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = qasm3Parser.ExpressionTerminatorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 150
        self.enterRecursionRule(localctx, 150, self.RULE_expressionTerminator, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 819
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.state = 805
                self.match(qasm3Parser.Constant)
                pass

            elif la_ == 2:
                self.state = 806
                self.match(qasm3Parser.Integer)
                pass

            elif la_ == 3:
                self.state = 807
                self.match(qasm3Parser.RealNumber)
                pass

            elif la_ == 4:
                self.state = 808
                self.match(qasm3Parser.ImagNumber)
                pass

            elif la_ == 5:
                self.state = 809
                self.booleanLiteral()
                pass

            elif la_ == 6:
                self.state = 810
                self.match(qasm3Parser.Identifier)
                pass

            elif la_ == 7:
                self.state = 811
                self.match(qasm3Parser.StringLiteral)
                pass

            elif la_ == 8:
                self.state = 812
                self.builtInCall()
                pass

            elif la_ == 9:
                self.state = 813
                self.externOrSubroutineCall()
                pass

            elif la_ == 10:
                self.state = 814
                self.timingIdentifier()
                pass

            elif la_ == 11:
                self.state = 815
                self.match(qasm3Parser.LPAREN)
                self.state = 816
                self.expression(0)
                self.state = 817
                self.match(qasm3Parser.RPAREN)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 828
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,78,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = qasm3Parser.ExpressionTerminatorContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionTerminator)
                    self.state = 821
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 822
                    self.match(qasm3Parser.LBRACKET)
                    self.state = 823
                    self.expression(0)
                    self.state = 824
                    self.match(qasm3Parser.RBRACKET) 
                self.state = 830
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,78,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class BooleanLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return qasm3Parser.RULE_booleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)




    def booleanLiteral(self):

        localctx = qasm3Parser.BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_booleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 831
            _la = self._input.LA(1)
            if not(_la==qasm3Parser.T__45 or _la==qasm3Parser.T__46):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BuiltInCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(qasm3Parser.LPAREN, 0)

        def expressionList(self):
            return self.getTypedRuleContext(qasm3Parser.ExpressionListContext,0)


        def RPAREN(self):
            return self.getToken(qasm3Parser.RPAREN, 0)

        def builtInMath(self):
            return self.getTypedRuleContext(qasm3Parser.BuiltInMathContext,0)


        def castOperator(self):
            return self.getTypedRuleContext(qasm3Parser.CastOperatorContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_builtInCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuiltInCall" ):
                listener.enterBuiltInCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuiltInCall" ):
                listener.exitBuiltInCall(self)




    def builtInCall(self):

        localctx = qasm3Parser.BuiltInCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_builtInCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 835
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [qasm3Parser.T__47, qasm3Parser.T__48, qasm3Parser.T__49, qasm3Parser.T__50, qasm3Parser.T__51, qasm3Parser.T__52, qasm3Parser.T__53, qasm3Parser.T__54, qasm3Parser.T__55]:
                self.state = 833
                self.builtInMath()
                pass
            elif token in [qasm3Parser.T__6, qasm3Parser.T__7, qasm3Parser.T__8, qasm3Parser.T__9, qasm3Parser.T__10, qasm3Parser.T__11, qasm3Parser.T__12, qasm3Parser.T__13, qasm3Parser.T__14, qasm3Parser.T__80, qasm3Parser.T__81]:
                self.state = 834
                self.castOperator()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 837
            self.match(qasm3Parser.LPAREN)
            self.state = 838
            self.expressionList()
            self.state = 839
            self.match(qasm3Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BuiltInMathContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return qasm3Parser.RULE_builtInMath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuiltInMath" ):
                listener.enterBuiltInMath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuiltInMath" ):
                listener.exitBuiltInMath(self)




    def builtInMath(self):

        localctx = qasm3Parser.BuiltInMathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_builtInMath)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 841
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << qasm3Parser.T__47) | (1 << qasm3Parser.T__48) | (1 << qasm3Parser.T__49) | (1 << qasm3Parser.T__50) | (1 << qasm3Parser.T__51) | (1 << qasm3Parser.T__52) | (1 << qasm3Parser.T__53) | (1 << qasm3Parser.T__54) | (1 << qasm3Parser.T__55))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CastOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classicalType(self):
            return self.getTypedRuleContext(qasm3Parser.ClassicalTypeContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_castOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastOperator" ):
                listener.enterCastOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastOperator" ):
                listener.exitCastOperator(self)




    def castOperator(self):

        localctx = qasm3Parser.CastOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_castOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 843
            self.classicalType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(qasm3Parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(qasm3Parser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(qasm3Parser.COMMA)
            else:
                return self.getToken(qasm3Parser.COMMA, i)

        def getRuleIndex(self):
            return qasm3Parser.RULE_expressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionList" ):
                listener.enterExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionList" ):
                listener.exitExpressionList(self)




    def expressionList(self):

        localctx = qasm3Parser.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_expressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 845
            self.expression(0)
            self.state = 850
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==qasm3Parser.COMMA:
                self.state = 846
                self.match(qasm3Parser.COMMA)
                self.state = 847
                self.expression(0)
                self.state = 852
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EqualsExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUALS(self):
            return self.getToken(qasm3Parser.EQUALS, 0)

        def expression(self):
            return self.getTypedRuleContext(qasm3Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_equalsExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualsExpression" ):
                listener.enterEqualsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualsExpression" ):
                listener.exitEqualsExpression(self)




    def equalsExpression(self):

        localctx = qasm3Parser.EqualsExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_equalsExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 853
            self.match(qasm3Parser.EQUALS)
            self.state = 854
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUALS(self):
            return self.getToken(qasm3Parser.EQUALS, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_assignmentOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentOperator" ):
                listener.enterAssignmentOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentOperator" ):
                listener.exitAssignmentOperator(self)




    def assignmentOperator(self):

        localctx = qasm3Parser.AssignmentOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_assignmentOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 856
            _la = self._input.LA(1)
            if not(((((_la - 57)) & ~0x3f) == 0 and ((1 << (_la - 57)) & ((1 << (qasm3Parser.T__56 - 57)) | (1 << (qasm3Parser.T__57 - 57)) | (1 << (qasm3Parser.T__58 - 57)) | (1 << (qasm3Parser.T__59 - 57)) | (1 << (qasm3Parser.T__60 - 57)) | (1 << (qasm3Parser.T__61 - 57)) | (1 << (qasm3Parser.T__62 - 57)) | (1 << (qasm3Parser.T__63 - 57)) | (1 << (qasm3Parser.T__64 - 57)) | (1 << (qasm3Parser.T__65 - 57)) | (1 << (qasm3Parser.T__66 - 57)) | (1 << (qasm3Parser.T__67 - 57)) | (1 << (qasm3Parser.EQUALS - 57)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(qasm3Parser.LBRACE, 0)

        def expressionList(self):
            return self.getTypedRuleContext(qasm3Parser.ExpressionListContext,0)


        def RBRACE(self):
            return self.getToken(qasm3Parser.RBRACE, 0)

        def rangeDefinition(self):
            return self.getTypedRuleContext(qasm3Parser.RangeDefinitionContext,0)


        def Identifier(self):
            return self.getToken(qasm3Parser.Identifier, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_setDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetDeclaration" ):
                listener.enterSetDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetDeclaration" ):
                listener.exitSetDeclaration(self)




    def setDeclaration(self):

        localctx = qasm3Parser.SetDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_setDeclaration)
        try:
            self.state = 864
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [qasm3Parser.LBRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 858
                self.match(qasm3Parser.LBRACE)
                self.state = 859
                self.expressionList()
                self.state = 860
                self.match(qasm3Parser.RBRACE)
                pass
            elif token in [qasm3Parser.LBRACKET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 862
                self.rangeDefinition()
                pass
            elif token in [qasm3Parser.Identifier]:
                self.enterOuterAlt(localctx, 3)
                self.state = 863
                self.match(qasm3Parser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProgramBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(qasm3Parser.StatementContext)
            else:
                return self.getTypedRuleContext(qasm3Parser.StatementContext,i)


        def controlDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(qasm3Parser.ControlDirectiveContext)
            else:
                return self.getTypedRuleContext(qasm3Parser.ControlDirectiveContext,i)


        def LBRACE(self):
            return self.getToken(qasm3Parser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(qasm3Parser.RBRACE, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_programBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgramBlock" ):
                listener.enterProgramBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgramBlock" ):
                listener.exitProgramBlock(self)




    def programBlock(self):

        localctx = qasm3Parser.ProgramBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_programBlock)
        self._la = 0 # Token type
        try:
            self.state = 877
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 866
                self.statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 867
                self.controlDirective()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 868
                self.match(qasm3Parser.LBRACE)
                self.state = 873
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << qasm3Parser.T__6) | (1 << qasm3Parser.T__7) | (1 << qasm3Parser.T__8) | (1 << qasm3Parser.T__9) | (1 << qasm3Parser.T__10) | (1 << qasm3Parser.T__11) | (1 << qasm3Parser.T__12) | (1 << qasm3Parser.T__13) | (1 << qasm3Parser.T__14) | (1 << qasm3Parser.T__15) | (1 << qasm3Parser.T__16) | (1 << qasm3Parser.T__19) | (1 << qasm3Parser.T__20) | (1 << qasm3Parser.T__21) | (1 << qasm3Parser.T__22) | (1 << qasm3Parser.T__23) | (1 << qasm3Parser.T__24) | (1 << qasm3Parser.T__25) | (1 << qasm3Parser.T__27) | (1 << qasm3Parser.T__28) | (1 << qasm3Parser.T__29) | (1 << qasm3Parser.T__30) | (1 << qasm3Parser.T__31) | (1 << qasm3Parser.T__45) | (1 << qasm3Parser.T__46) | (1 << qasm3Parser.T__47) | (1 << qasm3Parser.T__48) | (1 << qasm3Parser.T__49) | (1 << qasm3Parser.T__50) | (1 << qasm3Parser.T__51) | (1 << qasm3Parser.T__52) | (1 << qasm3Parser.T__53) | (1 << qasm3Parser.T__54) | (1 << qasm3Parser.T__55))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (qasm3Parser.T__68 - 69)) | (1 << (qasm3Parser.T__70 - 69)) | (1 << (qasm3Parser.T__72 - 69)) | (1 << (qasm3Parser.T__73 - 69)) | (1 << (qasm3Parser.T__74 - 69)) | (1 << (qasm3Parser.T__75 - 69)) | (1 << (qasm3Parser.T__76 - 69)) | (1 << (qasm3Parser.T__80 - 69)) | (1 << (qasm3Parser.T__81 - 69)) | (1 << (qasm3Parser.T__82 - 69)) | (1 << (qasm3Parser.T__83 - 69)) | (1 << (qasm3Parser.T__84 - 69)) | (1 << (qasm3Parser.T__85 - 69)) | (1 << (qasm3Parser.LPAREN - 69)) | (1 << (qasm3Parser.MINUS - 69)) | (1 << (qasm3Parser.ImagNumber - 69)) | (1 << (qasm3Parser.Constant - 69)) | (1 << (qasm3Parser.Integer - 69)) | (1 << (qasm3Parser.Identifier - 69)) | (1 << (qasm3Parser.RealNumber - 69)) | (1 << (qasm3Parser.TimingLiteral - 69)) | (1 << (qasm3Parser.StringLiteral - 69)))) != 0):
                    self.state = 871
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
                    if la_ == 1:
                        self.state = 869
                        self.statement()
                        pass

                    elif la_ == 2:
                        self.state = 870
                        self.controlDirective()
                        pass


                    self.state = 875
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 876
                self.match(qasm3Parser.RBRACE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BranchingStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(qasm3Parser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(qasm3Parser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(qasm3Parser.RPAREN, 0)

        def programBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(qasm3Parser.ProgramBlockContext)
            else:
                return self.getTypedRuleContext(qasm3Parser.ProgramBlockContext,i)


        def getRuleIndex(self):
            return qasm3Parser.RULE_branchingStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBranchingStatement" ):
                listener.enterBranchingStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBranchingStatement" ):
                listener.exitBranchingStatement(self)




    def branchingStatement(self):

        localctx = qasm3Parser.BranchingStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_branchingStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 879
            self.match(qasm3Parser.T__68)
            self.state = 880
            self.match(qasm3Parser.LPAREN)
            self.state = 881
            self.expression(0)
            self.state = 882
            self.match(qasm3Parser.RPAREN)
            self.state = 883
            self.programBlock()
            self.state = 886
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.state = 884
                self.match(qasm3Parser.T__69)
                self.state = 885
                self.programBlock()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LoopSignatureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(qasm3Parser.Identifier, 0)

        def setDeclaration(self):
            return self.getTypedRuleContext(qasm3Parser.SetDeclarationContext,0)


        def LPAREN(self):
            return self.getToken(qasm3Parser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(qasm3Parser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(qasm3Parser.RPAREN, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_loopSignature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoopSignature" ):
                listener.enterLoopSignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoopSignature" ):
                listener.exitLoopSignature(self)




    def loopSignature(self):

        localctx = qasm3Parser.LoopSignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_loopSignature)
        try:
            self.state = 897
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [qasm3Parser.T__70]:
                self.enterOuterAlt(localctx, 1)
                self.state = 888
                self.match(qasm3Parser.T__70)
                self.state = 889
                self.match(qasm3Parser.Identifier)
                self.state = 890
                self.match(qasm3Parser.T__71)
                self.state = 891
                self.setDeclaration()
                pass
            elif token in [qasm3Parser.T__72]:
                self.enterOuterAlt(localctx, 2)
                self.state = 892
                self.match(qasm3Parser.T__72)
                self.state = 893
                self.match(qasm3Parser.LPAREN)
                self.state = 894
                self.expression(0)
                self.state = 895
                self.match(qasm3Parser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LoopStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def loopSignature(self):
            return self.getTypedRuleContext(qasm3Parser.LoopSignatureContext,0)


        def programBlock(self):
            return self.getTypedRuleContext(qasm3Parser.ProgramBlockContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_loopStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoopStatement" ):
                listener.enterLoopStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoopStatement" ):
                listener.exitLoopStatement(self)




    def loopStatement(self):

        localctx = qasm3Parser.LoopStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_loopStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 899
            self.loopSignature()
            self.state = 900
            self.programBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EndStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(qasm3Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_endStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndStatement" ):
                listener.enterEndStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndStatement" ):
                listener.exitEndStatement(self)




    def endStatement(self):

        localctx = qasm3Parser.EndStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_endStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 902
            self.match(qasm3Parser.T__73)
            self.state = 903
            self.match(qasm3Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReturnStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(qasm3Parser.SEMICOLON, 0)

        def expression(self):
            return self.getTypedRuleContext(qasm3Parser.ExpressionContext,0)


        def quantumMeasurement(self):
            return self.getTypedRuleContext(qasm3Parser.QuantumMeasurementContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)




    def returnStatement(self):

        localctx = qasm3Parser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_returnStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 905
            self.match(qasm3Parser.T__74)
            self.state = 908
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [qasm3Parser.T__6, qasm3Parser.T__7, qasm3Parser.T__8, qasm3Parser.T__9, qasm3Parser.T__10, qasm3Parser.T__11, qasm3Parser.T__12, qasm3Parser.T__13, qasm3Parser.T__14, qasm3Parser.T__30, qasm3Parser.T__31, qasm3Parser.T__45, qasm3Parser.T__46, qasm3Parser.T__47, qasm3Parser.T__48, qasm3Parser.T__49, qasm3Parser.T__50, qasm3Parser.T__51, qasm3Parser.T__52, qasm3Parser.T__53, qasm3Parser.T__54, qasm3Parser.T__55, qasm3Parser.T__80, qasm3Parser.T__81, qasm3Parser.T__83, qasm3Parser.LPAREN, qasm3Parser.MINUS, qasm3Parser.ImagNumber, qasm3Parser.Constant, qasm3Parser.Integer, qasm3Parser.Identifier, qasm3Parser.RealNumber, qasm3Parser.TimingLiteral, qasm3Parser.StringLiteral]:
                self.state = 906
                self.expression(0)
                pass
            elif token in [qasm3Parser.T__23]:
                self.state = 907
                self.quantumMeasurement()
                pass
            elif token in [qasm3Parser.SEMICOLON]:
                pass
            else:
                pass
            self.state = 910
            self.match(qasm3Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ControlDirectiveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(qasm3Parser.SEMICOLON, 0)

        def endStatement(self):
            return self.getTypedRuleContext(qasm3Parser.EndStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(qasm3Parser.ReturnStatementContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_controlDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterControlDirective" ):
                listener.enterControlDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitControlDirective" ):
                listener.exitControlDirective(self)




    def controlDirective(self):

        localctx = qasm3Parser.ControlDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_controlDirective)
        self._la = 0 # Token type
        try:
            self.state = 916
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [qasm3Parser.T__75, qasm3Parser.T__76]:
                self.enterOuterAlt(localctx, 1)
                self.state = 912
                _la = self._input.LA(1)
                if not(_la==qasm3Parser.T__75 or _la==qasm3Parser.T__76):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 913
                self.match(qasm3Parser.SEMICOLON)
                pass
            elif token in [qasm3Parser.T__73]:
                self.enterOuterAlt(localctx, 2)
                self.state = 914
                self.endStatement()
                pass
            elif token in [qasm3Parser.T__74]:
                self.enterOuterAlt(localctx, 3)
                self.state = 915
                self.returnStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExternDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(qasm3Parser.Identifier, 0)

        def LPAREN(self):
            return self.getToken(qasm3Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(qasm3Parser.RPAREN, 0)

        def SEMICOLON(self):
            return self.getToken(qasm3Parser.SEMICOLON, 0)

        def classicalTypeList(self):
            return self.getTypedRuleContext(qasm3Parser.ClassicalTypeListContext,0)


        def returnSignature(self):
            return self.getTypedRuleContext(qasm3Parser.ReturnSignatureContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_externDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternDeclaration" ):
                listener.enterExternDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternDeclaration" ):
                listener.exitExternDeclaration(self)




    def externDeclaration(self):

        localctx = qasm3Parser.ExternDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_externDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 918
            self.match(qasm3Parser.T__77)
            self.state = 919
            self.match(qasm3Parser.Identifier)
            self.state = 920
            self.match(qasm3Parser.LPAREN)
            self.state = 922
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << qasm3Parser.T__6) | (1 << qasm3Parser.T__7) | (1 << qasm3Parser.T__8) | (1 << qasm3Parser.T__9) | (1 << qasm3Parser.T__10) | (1 << qasm3Parser.T__11) | (1 << qasm3Parser.T__12) | (1 << qasm3Parser.T__13) | (1 << qasm3Parser.T__14))) != 0) or _la==qasm3Parser.T__80 or _la==qasm3Parser.T__81:
                self.state = 921
                self.classicalTypeList()


            self.state = 924
            self.match(qasm3Parser.RPAREN)
            self.state = 926
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==qasm3Parser.ARROW:
                self.state = 925
                self.returnSignature()


            self.state = 928
            self.match(qasm3Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExternOrSubroutineCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(qasm3Parser.Identifier, 0)

        def LPAREN(self):
            return self.getToken(qasm3Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(qasm3Parser.RPAREN, 0)

        def expressionList(self):
            return self.getTypedRuleContext(qasm3Parser.ExpressionListContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_externOrSubroutineCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternOrSubroutineCall" ):
                listener.enterExternOrSubroutineCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternOrSubroutineCall" ):
                listener.exitExternOrSubroutineCall(self)




    def externOrSubroutineCall(self):

        localctx = qasm3Parser.ExternOrSubroutineCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_externOrSubroutineCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 930
            self.match(qasm3Parser.Identifier)
            self.state = 931
            self.match(qasm3Parser.LPAREN)
            self.state = 933
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << qasm3Parser.T__6) | (1 << qasm3Parser.T__7) | (1 << qasm3Parser.T__8) | (1 << qasm3Parser.T__9) | (1 << qasm3Parser.T__10) | (1 << qasm3Parser.T__11) | (1 << qasm3Parser.T__12) | (1 << qasm3Parser.T__13) | (1 << qasm3Parser.T__14) | (1 << qasm3Parser.T__30) | (1 << qasm3Parser.T__31) | (1 << qasm3Parser.T__45) | (1 << qasm3Parser.T__46) | (1 << qasm3Parser.T__47) | (1 << qasm3Parser.T__48) | (1 << qasm3Parser.T__49) | (1 << qasm3Parser.T__50) | (1 << qasm3Parser.T__51) | (1 << qasm3Parser.T__52) | (1 << qasm3Parser.T__53) | (1 << qasm3Parser.T__54) | (1 << qasm3Parser.T__55))) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (qasm3Parser.T__80 - 81)) | (1 << (qasm3Parser.T__81 - 81)) | (1 << (qasm3Parser.T__83 - 81)) | (1 << (qasm3Parser.LPAREN - 81)) | (1 << (qasm3Parser.MINUS - 81)) | (1 << (qasm3Parser.ImagNumber - 81)) | (1 << (qasm3Parser.Constant - 81)) | (1 << (qasm3Parser.Integer - 81)) | (1 << (qasm3Parser.Identifier - 81)) | (1 << (qasm3Parser.RealNumber - 81)) | (1 << (qasm3Parser.TimingLiteral - 81)) | (1 << (qasm3Parser.StringLiteral - 81)))) != 0):
                self.state = 932
                self.expressionList()


            self.state = 935
            self.match(qasm3Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubroutineDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(qasm3Parser.Identifier, 0)

        def LPAREN(self):
            return self.getToken(qasm3Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(qasm3Parser.RPAREN, 0)

        def subroutineBlock(self):
            return self.getTypedRuleContext(qasm3Parser.SubroutineBlockContext,0)


        def anyTypeArgumentList(self):
            return self.getTypedRuleContext(qasm3Parser.AnyTypeArgumentListContext,0)


        def returnSignature(self):
            return self.getTypedRuleContext(qasm3Parser.ReturnSignatureContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_subroutineDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubroutineDefinition" ):
                listener.enterSubroutineDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubroutineDefinition" ):
                listener.exitSubroutineDefinition(self)




    def subroutineDefinition(self):

        localctx = qasm3Parser.SubroutineDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_subroutineDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 937
            self.match(qasm3Parser.T__78)
            self.state = 938
            self.match(qasm3Parser.Identifier)
            self.state = 939
            self.match(qasm3Parser.LPAREN)
            self.state = 941
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << qasm3Parser.T__4) | (1 << qasm3Parser.T__5) | (1 << qasm3Parser.T__6) | (1 << qasm3Parser.T__7) | (1 << qasm3Parser.T__8) | (1 << qasm3Parser.T__9) | (1 << qasm3Parser.T__10) | (1 << qasm3Parser.T__11) | (1 << qasm3Parser.T__12) | (1 << qasm3Parser.T__13) | (1 << qasm3Parser.T__14))) != 0) or _la==qasm3Parser.T__80 or _la==qasm3Parser.T__81:
                self.state = 940
                self.anyTypeArgumentList()


            self.state = 943
            self.match(qasm3Parser.RPAREN)
            self.state = 945
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==qasm3Parser.ARROW:
                self.state = 944
                self.returnSignature()


            self.state = 947
            self.subroutineBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubroutineBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(qasm3Parser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(qasm3Parser.RBRACE, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(qasm3Parser.StatementContext)
            else:
                return self.getTypedRuleContext(qasm3Parser.StatementContext,i)


        def returnStatement(self):
            return self.getTypedRuleContext(qasm3Parser.ReturnStatementContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_subroutineBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubroutineBlock" ):
                listener.enterSubroutineBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubroutineBlock" ):
                listener.exitSubroutineBlock(self)




    def subroutineBlock(self):

        localctx = qasm3Parser.SubroutineBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_subroutineBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 949
            self.match(qasm3Parser.LBRACE)
            self.state = 953
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << qasm3Parser.T__6) | (1 << qasm3Parser.T__7) | (1 << qasm3Parser.T__8) | (1 << qasm3Parser.T__9) | (1 << qasm3Parser.T__10) | (1 << qasm3Parser.T__11) | (1 << qasm3Parser.T__12) | (1 << qasm3Parser.T__13) | (1 << qasm3Parser.T__14) | (1 << qasm3Parser.T__15) | (1 << qasm3Parser.T__16) | (1 << qasm3Parser.T__19) | (1 << qasm3Parser.T__20) | (1 << qasm3Parser.T__21) | (1 << qasm3Parser.T__22) | (1 << qasm3Parser.T__23) | (1 << qasm3Parser.T__24) | (1 << qasm3Parser.T__25) | (1 << qasm3Parser.T__27) | (1 << qasm3Parser.T__28) | (1 << qasm3Parser.T__29) | (1 << qasm3Parser.T__30) | (1 << qasm3Parser.T__31) | (1 << qasm3Parser.T__45) | (1 << qasm3Parser.T__46) | (1 << qasm3Parser.T__47) | (1 << qasm3Parser.T__48) | (1 << qasm3Parser.T__49) | (1 << qasm3Parser.T__50) | (1 << qasm3Parser.T__51) | (1 << qasm3Parser.T__52) | (1 << qasm3Parser.T__53) | (1 << qasm3Parser.T__54) | (1 << qasm3Parser.T__55))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (qasm3Parser.T__68 - 69)) | (1 << (qasm3Parser.T__70 - 69)) | (1 << (qasm3Parser.T__72 - 69)) | (1 << (qasm3Parser.T__73 - 69)) | (1 << (qasm3Parser.T__80 - 69)) | (1 << (qasm3Parser.T__81 - 69)) | (1 << (qasm3Parser.T__82 - 69)) | (1 << (qasm3Parser.T__83 - 69)) | (1 << (qasm3Parser.T__84 - 69)) | (1 << (qasm3Parser.T__85 - 69)) | (1 << (qasm3Parser.LPAREN - 69)) | (1 << (qasm3Parser.MINUS - 69)) | (1 << (qasm3Parser.ImagNumber - 69)) | (1 << (qasm3Parser.Constant - 69)) | (1 << (qasm3Parser.Integer - 69)) | (1 << (qasm3Parser.Identifier - 69)) | (1 << (qasm3Parser.RealNumber - 69)) | (1 << (qasm3Parser.TimingLiteral - 69)) | (1 << (qasm3Parser.StringLiteral - 69)))) != 0):
                self.state = 950
                self.statement()
                self.state = 955
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 957
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==qasm3Parser.T__74:
                self.state = 956
                self.returnStatement()


            self.state = 959
            self.match(qasm3Parser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PragmaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(qasm3Parser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(qasm3Parser.RBRACE, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(qasm3Parser.StatementContext)
            else:
                return self.getTypedRuleContext(qasm3Parser.StatementContext,i)


        def getRuleIndex(self):
            return qasm3Parser.RULE_pragma

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma" ):
                listener.enterPragma(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma" ):
                listener.exitPragma(self)




    def pragma(self):

        localctx = qasm3Parser.PragmaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_pragma)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 961
            self.match(qasm3Parser.T__79)
            self.state = 962
            self.match(qasm3Parser.LBRACE)
            self.state = 966
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << qasm3Parser.T__6) | (1 << qasm3Parser.T__7) | (1 << qasm3Parser.T__8) | (1 << qasm3Parser.T__9) | (1 << qasm3Parser.T__10) | (1 << qasm3Parser.T__11) | (1 << qasm3Parser.T__12) | (1 << qasm3Parser.T__13) | (1 << qasm3Parser.T__14) | (1 << qasm3Parser.T__15) | (1 << qasm3Parser.T__16) | (1 << qasm3Parser.T__19) | (1 << qasm3Parser.T__20) | (1 << qasm3Parser.T__21) | (1 << qasm3Parser.T__22) | (1 << qasm3Parser.T__23) | (1 << qasm3Parser.T__24) | (1 << qasm3Parser.T__25) | (1 << qasm3Parser.T__27) | (1 << qasm3Parser.T__28) | (1 << qasm3Parser.T__29) | (1 << qasm3Parser.T__30) | (1 << qasm3Parser.T__31) | (1 << qasm3Parser.T__45) | (1 << qasm3Parser.T__46) | (1 << qasm3Parser.T__47) | (1 << qasm3Parser.T__48) | (1 << qasm3Parser.T__49) | (1 << qasm3Parser.T__50) | (1 << qasm3Parser.T__51) | (1 << qasm3Parser.T__52) | (1 << qasm3Parser.T__53) | (1 << qasm3Parser.T__54) | (1 << qasm3Parser.T__55))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (qasm3Parser.T__68 - 69)) | (1 << (qasm3Parser.T__70 - 69)) | (1 << (qasm3Parser.T__72 - 69)) | (1 << (qasm3Parser.T__73 - 69)) | (1 << (qasm3Parser.T__80 - 69)) | (1 << (qasm3Parser.T__81 - 69)) | (1 << (qasm3Parser.T__82 - 69)) | (1 << (qasm3Parser.T__83 - 69)) | (1 << (qasm3Parser.T__84 - 69)) | (1 << (qasm3Parser.T__85 - 69)) | (1 << (qasm3Parser.LPAREN - 69)) | (1 << (qasm3Parser.MINUS - 69)) | (1 << (qasm3Parser.ImagNumber - 69)) | (1 << (qasm3Parser.Constant - 69)) | (1 << (qasm3Parser.Integer - 69)) | (1 << (qasm3Parser.Identifier - 69)) | (1 << (qasm3Parser.RealNumber - 69)) | (1 << (qasm3Parser.TimingLiteral - 69)) | (1 << (qasm3Parser.StringLiteral - 69)))) != 0):
                self.state = 963
                self.statement()
                self.state = 968
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 969
            self.match(qasm3Parser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TimingTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return qasm3Parser.RULE_timingType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimingType" ):
                listener.enterTimingType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimingType" ):
                listener.exitTimingType(self)




    def timingType(self):

        localctx = qasm3Parser.TimingTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_timingType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 971
            _la = self._input.LA(1)
            if not(_la==qasm3Parser.T__80 or _la==qasm3Parser.T__81):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TimingBoxContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quantumBlock(self):
            return self.getTypedRuleContext(qasm3Parser.QuantumBlockContext,0)


        def designator(self):
            return self.getTypedRuleContext(qasm3Parser.DesignatorContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_timingBox

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimingBox" ):
                listener.enterTimingBox(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimingBox" ):
                listener.exitTimingBox(self)




    def timingBox(self):

        localctx = qasm3Parser.TimingBoxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_timingBox)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 973
            self.match(qasm3Parser.T__82)
            self.state = 975
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==qasm3Parser.LBRACKET:
                self.state = 974
                self.designator()


            self.state = 977
            self.quantumBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TimingIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TimingLiteral(self):
            return self.getToken(qasm3Parser.TimingLiteral, 0)

        def LPAREN(self):
            return self.getToken(qasm3Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(qasm3Parser.RPAREN, 0)

        def Identifier(self):
            return self.getToken(qasm3Parser.Identifier, 0)

        def quantumBlock(self):
            return self.getTypedRuleContext(qasm3Parser.QuantumBlockContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_timingIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimingIdentifier" ):
                listener.enterTimingIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimingIdentifier" ):
                listener.exitTimingIdentifier(self)




    def timingIdentifier(self):

        localctx = qasm3Parser.TimingIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_timingIdentifier)
        try:
            self.state = 987
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [qasm3Parser.TimingLiteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 979
                self.match(qasm3Parser.TimingLiteral)
                pass
            elif token in [qasm3Parser.T__83]:
                self.enterOuterAlt(localctx, 2)
                self.state = 980
                self.match(qasm3Parser.T__83)
                self.state = 981
                self.match(qasm3Parser.LPAREN)
                self.state = 984
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [qasm3Parser.Identifier]:
                    self.state = 982
                    self.match(qasm3Parser.Identifier)
                    pass
                elif token in [qasm3Parser.LBRACE]:
                    self.state = 983
                    self.quantumBlock()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 986
                self.match(qasm3Parser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TimingInstructionNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return qasm3Parser.RULE_timingInstructionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimingInstructionName" ):
                listener.enterTimingInstructionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimingInstructionName" ):
                listener.exitTimingInstructionName(self)




    def timingInstructionName(self):

        localctx = qasm3Parser.TimingInstructionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_timingInstructionName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 989
            _la = self._input.LA(1)
            if not(_la==qasm3Parser.T__84 or _la==qasm3Parser.T__85):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TimingInstructionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def timingInstructionName(self):
            return self.getTypedRuleContext(qasm3Parser.TimingInstructionNameContext,0)


        def designator(self):
            return self.getTypedRuleContext(qasm3Parser.DesignatorContext,0)


        def indexIdentifierList(self):
            return self.getTypedRuleContext(qasm3Parser.IndexIdentifierListContext,0)


        def LPAREN(self):
            return self.getToken(qasm3Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(qasm3Parser.RPAREN, 0)

        def expressionList(self):
            return self.getTypedRuleContext(qasm3Parser.ExpressionListContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_timingInstruction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimingInstruction" ):
                listener.enterTimingInstruction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimingInstruction" ):
                listener.exitTimingInstruction(self)




    def timingInstruction(self):

        localctx = qasm3Parser.TimingInstructionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_timingInstruction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 991
            self.timingInstructionName()
            self.state = 997
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==qasm3Parser.LPAREN:
                self.state = 992
                self.match(qasm3Parser.LPAREN)
                self.state = 994
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << qasm3Parser.T__6) | (1 << qasm3Parser.T__7) | (1 << qasm3Parser.T__8) | (1 << qasm3Parser.T__9) | (1 << qasm3Parser.T__10) | (1 << qasm3Parser.T__11) | (1 << qasm3Parser.T__12) | (1 << qasm3Parser.T__13) | (1 << qasm3Parser.T__14) | (1 << qasm3Parser.T__30) | (1 << qasm3Parser.T__31) | (1 << qasm3Parser.T__45) | (1 << qasm3Parser.T__46) | (1 << qasm3Parser.T__47) | (1 << qasm3Parser.T__48) | (1 << qasm3Parser.T__49) | (1 << qasm3Parser.T__50) | (1 << qasm3Parser.T__51) | (1 << qasm3Parser.T__52) | (1 << qasm3Parser.T__53) | (1 << qasm3Parser.T__54) | (1 << qasm3Parser.T__55))) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (qasm3Parser.T__80 - 81)) | (1 << (qasm3Parser.T__81 - 81)) | (1 << (qasm3Parser.T__83 - 81)) | (1 << (qasm3Parser.LPAREN - 81)) | (1 << (qasm3Parser.MINUS - 81)) | (1 << (qasm3Parser.ImagNumber - 81)) | (1 << (qasm3Parser.Constant - 81)) | (1 << (qasm3Parser.Integer - 81)) | (1 << (qasm3Parser.Identifier - 81)) | (1 << (qasm3Parser.RealNumber - 81)) | (1 << (qasm3Parser.TimingLiteral - 81)) | (1 << (qasm3Parser.StringLiteral - 81)))) != 0):
                    self.state = 993
                    self.expressionList()


                self.state = 996
                self.match(qasm3Parser.RPAREN)


            self.state = 999
            self.designator()
            self.state = 1000
            self.indexIdentifierList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TimingStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def timingInstruction(self):
            return self.getTypedRuleContext(qasm3Parser.TimingInstructionContext,0)


        def SEMICOLON(self):
            return self.getToken(qasm3Parser.SEMICOLON, 0)

        def timingBox(self):
            return self.getTypedRuleContext(qasm3Parser.TimingBoxContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_timingStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimingStatement" ):
                listener.enterTimingStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimingStatement" ):
                listener.exitTimingStatement(self)




    def timingStatement(self):

        localctx = qasm3Parser.TimingStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_timingStatement)
        try:
            self.state = 1006
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [qasm3Parser.T__84, qasm3Parser.T__85]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1002
                self.timingInstruction()
                self.state = 1003
                self.match(qasm3Parser.SEMICOLON)
                pass
            elif token in [qasm3Parser.T__82]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1005
                self.timingBox()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CalibrationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def calibrationGrammarDeclaration(self):
            return self.getTypedRuleContext(qasm3Parser.CalibrationGrammarDeclarationContext,0)


        def calibrationDefinition(self):
            return self.getTypedRuleContext(qasm3Parser.CalibrationDefinitionContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_calibration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCalibration" ):
                listener.enterCalibration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCalibration" ):
                listener.exitCalibration(self)




    def calibration(self):

        localctx = qasm3Parser.CalibrationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_calibration)
        try:
            self.state = 1010
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [qasm3Parser.T__86]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1008
                self.calibrationGrammarDeclaration()
                pass
            elif token in [qasm3Parser.T__87]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1009
                self.calibrationDefinition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CalibrationGrammarDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def calibrationGrammar(self):
            return self.getTypedRuleContext(qasm3Parser.CalibrationGrammarContext,0)


        def SEMICOLON(self):
            return self.getToken(qasm3Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_calibrationGrammarDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCalibrationGrammarDeclaration" ):
                listener.enterCalibrationGrammarDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCalibrationGrammarDeclaration" ):
                listener.exitCalibrationGrammarDeclaration(self)




    def calibrationGrammarDeclaration(self):

        localctx = qasm3Parser.CalibrationGrammarDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_calibrationGrammarDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1012
            self.match(qasm3Parser.T__86)
            self.state = 1013
            self.calibrationGrammar()
            self.state = 1014
            self.match(qasm3Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CalibrationDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(qasm3Parser.Identifier, 0)

        def identifierList(self):
            return self.getTypedRuleContext(qasm3Parser.IdentifierListContext,0)


        def LBRACE(self):
            return self.getToken(qasm3Parser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(qasm3Parser.RBRACE, 0)

        def LPAREN(self):
            return self.getToken(qasm3Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(qasm3Parser.RPAREN, 0)

        def returnSignature(self):
            return self.getTypedRuleContext(qasm3Parser.ReturnSignatureContext,0)


        def calibrationArgumentList(self):
            return self.getTypedRuleContext(qasm3Parser.CalibrationArgumentListContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_calibrationDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCalibrationDefinition" ):
                listener.enterCalibrationDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCalibrationDefinition" ):
                listener.exitCalibrationDefinition(self)




    def calibrationDefinition(self):

        localctx = qasm3Parser.CalibrationDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_calibrationDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1016
            self.match(qasm3Parser.T__87)
            self.state = 1017
            self.match(qasm3Parser.Identifier)
            self.state = 1023
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==qasm3Parser.LPAREN:
                self.state = 1018
                self.match(qasm3Parser.LPAREN)
                self.state = 1020
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << qasm3Parser.T__6) | (1 << qasm3Parser.T__7) | (1 << qasm3Parser.T__8) | (1 << qasm3Parser.T__9) | (1 << qasm3Parser.T__10) | (1 << qasm3Parser.T__11) | (1 << qasm3Parser.T__12) | (1 << qasm3Parser.T__13) | (1 << qasm3Parser.T__14) | (1 << qasm3Parser.T__30) | (1 << qasm3Parser.T__31) | (1 << qasm3Parser.T__45) | (1 << qasm3Parser.T__46) | (1 << qasm3Parser.T__47) | (1 << qasm3Parser.T__48) | (1 << qasm3Parser.T__49) | (1 << qasm3Parser.T__50) | (1 << qasm3Parser.T__51) | (1 << qasm3Parser.T__52) | (1 << qasm3Parser.T__53) | (1 << qasm3Parser.T__54) | (1 << qasm3Parser.T__55))) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (qasm3Parser.T__80 - 81)) | (1 << (qasm3Parser.T__81 - 81)) | (1 << (qasm3Parser.T__83 - 81)) | (1 << (qasm3Parser.LPAREN - 81)) | (1 << (qasm3Parser.MINUS - 81)) | (1 << (qasm3Parser.ImagNumber - 81)) | (1 << (qasm3Parser.Constant - 81)) | (1 << (qasm3Parser.Integer - 81)) | (1 << (qasm3Parser.Identifier - 81)) | (1 << (qasm3Parser.RealNumber - 81)) | (1 << (qasm3Parser.TimingLiteral - 81)) | (1 << (qasm3Parser.StringLiteral - 81)))) != 0):
                    self.state = 1019
                    self.calibrationArgumentList()


                self.state = 1022
                self.match(qasm3Parser.RPAREN)


            self.state = 1025
            self.identifierList()
            self.state = 1027
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==qasm3Parser.ARROW:
                self.state = 1026
                self.returnSignature()


            self.state = 1029
            self.match(qasm3Parser.LBRACE)
            self.state = 1033
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,107,self._ctx)
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1+1:
                    self.state = 1030
                    self.matchWildcard() 
                self.state = 1035
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,107,self._ctx)

            self.state = 1036
            self.match(qasm3Parser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CalibrationGrammarContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self):
            return self.getToken(qasm3Parser.StringLiteral, 0)

        def getRuleIndex(self):
            return qasm3Parser.RULE_calibrationGrammar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCalibrationGrammar" ):
                listener.enterCalibrationGrammar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCalibrationGrammar" ):
                listener.exitCalibrationGrammar(self)




    def calibrationGrammar(self):

        localctx = qasm3Parser.CalibrationGrammarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_calibrationGrammar)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1038
            _la = self._input.LA(1)
            if not(_la==qasm3Parser.T__88 or _la==qasm3Parser.StringLiteral):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CalibrationArgumentListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classicalArgumentList(self):
            return self.getTypedRuleContext(qasm3Parser.ClassicalArgumentListContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(qasm3Parser.ExpressionListContext,0)


        def getRuleIndex(self):
            return qasm3Parser.RULE_calibrationArgumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCalibrationArgumentList" ):
                listener.enterCalibrationArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCalibrationArgumentList" ):
                listener.exitCalibrationArgumentList(self)




    def calibrationArgumentList(self):

        localctx = qasm3Parser.CalibrationArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_calibrationArgumentList)
        try:
            self.state = 1042
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1040
                self.classicalArgumentList()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1041
                self.expressionList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[38] = self.indexIdentifier_sempred
        self._predicates[63] = self.expression_sempred
        self._predicates[64] = self.logicalAndExpression_sempred
        self._predicates[65] = self.bitOrExpression_sempred
        self._predicates[66] = self.xOrExpression_sempred
        self._predicates[67] = self.bitAndExpression_sempred
        self._predicates[68] = self.equalityExpression_sempred
        self._predicates[69] = self.comparisonExpression_sempred
        self._predicates[70] = self.bitShiftExpression_sempred
        self._predicates[71] = self.additiveExpression_sempred
        self._predicates[72] = self.multiplicativeExpression_sempred
        self._predicates[75] = self.expressionTerminator_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def indexIdentifier_sempred(self, localctx:IndexIdentifierContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 1)
         

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 1)
         

    def logicalAndExpression_sempred(self, localctx:LogicalAndExpressionContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 1)
         

    def bitOrExpression_sempred(self, localctx:BitOrExpressionContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 1)
         

    def xOrExpression_sempred(self, localctx:XOrExpressionContext, predIndex:int):
            if predIndex == 4:
                return self.precpred(self._ctx, 1)
         

    def bitAndExpression_sempred(self, localctx:BitAndExpressionContext, predIndex:int):
            if predIndex == 5:
                return self.precpred(self._ctx, 1)
         

    def equalityExpression_sempred(self, localctx:EqualityExpressionContext, predIndex:int):
            if predIndex == 6:
                return self.precpred(self._ctx, 1)
         

    def comparisonExpression_sempred(self, localctx:ComparisonExpressionContext, predIndex:int):
            if predIndex == 7:
                return self.precpred(self._ctx, 1)
         

    def bitShiftExpression_sempred(self, localctx:BitShiftExpressionContext, predIndex:int):
            if predIndex == 8:
                return self.precpred(self._ctx, 1)
         

    def additiveExpression_sempred(self, localctx:AdditiveExpressionContext, predIndex:int):
            if predIndex == 9:
                return self.precpred(self._ctx, 1)
         

    def multiplicativeExpression_sempred(self, localctx:MultiplicativeExpressionContext, predIndex:int):
            if predIndex == 10:
                return self.precpred(self._ctx, 1)
         

    def expressionTerminator_sempred(self, localctx:ExpressionTerminatorContext, predIndex:int):
            if predIndex == 11:
                return self.precpred(self._ctx, 1)
         




