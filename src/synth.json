Trying File ./examples/rus.qasm
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
Starting synthesis
Using built-in gate p
Using built-in gate x
Using built-in gate y
Using built-in gate z
Using built-in gate h
Defining QGate s
Defining QGate sdg
Defining QGate t
Defining QGate tdg
Defining QGate sx
Defining QGate rx
Defining QGate ry
Defining QGate rz
Using built-in gate cx
Using built-in gate cy
Using built-in gate cz
Defining QGate cp
Defining QGate crx
Defining QGate cry
Defining QGate crz
Using built-in gate ch
Defining QGate swap
Defining QGate ccx
Defining QGate cswap
Defining QGate cu
Defining QGate CX
Defining QGate phase
Defining QGate cphase
Defining QGate id
Defining QGate u1
Defining QGate u2
Defining QGate u3
s
[]
['a']
sdg
[]
['a']
t
[]
['a']
tdg
[]
['a']
sx
[]
['a']
rx
['a']
['θ']
ry
['a']
['θ']
rz
['a']
['λ']
cp
['a', 'b']
['λ']
crx
['a', 'b']
['θ']
cry
['a', 'b']
['θ']
crz
['a', 'b']
['θ']
swap
[]
['a', 'b']
ccx
[]
['a', 'b', 'c']
cswap
[]
['a', 'b', 'c']
cu
['c', 't']
['θ', 'φ', 'λ', 'γ']
CX
[]
['c', 't']
phase
['q']
['λ']
cphase
['a', 'b']
['λ']
id
[]
['a']
u1
['q']
['λ']
u2
['q']
['φ', 'λ']
u3
['q']
['θ', 'φ', 'λ']
8
classical declaration
classical declaration
quantum instruction
{'type': 'RESET', 'indexIdList': [{'id': 'input_qubit', 'exprList': []}]}
quantum instruction
{'type': 'quantumGateCall', 'name': 'h', 'mods': [], 'exps': [], 'indexIdList': [{'id': 'input_qubit', 'exprList': []}]}
loop
quantum instruction
{'type': 'quantumGateCall', 'name': 'rz', 'mods': [], 'exps': [3.142857142857143], 'indexIdList': [{'id': 'input_qubit', 'exprList': []}]}
quantum instruction
{'type': 'quantumGateCall', 'name': 'h', 'mods': [], 'exps': [], 'indexIdList': [{'id': 'input_qubit', 'exprList': []}]}
assignment
Instruction Type quantumInstruction
RESET
Exps None
Mods None
IDS ['input_qubit']
Instruction Type quantumInstruction
Instruction Name h
Exps []
Mods []
IDS ['input_qubit']
Instruction Type quantumInstruction
Instruction Name rz
Exps [3.142857142857143]
Mods []
IDS ['input_qubit']
Instruction Type quantumInstruction
Instruction Name h
Exps []
Mods []
IDS ['input_qubit']
Success!
Trying File ./examples/t1.qasm
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
Starting synthesis
Using built-in gate p
Using built-in gate x
Using built-in gate y
Using built-in gate z
Using built-in gate h
Defining QGate s
Defining QGate sdg
Defining QGate t
Defining QGate tdg
Defining QGate sx
Defining QGate rx
Defining QGate ry
Defining QGate rz
Using built-in gate cx
Using built-in gate cy
Using built-in gate cz
Defining QGate cp
Defining QGate crx
Defining QGate cry
Defining QGate crz
Using built-in gate ch
Defining QGate swap
Defining QGate ccx
Defining QGate cswap
Defining QGate cu
Defining QGate CX
Defining QGate phase
Defining QGate cphase
Defining QGate id
Defining QGate u1
Defining QGate u2
Defining QGate u3
s
[]
['a']
sdg
[]
['a']
t
[]
['a']
tdg
[]
['a']
sx
[]
['a']
rx
['a']
['θ']
ry
['a']
['θ']
rz
['a']
['λ']
cp
['a', 'b']
['λ']
crx
['a', 'b']
['θ']
cry
['a', 'b']
['θ']
crz
['a', 'b']
['θ']
swap
[]
['a', 'b']
ccx
[]
['a', 'b', 'c']
cswap
[]
['a', 'b', 'c']
cu
['c', 't']
['θ', 'φ', 'λ', 'γ']
CX
[]
['c', 't']
phase
['q']
['λ']
cphase
['a', 'b']
['λ']
id
[]
['a']
u1
['q']
['λ']
u2
['q']
['φ', 'λ']
u3
['q']
['θ', 'φ', 'λ']
7
classical declaration
classical declaration
classical declaration
classical declaration
classical declaration
classical declaration
classical declaration
Success!
Trying File ./examples/rb.qasm
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
Starting synthesis
Using built-in gate p
Using built-in gate x
Using built-in gate y
Using built-in gate z
Using built-in gate h
Defining QGate s
Defining QGate sdg
Defining QGate t
Defining QGate tdg
Defining QGate sx
Defining QGate rx
Defining QGate ry
Defining QGate rz
Using built-in gate cx
Using built-in gate cy
Using built-in gate cz
Defining QGate cp
Defining QGate crx
Defining QGate cry
Defining QGate crz
Using built-in gate ch
Defining QGate swap
Defining QGate ccx
Defining QGate cswap
Defining QGate cu
Defining QGate CX
Defining QGate phase
Defining QGate cphase
Defining QGate id
Defining QGate u1
Defining QGate u2
Defining QGate u3
s
[]
['a']
sdg
[]
['a']
t
[]
['a']
tdg
[]
['a']
sx
[]
['a']
rx
['a']
['θ']
ry
['a']
['θ']
rz
['a']
['λ']
cp
['a', 'b']
['λ']
crx
['a', 'b']
['θ']
cry
['a', 'b']
['θ']
crz
['a', 'b']
['θ']
swap
[]
['a', 'b']
ccx
[]
['a', 'b', 'c']
cswap
[]
['a', 'b', 'c']
cu
['c', 't']
['θ', 'φ', 'λ', 'γ']
CX
[]
['c', 't']
phase
['q']
['λ']
cphase
['a', 'b']
['λ']
id
[]
['a']
u1
['q']
['λ']
u2
['q']
['φ', 'λ']
u3
['q']
['θ', 'φ', 'λ']
14
classical declaration
quantum instruction
{'type': 'RESET', 'indexIdList': [{'id': 'q', 'exprList': []}]}
quantum instruction
{'type': 'quantumGateCall', 'name': 'h', 'mods': [], 'exps': [], 'indexIdList': [{'id': 'q', 'exprList': [0]}]}
quantum instruction
{'type': 'barrier', 'indexIdList': [{'id': 'q', 'exprList': []}]}
quantum instruction
{'type': 'quantumGateCall', 'name': 'cz', 'mods': [], 'exps': [], 'indexIdList': [{'id': 'q', 'exprList': [0]}, {'id': 'q', 'exprList': [1]}]}
quantum instruction
{'type': 'barrier', 'indexIdList': [{'id': 'q', 'exprList': []}]}
quantum instruction
{'type': 'quantumGateCall', 'name': 's', 'mods': [], 'exps': [], 'indexIdList': [{'id': 'q', 'exprList': [0]}]}
quantum instruction
{'type': 'quantumGateCall', 'name': 'cz', 'mods': [], 'exps': [], 'indexIdList': [{'id': 'q', 'exprList': [0]}, {'id': 'q', 'exprList': [1]}]}
quantum instruction
{'type': 'barrier', 'indexIdList': [{'id': 'q', 'exprList': []}]}
quantum instruction
{'type': 'quantumGateCall', 'name': 's', 'mods': [], 'exps': [], 'indexIdList': [{'id': 'q', 'exprList': [0]}]}
quantum instruction
{'type': 'quantumGateCall', 'name': 'z', 'mods': [], 'exps': [], 'indexIdList': [{'id': 'q', 'exprList': [0]}]}
quantum instruction
{'type': 'quantumGateCall', 'name': 'h', 'mods': [], 'exps': [], 'indexIdList': [{'id': 'q', 'exprList': [0]}]}
quantum instruction
{'type': 'barrier', 'indexIdList': [{'id': 'q', 'exprList': []}]}
assignment
Instruction Type quantumInstruction
RESET
Exps None
Mods None
IDS ['q']
Instruction Type quantumInstruction
Instruction Name h
Exps []
Mods []
IDS ['q']
Instruction Type quantumInstruction
barrier
Exps None
Mods None
IDS ['q']
Instruction Type quantumInstruction
Instruction Name cz
Exps []
Mods []
IDS ['q', 'q']
Instruction Type quantumInstruction
barrier
Exps None
Mods None
IDS ['q']
Instruction Type quantumInstruction
Instruction Name s
Exps []
Mods []
IDS ['q']
Instruction Type quantumInstruction
Instruction Name cz
Exps []
Mods []
IDS ['q', 'q']
Instruction Type quantumInstruction
barrier
Exps None
Mods None
IDS ['q']
Instruction Type quantumInstruction
Instruction Name s
Exps []
Mods []
IDS ['q']
Instruction Type quantumInstruction
Instruction Name z
Exps []
Mods []
IDS ['q']
Instruction Type quantumInstruction
Instruction Name h
Exps []
Mods []
IDS ['q']
Instruction Type quantumInstruction
barrier
Exps None
Mods None
IDS ['q']
Success!
Trying File ./examples/qft.qasm
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
Starting synthesis
Using built-in gate p
Using built-in gate x
Using built-in gate y
Using built-in gate z
Using built-in gate h
Defining QGate s
Defining QGate sdg
Defining QGate t
Defining QGate tdg
Defining QGate sx
Defining QGate rx
Defining QGate ry
Defining QGate rz
Using built-in gate cx
Using built-in gate cy
Using built-in gate cz
Defining QGate cp
Defining QGate crx
Defining QGate cry
Defining QGate crz
Using built-in gate ch
Defining QGate swap
Defining QGate ccx
Defining QGate cswap
Defining QGate cu
Defining QGate CX
Defining QGate phase
Defining QGate cphase
Defining QGate id
Defining QGate u1
Defining QGate u2
Defining QGate u3
s
[]
['a']
sdg
[]
['a']
t
[]
['a']
tdg
[]
['a']
sx
[]
['a']
rx
['a']
['θ']
ry
['a']
['θ']
rz
['a']
['λ']
cp
['a', 'b']
['λ']
crx
['a', 'b']
['θ']
cry
['a', 'b']
['θ']
crz
['a', 'b']
['θ']
swap
[]
['a', 'b']
ccx
[]
['a', 'b', 'c']
cswap
[]
['a', 'b', 'c']
cu
['c', 't']
['θ', 'φ', 'λ', 'γ']
CX
[]
['c', 't']
phase
['q']
['λ']
cphase
['a', 'b']
['λ']
id
[]
['a']
u1
['q']
['λ']
u2
['q']
['φ', 'λ']
u3
['q']
['θ', 'φ', 'λ']
16
classical declaration
quantum instruction
{'type': 'RESET', 'indexIdList': [{'id': 'q', 'exprList': []}]}
quantum instruction
{'type': 'quantumGateCall', 'name': 'x', 'mods': [], 'exps': [], 'indexIdList': [{'id': 'q', 'exprList': [0]}]}
quantum instruction
{'type': 'quantumGateCall', 'name': 'x', 'mods': [], 'exps': [], 'indexIdList': [{'id': 'q', 'exprList': [2]}]}
quantum instruction
{'type': 'barrier', 'indexIdList': [{'id': 'q', 'exprList': []}]}
quantum instruction
{'type': 'quantumGateCall', 'name': 'h', 'mods': [], 'exps': [], 'indexIdList': [{'id': 'q', 'exprList': [0]}]}
quantum instruction
{'type': 'quantumGateCall', 'name': 'cphase', 'mods': [], 'exps': [1.5714285714285714], 'indexIdList': [{'id': 'q', 'exprList': [1]}, {'id': 'q', 'exprList': [0]}]}
quantum instruction
{'type': 'quantumGateCall', 'name': 'h', 'mods': [], 'exps': [], 'indexIdList': [{'id': 'q', 'exprList': [1]}]}
quantum instruction
{'type': 'quantumGateCall', 'name': 'cphase', 'mods': [], 'exps': [0.7857142857142857], 'indexIdList': [{'id': 'q', 'exprList': [2]}, {'id': 'q', 'exprList': [0]}]}
quantum instruction
{'type': 'quantumGateCall', 'name': 'cphase', 'mods': [], 'exps': [1.5714285714285714], 'indexIdList': [{'id': 'q', 'exprList': [2]}, {'id': 'q', 'exprList': [1]}]}
quantum instruction
{'type': 'quantumGateCall', 'name': 'h', 'mods': [], 'exps': [], 'indexIdList': [{'id': 'q', 'exprList': [2]}]}
quantum instruction
{'type': 'quantumGateCall', 'name': 'cphase', 'mods': [], 'exps': [0.39285714285714285], 'indexIdList': [{'id': 'q', 'exprList': [3]}, {'id': 'q', 'exprList': [0]}]}
quantum instruction
{'type': 'quantumGateCall', 'name': 'cphase', 'mods': [], 'exps': [0.7857142857142857], 'indexIdList': [{'id': 'q', 'exprList': [3]}, {'id': 'q', 'exprList': [1]}]}
quantum instruction
{'type': 'quantumGateCall', 'name': 'cphase', 'mods': [], 'exps': [1.5714285714285714], 'indexIdList': [{'id': 'q', 'exprList': [3]}, {'id': 'q', 'exprList': [2]}]}
quantum instruction
{'type': 'quantumGateCall', 'name': 'h', 'mods': [], 'exps': [], 'indexIdList': [{'id': 'q', 'exprList': [3]}]}
assignment
Instruction Type quantumInstruction
RESET
Exps None
Mods None
IDS ['q']
Instruction Type quantumInstruction
Instruction Name x
Exps []
Mods []
IDS ['q']
Instruction Type quantumInstruction
Instruction Name x
Exps []
Mods []
IDS ['q']
Instruction Type quantumInstruction
barrier
Exps None
Mods None
IDS ['q']
Instruction Type quantumInstruction
Instruction Name h
Exps []
Mods []
IDS ['q']
Instruction Type quantumInstruction
Instruction Name cphase
Exps [1.5714285714285714]
Mods []
IDS ['q', 'q']
Instruction Type quantumInstruction
Instruction Name h
Exps []
Mods []
IDS ['q']
Instruction Type quantumInstruction
Instruction Name cphase
Exps [0.7857142857142857]
Mods []
IDS ['q', 'q']
Instruction Type quantumInstruction
Instruction Name cphase
Exps [1.5714285714285714]
Mods []
IDS ['q', 'q']
Instruction Type quantumInstruction
Instruction Name h
Exps []
Mods []
IDS ['q']
Instruction Type quantumInstruction
Instruction Name cphase
Exps [0.39285714285714285]
Mods []
IDS ['q', 'q']
Instruction Type quantumInstruction
Instruction Name cphase
Exps [0.7857142857142857]
Mods []
IDS ['q', 'q']
Instruction Type quantumInstruction
Instruction Name cphase
Exps [1.5714285714285714]
Mods []
IDS ['q', 'q']
Instruction Type quantumInstruction
Instruction Name h
Exps []
Mods []
IDS ['q']
Success!
Trying File ./examples/dd.qasm
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
Starting synthesis
Using built-in gate p
Using built-in gate x
Using built-in gate y
Using built-in gate z
Using built-in gate h
Defining QGate s
Defining QGate sdg
Defining QGate t
Defining QGate tdg
Defining QGate sx
Defining QGate rx
Defining QGate ry
Defining QGate rz
Using built-in gate cx
Using built-in gate cy
Using built-in gate cz
Defining QGate cp
Defining QGate crx
Defining QGate cry
Defining QGate crz
Using built-in gate ch
Defining QGate swap
Defining QGate ccx
Defining QGate cswap
Defining QGate cu
Defining QGate CX
Defining QGate phase
Defining QGate cphase
Defining QGate id
Defining QGate u1
Defining QGate u2
Defining QGate u3
s
[]
['a']
sdg
[]
['a']
t
[]
['a']
tdg
[]
['a']
sx
[]
['a']
rx
['a']
['θ']
ry
['a']
['θ']
rz
['a']
['λ']
cp
['a', 'b']
['λ']
crx
['a', 'b']
['θ']
cry
['a', 'b']
['θ']
crz
['a', 'b']
['θ']
swap
[]
['a', 'b']
ccx
[]
['a', 'b', 'c']
cswap
[]
['a', 'b', 'c']
cu
['c', 't']
['θ', 'φ', 'λ', 'γ']
CX
[]
['c', 't']
phase
['q']
['λ']
cphase
['a', 'b']
['λ']
id
[]
['a']
u1
['q']
['λ']
u2
['q']
['φ', 'λ']
u3
['q']
['θ', 'φ', 'λ']
5
classical declaration
classical declaration
classical declaration
classical declaration
Timing
Success!
Trying File ./examples/msd.qasm
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
Starting synthesis
Using built-in gate p
Using built-in gate x
Using built-in gate y
Using built-in gate z
Using built-in gate h
Defining QGate s
Defining QGate sdg
Defining QGate t
Defining QGate tdg
Defining QGate sx
Defining QGate rx
Defining QGate ry
Defining QGate rz
Using built-in gate cx
Using built-in gate cy
Using built-in gate cz
Defining QGate cp
Defining QGate crx
Defining QGate cry
Defining QGate crz
Using built-in gate ch
Defining QGate swap
Defining QGate ccx
Defining QGate cswap
Defining QGate cu
Defining QGate CX
Defining QGate phase
Defining QGate cphase
Defining QGate id
Defining QGate u1
Defining QGate u2
Defining QGate u3
s
[]
['a']
sdg
[]
['a']
t
[]
['a']
tdg
[]
['a']
sx
[]
['a']
rx
['a']
['θ']
ry
['a']
['θ']
rz
['a']
['λ']
cp
['a', 'b']
['λ']
crx
['a', 'b']
['θ']
cry
['a', 'b']
['θ']
crz
['a', 'b']
['θ']
swap
[]
['a', 'b']
ccx
[]
['a', 'b', 'c']
cswap
[]
['a', 'b', 'c']
cu
['c', 't']
['θ', 'φ', 'λ', 'γ']
CX
[]
['c', 't']
phase
['q']
['λ']
cphase
['a', 'b']
['λ']
id
[]
['a']
u1
['q']
['λ']
u2
['q']
['φ', 'λ']
u3
['q']
['θ', 'φ', 'λ']
14
classical declaration
classical declaration
classical declaration
quantum instruction
{'type': 'RESET', 'indexIdList': [{'id': 'workspace', 'exprList': []}]}
quantum instruction
{'type': 'RESET', 'indexIdList': [{'id': 'buffer', 'exprList': []}]}
quantum instruction
{'type': 'RESET', 'indexIdList': [{'id': 'q', 'exprList': []}]}
quantum instruction
{'type': 'quantumGateCall', 'name': 'distill_and_buffer', 'mods': [], 'exps': [0], 'indexIdList': [{'id': 'workspace', 'exprList': []}, {'id': 'buffer', 'exprList': []}]}
quantum instruction
{'type': 'quantumGateCall', 'name': 'h', 'mods': [], 'exps': [], 'indexIdList': [{'id': 'q', 'exprList': [0]}]}
quantum instruction
{'type': 'quantumGateCall', 'name': 'cx', 'mods': [], 'exps': [], 'indexIdList': [{'id': 'q', 'exprList': [0]}, {'id': 'q', 'exprList': [1]}]}
quantum instruction
{'type': 'quantumGateCall', 'name': 'Ty', 'mods': [], 'exps': [0], 'indexIdList': [{'id': 'q', 'exprList': [0]}, {'id': 'buffer', 'exprList': []}]}
assignment
quantum instruction
{'type': 'quantumGateCall', 'name': 'cx', 'mods': [], 'exps': [], 'indexIdList': [{'id': 'q', 'exprList': [0]}, {'id': 'q', 'exprList': [1]}]}
quantum instruction
{'type': 'quantumGateCall', 'name': 'Ty', 'mods': [], 'exps': [0], 'indexIdList': [{'id': 'q', 'exprList': [1]}, {'id': 'buffer', 'exprList': []}]}
assignment
Instruction Type quantumInstruction
RESET
Exps None
Mods None
IDS ['workspace']
Instruction Type quantumInstruction
RESET
Exps None
Mods None
IDS ['buffer']
Instruction Type quantumInstruction
RESET
Exps None
Mods None
IDS ['q']
Instruction Type quantumInstruction
Instruction Name distill_and_buffer
Exps [0]
Mods []
IDS ['workspace', 'buffer']
Instruction Type quantumInstruction
Instruction Name h
Exps []
Mods []
IDS ['q']
Instruction Type quantumInstruction
Instruction Name cx
Exps []
Mods []
IDS ['q', 'q']
Instruction Type quantumInstruction
Instruction Name Ty
Exps [0]
Mods []
IDS ['q', 'buffer']
Instruction Type quantumInstruction
Instruction Name cx
Exps []
Mods []
IDS ['q', 'q']
Instruction Type quantumInstruction
Instruction Name Ty
Exps [0]
Mods []
IDS ['q', 'buffer']
Success!
Trying File ./examples/rng.qasm
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
Starting synthesis
Using built-in gate p
Using built-in gate x
Using built-in gate y
Using built-in gate z
Using built-in gate h
Defining QGate s
Defining QGate sdg
Defining QGate t
Defining QGate tdg
Defining QGate sx
Defining QGate rx
Defining QGate ry
Defining QGate rz
Using built-in gate cx
Using built-in gate cy
Using built-in gate cz
Defining QGate cp
Defining QGate crx
Defining QGate cry
Defining QGate crz
Using built-in gate ch
Defining QGate swap
Defining QGate ccx
Defining QGate cswap
Defining QGate cu
Defining QGate CX
Defining QGate phase
Defining QGate cphase
Defining QGate id
Defining QGate u1
Defining QGate u2
Defining QGate u3
s
[]
['a']
sdg
[]
['a']
t
[]
['a']
tdg
[]
['a']
sx
[]
['a']
rx
['a']
['θ']
ry
['a']
['θ']
rz
['a']
['λ']
cp
['a', 'b']
['λ']
crx
['a', 'b']
['θ']
cry
['a', 'b']
['θ']
crz
['a', 'b']
['θ']
swap
[]
['a', 'b']
ccx
[]
['a', 'b', 'c']
cswap
[]
['a', 'b', 'c']
cu
['c', 't']
['θ', 'φ', 'λ', 'γ']
CX
[]
['c', 't']
phase
['q']
['λ']
cphase
['a', 'b']
['λ']
id
[]
['a']
u1
['q']
['λ']
u2
['q']
['φ', 'λ']
u3
['q']
['θ', 'φ', 'λ']
4
quantum instruction
{'type': 'RESET', 'indexIdList': [{'id': 'a', 'exprList': []}]}
quantum instruction
{'type': 'quantumGateCall', 'name': 'h', 'mods': [], 'exps': [], 'indexIdList': [{'id': 'a', 'exprList': []}]}
quantum instruction
{'type': 'quantumGateCall', 'name': 'x', 'mods': [], 'exps': [], 'indexIdList': [{'id': 'a', 'exprList': []}]}
assignment
Instruction Type quantumInstruction
RESET
Exps None
Mods None
IDS ['a']
Instruction Type quantumInstruction
Instruction Name h
Exps []
Mods []
IDS ['a']
Instruction Type quantumInstruction
Instruction Name x
Exps []
Mods []
IDS ['a']
Success!
Trying File ./examples/adder.qasm
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
Starting synthesis
Defining QGate majority
Defining QGate unmaj
Using built-in gate p
Using built-in gate x
Using built-in gate y
Using built-in gate z
Using built-in gate h
Defining QGate s
Defining QGate sdg
Defining QGate t
Defining QGate tdg
Defining QGate sx
Defining QGate rx
Defining QGate ry
Defining QGate rz
Using built-in gate cx
Using built-in gate cy
Using built-in gate cz
Defining QGate cp
Defining QGate crx
Defining QGate cry
Defining QGate crz
Using built-in gate ch
Defining QGate swap
Defining QGate ccx
Defining QGate cswap
Defining QGate cu
Defining QGate CX
Defining QGate phase
Defining QGate cphase
Defining QGate id
Defining QGate u1
Defining QGate u2
Defining QGate u3
majority
[]
['a', 'b', 'c']
unmaj
[]
['a', 'b', 'c']
s
[]
['a']
sdg
[]
['a']
t
[]
['a']
tdg
[]
['a']
sx
[]
['a']
rx
['a']
['θ']
ry
['a']
['θ']
rz
['a']
['λ']
cp
['a', 'b']
['λ']
crx
['a', 'b']
['θ']
cry
['a', 'b']
['θ']
crz
['a', 'b']
['θ']
swap
[]
['a', 'b']
ccx
[]
['a', 'b', 'c']
cswap
[]
['a', 'b', 'c']
cu
['c', 't']
['θ', 'φ', 'λ', 'γ']
CX
[]
['c', 't']
phase
['q']
['λ']
cphase
['a', 'b']
['λ']
id
[]
['a']
u1
['q']
['λ']
u2
['q']
['φ', 'λ']
u3
['q']
['θ', 'φ', 'λ']
15
classical declaration
classical declaration
classical declaration
quantum instruction
{'type': 'RESET', 'indexIdList': [{'id': 'cin', 'exprList': []}]}
quantum instruction
{'type': 'RESET', 'indexIdList': [{'id': 'a', 'exprList': []}]}
quantum instruction
{'type': 'RESET', 'indexIdList': [{'id': 'b', 'exprList': []}]}
quantum instruction
{'type': 'RESET', 'indexIdList': [{'id': 'cout', 'exprList': []}]}
loop
quantum instruction
{'type': 'quantumGateCall', 'name': 'majority', 'mods': [], 'exps': [], 'indexIdList': [{'id': 'cin', 'exprList': [0]}, {'id': 'b', 'exprList': [0]}, {'id': 'a', 'exprList': [0]}]}
loop
quantum instruction
{'type': 'quantumGateCall', 'name': 'cx', 'mods': [], 'exps': [], 'indexIdList': [{'id': 'a', 'exprList': [3]}, {'id': 'cout', 'exprList': [0]}]}
loop
quantum instruction
{'type': 'quantumGateCall', 'name': 'unmaj', 'mods': [], 'exps': [], 'indexIdList': [{'id': 'cin', 'exprList': [0]}, {'id': 'b', 'exprList': [0]}, {'id': 'a', 'exprList': [0]}]}
assignment
assignment
Instruction Type quantumInstruction
RESET
Exps None
Mods None
IDS ['cin']
Instruction Type quantumInstruction
RESET
Exps None
Mods None
IDS ['a']
Instruction Type quantumInstruction
RESET
Exps None
Mods None
IDS ['b']
Instruction Type quantumInstruction
RESET
Exps None
Mods None
IDS ['cout']
Instruction Type quantumInstruction
Instruction Name majority
Exps []
Mods []
IDS ['cin', 'b', 'a']
Instruction Type quantumInstruction
Instruction Name cx
Exps []
Mods []
IDS ['a', 'cout']
Instruction Type quantumInstruction
Instruction Name unmaj
Exps []
Mods []
IDS ['cin', 'b', 'a']
Success!
Trying File ./examples/vqe.qasm
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
Starting synthesis
Defining QGate entangler
Using built-in gate p
Using built-in gate x
Using built-in gate y
Using built-in gate z
Using built-in gate h
Defining QGate s
Defining QGate sdg
Defining QGate t
Defining QGate tdg
Defining QGate sx
Defining QGate rx
Defining QGate ry
Defining QGate rz
Using built-in gate cx
Using built-in gate cy
Using built-in gate cz
Defining QGate cp
Defining QGate crx
Defining QGate cry
Defining QGate crz
Using built-in gate ch
Defining QGate swap
Defining QGate ccx
Defining QGate cswap
Defining QGate cu
Defining QGate CX
Defining QGate phase
Defining QGate cphase
Defining QGate id
Defining QGate u1
Defining QGate u2
Defining QGate u3
entangler
[]
['q']
s
[]
['a']
sdg
[]
['a']
t
[]
['a']
tdg
[]
['a']
sx
[]
['a']
rx
['a']
['θ']
ry
['a']
['θ']
rz
['a']
['λ']
cp
['a', 'b']
['λ']
crx
['a', 'b']
['θ']
cry
['a', 'b']
['θ']
crz
['a', 'b']
['θ']
swap
[]
['a', 'b']
ccx
[]
['a', 'b', 'c']
cswap
[]
['a', 'b', 'c']
cu
['c', 't']
['θ', 'φ', 'λ', 'γ']
CX
[]
['c', 't']
phase
['q']
['λ']
cphase
['a', 'b']
['λ']
id
[]
['a']
u1
['q']
['λ']
u2
['q']
['φ', 'λ']
u3
['q']
['θ', 'φ', 'λ']
6
classical declaration
classical declaration
classical declaration
classical declaration
classical declaration
assignment
Success!
Trying File ./examples/varteleport.qasm
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
Starting synthesis
Using built-in gate p
Using built-in gate x
Using built-in gate y
Using built-in gate z
Using built-in gate h
Defining QGate s
Defining QGate sdg
Defining QGate t
Defining QGate tdg
Defining QGate sx
Defining QGate rx
Defining QGate ry
Defining QGate rz
Using built-in gate cx
Using built-in gate cy
Using built-in gate cz
Defining QGate cp
Defining QGate crx
Defining QGate cry
Defining QGate crz
Using built-in gate ch
Defining QGate swap
Defining QGate ccx
Defining QGate cswap
Defining QGate cu
Defining QGate CX
Defining QGate phase
Defining QGate cphase
Defining QGate id
Defining QGate u1
Defining QGate u2
Defining QGate u3
s
[]
['a']
sdg
[]
['a']
t
[]
['a']
tdg
[]
['a']
sx
[]
['a']
rx
['a']
['θ']
ry
['a']
['θ']
rz
['a']
['λ']
cp
['a', 'b']
['λ']
crx
['a', 'b']
['θ']
cry
['a', 'b']
['θ']
crz
['a', 'b']
['θ']
swap
[]
['a', 'b']
ccx
[]
['a', 'b', 'c']
cswap
[]
['a', 'b', 'c']
cu
['c', 't']
['θ', 'φ', 'λ', 'γ']
CX
[]
['c', 't']
phase
['q']
['λ']
cphase
['a', 'b']
['λ']
id
[]
['a']
u1
['q']
['λ']
u2
['q']
['φ', 'λ']
u3
['q']
['θ', 'φ', 'λ']
8
classical declaration
classical declaration
Expression
quantum instruction
{'type': 'quantumGateCall', 'name': 'rz', 'mods': [], 'exps': [0.7857142857142857], 'indexIdList': [{'id': 'input_qubit', 'exprList': []}]}
Alias
loop
quantum instruction
{'type': 'quantumGateCall', 'name': 'h', 'mods': [], 'exps': [], 'indexIdList': [{'id': 'io', 'exprList': []}]}
assignment
Instruction Type quantumInstruction
Instruction Name rz
Exps [0.7857142857142857]
Mods []
IDS ['input_qubit']
Instruction Type quantumInstruction
Instruction Name h
Exps []
Mods []
IDS ['io']
Success!
Trying File ./examples/alignment.qasm
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
Starting synthesis
Using built-in gate p
Using built-in gate x
Using built-in gate y
Using built-in gate z
Using built-in gate h
Defining QGate s
Defining QGate sdg
Defining QGate t
Defining QGate tdg
Defining QGate sx
Defining QGate rx
Defining QGate ry
Defining QGate rz
Using built-in gate cx
Using built-in gate cy
Using built-in gate cz
Defining QGate cp
Defining QGate crx
Defining QGate cry
Defining QGate crz
Using built-in gate ch
Defining QGate swap
Defining QGate ccx
Defining QGate cswap
Defining QGate cu
Defining QGate CX
Defining QGate phase
Defining QGate cphase
Defining QGate id
Defining QGate u1
Defining QGate u2
Defining QGate u3
s
[]
['a']
sdg
[]
['a']
t
[]
['a']
tdg
[]
['a']
sx
[]
['a']
rx
['a']
['θ']
ry
['a']
['θ']
rz
['a']
['λ']
cp
['a', 'b']
['λ']
crx
['a', 'b']
['θ']
cry
['a', 'b']
['θ']
crz
['a', 'b']
['θ']
swap
[]
['a', 'b']
ccx
[]
['a', 'b', 'c']
cswap
[]
['a', 'b', 'c']
cu
['c', 't']
['θ', 'φ', 'λ', 'γ']
CX
[]
['c', 't']
phase
['q']
['λ']
cphase
['a', 'b']
['λ']
id
[]
['a']
u1
['q']
['λ']
u2
['q']
['φ', 'λ']
u3
['q']
['θ', 'φ', 'λ']
7
classical declaration
quantum instruction
{'type': 'barrier', 'indexIdList': [{'id': 'q', 'exprList': []}]}
quantum instruction
{'type': 'quantumGateCall', 'name': 'cx', 'mods': [], 'exps': [], 'indexIdList': [{'id': 'q', 'exprList': [0]}, {'id': 'q', 'exprList': [1]}]}
Timing
quantum instruction
{'type': 'quantumGateCall', 'name': 'U', 'mods': [], 'exps': [0.7857142857142857, 0, 1.5714285714285714], 'indexIdList': [{'id': 'q', 'exprList': [2]}]}
Timing
quantum instruction
{'type': 'barrier', 'indexIdList': [{'id': 'q', 'exprList': []}]}
Instruction Type quantumInstruction
barrier
Exps None
Mods None
IDS ['q']
Instruction Type quantumInstruction
Instruction Name cx
Exps []
Mods []
IDS ['q', 'q']
Instruction Type quantumInstruction
Instruction Name U
Exps [0.7857142857142857, 0, 1.5714285714285714]
Mods []
IDS ['q']
Instruction Type quantumInstruction
barrier
Exps None
Mods None
IDS ['q']
Success!
Trying File ./examples/pong.qasm
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
Starting synthesis
2
Timing
quantum instruction
{'type': 'barrier', 'indexIdList': [{'id': 'q', 'exprList': [0]}, {'id': 'q', 'exprList': [1]}]}
Instruction Type quantumInstruction
barrier
Exps None
Mods None
IDS ['q', 'q']
Success!
Trying File ./examples/teleport.qasm
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
Starting synthesis
Defining QGate post
Using built-in gate p
Using built-in gate x
Using built-in gate y
Using built-in gate z
Using built-in gate h
Defining QGate s
Defining QGate sdg
Defining QGate t
Defining QGate tdg
Defining QGate sx
Defining QGate rx
Defining QGate ry
Defining QGate rz
Using built-in gate cx
Using built-in gate cy
Using built-in gate cz
Defining QGate cp
Defining QGate crx
Defining QGate cry
Defining QGate crz
Using built-in gate ch
Defining QGate swap
Defining QGate ccx
Defining QGate cswap
Defining QGate cu
Defining QGate CX
Defining QGate phase
Defining QGate cphase
Defining QGate id
Defining QGate u1
Defining QGate u2
Defining QGate u3
post
[]
['q']
s
[]
['a']
sdg
[]
['a']
t
[]
['a']
tdg
[]
['a']
sx
[]
['a']
rx
['a']
['θ']
ry
['a']
['θ']
rz
['a']
['λ']
cp
['a', 'b']
['λ']
crx
['a', 'b']
['θ']
cry
['a', 'b']
['θ']
crz
['a', 'b']
['θ']
swap
[]
['a', 'b']
ccx
[]
['a', 'b', 'c']
cswap
[]
['a', 'b', 'c']
cu
['c', 't']
['θ', 'φ', 'λ', 'γ']
CX
[]
['c', 't']
phase
['q']
['λ']
cphase
['a', 'b']
['λ']
id
[]
['a']
u1
['q']
['λ']
u2
['q']
['φ', 'λ']
u3
['q']
['θ', 'φ', 'λ']
16
classical declaration
classical declaration
classical declaration
quantum instruction
{'type': 'RESET', 'indexIdList': [{'id': 'q', 'exprList': []}]}
quantum instruction
{'type': 'quantumGateCall', 'name': 'U', 'mods': [], 'exps': [0, 0, 0], 'indexIdList': [{'id': 'q', 'exprList': [0]}]}
quantum instruction
{'type': 'quantumGateCall', 'name': 'h', 'mods': [], 'exps': [], 'indexIdList': [{'id': 'q', 'exprList': [1]}]}
quantum instruction
{'type': 'quantumGateCall', 'name': 'cx', 'mods': [], 'exps': [], 'indexIdList': [{'id': 'q', 'exprList': [1]}, {'id': 'q', 'exprList': [2]}]}
quantum instruction
{'type': 'barrier', 'indexIdList': [{'id': 'q', 'exprList': []}]}
quantum instruction
{'type': 'quantumGateCall', 'name': 'cx', 'mods': [], 'exps': [], 'indexIdList': [{'id': 'q', 'exprList': [0]}, {'id': 'q', 'exprList': [1]}]}
quantum instruction
{'type': 'quantumGateCall', 'name': 'h', 'mods': [], 'exps': [], 'indexIdList': [{'id': 'q', 'exprList': [0]}]}
assignment
assignment
quantum instruction
{'type': 'quantumGateCall', 'name': 'post', 'mods': [], 'exps': [], 'indexIdList': [{'id': 'q', 'exprList': [2]}]}
assignment
Instruction Type quantumInstruction
RESET
Exps None
Mods None
IDS ['q']
Instruction Type quantumInstruction
Instruction Name U
Exps [0, 0, 0]
Mods []
IDS ['q']
Instruction Type quantumInstruction
Instruction Name h
Exps []
Mods []
IDS ['q']
Instruction Type quantumInstruction
Instruction Name cx
Exps []
Mods []
IDS ['q', 'q']
Instruction Type quantumInstruction
barrier
Exps None
Mods None
IDS ['q']
Instruction Type quantumInstruction
Instruction Name cx
Exps []
Mods []
IDS ['q', 'q']
Instruction Type quantumInstruction
Instruction Name h
Exps []
Mods []
IDS ['q']
Instruction Type quantumInstruction
Instruction Name post
Exps []
Mods []
IDS ['q']
Success!
Trying File ./examples/qec.qasm
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
Starting synthesis
Using built-in gate p
Using built-in gate x
Using built-in gate y
Using built-in gate z
Using built-in gate h
Defining QGate s
Defining QGate sdg
Defining QGate t
Defining QGate tdg
Defining QGate sx
Defining QGate rx
Defining QGate ry
Defining QGate rz
Using built-in gate cx
Using built-in gate cy
Using built-in gate cz
Defining QGate cp
Defining QGate crx
Defining QGate cry
Defining QGate crz
Using built-in gate ch
Defining QGate swap
Defining QGate ccx
Defining QGate cswap
Defining QGate cu
Defining QGate CX
Defining QGate phase
Defining QGate cphase
Defining QGate id
Defining QGate u1
Defining QGate u2
Defining QGate u3
s
[]
['a']
sdg
[]
['a']
t
[]
['a']
tdg
[]
['a']
sx
[]
['a']
rx
['a']
['θ']
ry
['a']
['θ']
rz
['a']
['λ']
cp
['a', 'b']
['λ']
crx
['a', 'b']
['θ']
cry
['a', 'b']
['θ']
crz
['a', 'b']
['θ']
swap
[]
['a', 'b']
ccx
[]
['a', 'b', 'c']
cswap
[]
['a', 'b', 'c']
cu
['c', 't']
['θ', 'φ', 'λ', 'γ']
CX
[]
['c', 't']
phase
['q']
['λ']
cphase
['a', 'b']
['λ']
id
[]
['a']
u1
['q']
['λ']
u2
['q']
['φ', 'λ']
u3
['q']
['θ', 'φ', 'λ']
11
classical declaration
classical declaration
quantum instruction
{'type': 'RESET', 'indexIdList': [{'id': 'q', 'exprList': []}]}
quantum instruction
{'type': 'RESET', 'indexIdList': [{'id': 'a', 'exprList': []}]}
quantum instruction
{'type': 'quantumGateCall', 'name': 'x', 'mods': [], 'exps': [], 'indexIdList': [{'id': 'q', 'exprList': [0]}]}
quantum instruction
{'type': 'barrier', 'indexIdList': [{'id': 'q', 'exprList': []}]}
assignment
assignment
Instruction Type quantumInstruction
RESET
Exps None
Mods None
IDS ['q']
Instruction Type quantumInstruction
RESET
Exps None
Mods None
IDS ['a']
Instruction Type quantumInstruction
Instruction Name x
Exps []
Mods []
IDS ['q']
Instruction Type quantumInstruction
barrier
Exps None
Mods None
IDS ['q']
Success!
Trying File ./examples/scqec.qasm
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
Starting synthesis
Using built-in gate p
Using built-in gate x
Using built-in gate y
Using built-in gate z
Using built-in gate h
Defining QGate s
Defining QGate sdg
Defining QGate t
Defining QGate tdg
Defining QGate sx
Defining QGate rx
Defining QGate ry
Defining QGate rz
Using built-in gate cx
Using built-in gate cy
Using built-in gate cz
Defining QGate cp
Defining QGate crx
Defining QGate cry
Defining QGate crz
Using built-in gate ch
Defining QGate swap
Defining QGate ccx
Defining QGate cswap
Defining QGate cu
Defining QGate CX
Defining QGate phase
Defining QGate cphase
Defining QGate id
Defining QGate u1
Defining QGate u2
Defining QGate u3
s
[]
['a']
sdg
[]
['a']
t
[]
['a']
tdg
[]
['a']
sx
[]
['a']
rx
['a']
['θ']
ry
['a']
['θ']
rz
['a']
['λ']
cp
['a', 'b']
['λ']
crx
['a', 'b']
['θ']
cry
['a', 'b']
['θ']
crz
['a', 'b']
['θ']
swap
[]
['a', 'b']
ccx
[]
['a', 'b', 'c']
cswap
[]
['a', 'b', 'c']
cu
['c', 't']
['θ', 'φ', 'λ', 'γ']
CX
[]
['c', 't']
phase
['q']
['λ']
cphase
['a', 'b']
['λ']
id
[]
['a']
u1
['q']
['λ']
u2
['q']
['φ', 'λ']
u3
['q']
['θ', 'φ', 'λ']
9
classical declaration
classical declaration
classical declaration
classical declaration
classical declaration
classical declaration
classical declaration
classical declaration
loop
Success!
Trying File ./examples/qpt.qasm
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
Starting synthesis
Defining QGate pre
Defining QGate post
Using built-in gate p
Using built-in gate x
Using built-in gate y
Using built-in gate z
Using built-in gate h
Defining QGate s
Defining QGate sdg
Defining QGate t
Defining QGate tdg
Defining QGate sx
Defining QGate rx
Defining QGate ry
Defining QGate rz
Using built-in gate cx
Using built-in gate cy
Using built-in gate cz
Defining QGate cp
Defining QGate crx
Defining QGate cry
Defining QGate crz
Using built-in gate ch
Defining QGate swap
Defining QGate ccx
Defining QGate cswap
Defining QGate cu
Defining QGate CX
Defining QGate phase
Defining QGate cphase
Defining QGate id
Defining QGate u1
Defining QGate u2
Defining QGate u3
pre
[]
['q']
post
[]
['q']
s
[]
['a']
sdg
[]
['a']
t
[]
['a']
tdg
[]
['a']
sx
[]
['a']
rx
['a']
['θ']
ry
['a']
['θ']
rz
['a']
['λ']
cp
['a', 'b']
['λ']
crx
['a', 'b']
['θ']
cry
['a', 'b']
['θ']
crz
['a', 'b']
['θ']
swap
[]
['a', 'b']
ccx
[]
['a', 'b', 'c']
cswap
[]
['a', 'b', 'c']
cu
['c', 't']
['θ', 'φ', 'λ', 'γ']
CX
[]
['c', 't']
phase
['q']
['λ']
cphase
['a', 'b']
['λ']
id
[]
['a']
u1
['q']
['λ']
u2
['q']
['φ', 'λ']
u3
['q']
['θ', 'φ', 'λ']
8
classical declaration
quantum instruction
{'type': 'RESET', 'indexIdList': [{'id': 'q', 'exprList': []}]}
quantum instruction
{'type': 'quantumGateCall', 'name': 'pre', 'mods': [], 'exps': [], 'indexIdList': [{'id': 'q', 'exprList': []}]}
quantum instruction
{'type': 'barrier', 'indexIdList': [{'id': 'q', 'exprList': []}]}
quantum instruction
{'type': 'quantumGateCall', 'name': 'h', 'mods': [], 'exps': [], 'indexIdList': [{'id': 'q', 'exprList': []}]}
quantum instruction
{'type': 'barrier', 'indexIdList': [{'id': 'q', 'exprList': []}]}
quantum instruction
{'type': 'quantumGateCall', 'name': 'post', 'mods': [], 'exps': [], 'indexIdList': [{'id': 'q', 'exprList': []}]}
assignment
Instruction Type quantumInstruction
RESET
Exps None
Mods None
IDS ['q']
Instruction Type quantumInstruction
Instruction Name pre
Exps []
Mods []
IDS ['q']
Instruction Type quantumInstruction
barrier
Exps None
Mods None
IDS ['q']
Instruction Type quantumInstruction
Instruction Name h
Exps []
Mods []
IDS ['q']
Instruction Type quantumInstruction
barrier
Exps None
Mods None
IDS ['q']
Instruction Type quantumInstruction
Instruction Name post
Exps []
Mods []
IDS ['q']
Success!
Trying File ./examples/gateteleport.qasm
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
Starting synthesis
Using built-in gate p
Using built-in gate x
Using built-in gate y
Using built-in gate z
Using built-in gate h
Defining QGate s
Defining QGate sdg
Defining QGate t
Defining QGate tdg
Defining QGate sx
Defining QGate rx
Defining QGate ry
Defining QGate rz
Using built-in gate cx
Using built-in gate cy
Using built-in gate cz
Defining QGate cp
Defining QGate crx
Defining QGate cry
Defining QGate crz
Using built-in gate ch
Defining QGate swap
Defining QGate ccx
Defining QGate cswap
Defining QGate cu
Defining QGate CX
Defining QGate phase
Defining QGate cphase
Defining QGate id
Defining QGate u1
Defining QGate u2
Defining QGate u3
s
[]
['a']
sdg
[]
['a']
t
[]
['a']
tdg
[]
['a']
sx
[]
['a']
rx
['a']
['θ']
ry
['a']
['θ']
rz
['a']
['λ']
cp
['a', 'b']
['λ']
crx
['a', 'b']
['θ']
cry
['a', 'b']
['θ']
crz
['a', 'b']
['θ']
swap
[]
['a', 'b']
ccx
[]
['a', 'b', 'c']
cswap
[]
['a', 'b', 'c']
cu
['c', 't']
['θ', 'φ', 'λ', 'γ']
CX
[]
['c', 't']
phase
['q']
['λ']
cphase
['a', 'b']
['λ']
id
[]
['a']
u1
['q']
['λ']
u2
['q']
['φ', 'λ']
u3
['q']
['θ', 'φ', 'λ']
6
classical declaration
classical declaration
quantum instruction
{'type': 'quantumGateCall', 'name': 'rz', 'mods': [], 'exps': [0.7857142857142857], 'indexIdList': [{'id': 'a', 'exprList': []}]}
quantum instruction
{'type': 'quantumGateCall', 'name': 'cx', 'mods': [], 'exps': [], 'indexIdList': [{'id': 'q', 'exprList': []}, {'id': 'a', 'exprList': []}]}
assignment
Instruction Type quantumInstruction
Instruction Name rz
Exps [0.7857142857142857]
Mods []
IDS ['a']
Instruction Type quantumInstruction
Instruction Name cx
Exps []
Mods []
IDS ['q', 'a']
Success!
Trying File ./examples/inverseqft2.qasm
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
Starting synthesis
Using built-in gate p
Using built-in gate x
Using built-in gate y
Using built-in gate z
Using built-in gate h
Defining QGate s
Defining QGate sdg
Defining QGate t
Defining QGate tdg
Defining QGate sx
Defining QGate rx
Defining QGate ry
Defining QGate rz
Using built-in gate cx
Using built-in gate cy
Using built-in gate cz
Defining QGate cp
Defining QGate crx
Defining QGate cry
Defining QGate crz
Using built-in gate ch
Defining QGate swap
Defining QGate ccx
Defining QGate cswap
Defining QGate cu
Defining QGate CX
Defining QGate phase
Defining QGate cphase
Defining QGate id
Defining QGate u1
Defining QGate u2
Defining QGate u3
s
[]
['a']
sdg
[]
['a']
t
[]
['a']
tdg
[]
['a']
sx
[]
['a']
rx
['a']
['θ']
ry
['a']
['θ']
rz
['a']
['λ']
cp
['a', 'b']
['λ']
crx
['a', 'b']
['θ']
cry
['a', 'b']
['θ']
crz
['a', 'b']
['θ']
swap
[]
['a', 'b']
ccx
[]
['a', 'b', 'c']
cswap
[]
['a', 'b', 'c']
cu
['c', 't']
['θ', 'φ', 'λ', 'γ']
CX
[]
['c', 't']
phase
['q']
['λ']
cphase
['a', 'b']
['λ']
id
[]
['a']
u1
['q']
['λ']
u2
['q']
['φ', 'λ']
u3
['q']
['θ', 'φ', 'λ']
21
classical declaration
classical declaration
classical declaration
classical declaration
quantum instruction
{'type': 'RESET', 'indexIdList': [{'id': 'q', 'exprList': []}]}
quantum instruction
{'type': 'quantumGateCall', 'name': 'h', 'mods': [], 'exps': [], 'indexIdList': [{'id': 'q', 'exprList': []}]}
quantum instruction
{'type': 'barrier', 'indexIdList': [{'id': 'q', 'exprList': []}]}
quantum instruction
{'type': 'quantumGateCall', 'name': 'h', 'mods': [], 'exps': [], 'indexIdList': [{'id': 'q', 'exprList': [0]}]}
assignment
quantum instruction
{'type': 'quantumGateCall', 'name': 'h', 'mods': [], 'exps': [], 'indexIdList': [{'id': 'q', 'exprList': [1]}]}
assignment
quantum instruction
{'type': 'quantumGateCall', 'name': 'h', 'mods': [], 'exps': [], 'indexIdList': [{'id': 'q', 'exprList': [2]}]}
assignment
quantum instruction
{'type': 'quantumGateCall', 'name': 'h', 'mods': [], 'exps': [], 'indexIdList': [{'id': 'q', 'exprList': [3]}]}
assignment
Instruction Type quantumInstruction
RESET
Exps None
Mods None
IDS ['q']
Instruction Type quantumInstruction
Instruction Name h
Exps []
Mods []
IDS ['q']
Instruction Type quantumInstruction
barrier
Exps None
Mods None
IDS ['q']
Instruction Type quantumInstruction
Instruction Name h
Exps []
Mods []
IDS ['q']
Instruction Type quantumInstruction
Instruction Name h
Exps []
Mods []
IDS ['q']
Instruction Type quantumInstruction
Instruction Name h
Exps []
Mods []
IDS ['q']
Instruction Type quantumInstruction
Instruction Name h
Exps []
Mods []
IDS ['q']
Success!
Trying File ./examples/inverseqft1.qasm
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
Starting synthesis
Using built-in gate p
Using built-in gate x
Using built-in gate y
Using built-in gate z
Using built-in gate h
Defining QGate s
Defining QGate sdg
Defining QGate t
Defining QGate tdg
Defining QGate sx
Defining QGate rx
Defining QGate ry
Defining QGate rz
Using built-in gate cx
Using built-in gate cy
Using built-in gate cz
Defining QGate cp
Defining QGate crx
Defining QGate cry
Defining QGate crz
Using built-in gate ch
Defining QGate swap
Defining QGate ccx
Defining QGate cswap
Defining QGate cu
Defining QGate CX
Defining QGate phase
Defining QGate cphase
Defining QGate id
Defining QGate u1
Defining QGate u2
Defining QGate u3
s
[]
['a']
sdg
[]
['a']
t
[]
['a']
tdg
[]
['a']
sx
[]
['a']
rx
['a']
['θ']
ry
['a']
['θ']
rz
['a']
['λ']
cp
['a', 'b']
['λ']
crx
['a', 'b']
['θ']
cry
['a', 'b']
['θ']
crz
['a', 'b']
['θ']
swap
[]
['a', 'b']
ccx
[]
['a', 'b', 'c']
cswap
[]
['a', 'b', 'c']
cu
['c', 't']
['θ', 'φ', 'λ', 'γ']
CX
[]
['c', 't']
phase
['q']
['λ']
cphase
['a', 'b']
['λ']
id
[]
['a']
u1
['q']
['λ']
u2
['q']
['φ', 'λ']
u3
['q']
['θ', 'φ', 'λ']
23
classical declaration
quantum instruction
{'type': 'RESET', 'indexIdList': [{'id': 'q', 'exprList': []}]}
quantum instruction
{'type': 'quantumGateCall', 'name': 'h', 'mods': [], 'exps': [], 'indexIdList': [{'id': 'q', 'exprList': []}]}
quantum instruction
{'type': 'barrier', 'indexIdList': [{'id': 'q', 'exprList': []}]}
quantum instruction
{'type': 'quantumGateCall', 'name': 'h', 'mods': [], 'exps': [], 'indexIdList': [{'id': 'q', 'exprList': [0]}]}
assignment
quantum instruction
{'type': 'quantumGateCall', 'name': 'h', 'mods': [], 'exps': [], 'indexIdList': [{'id': 'q', 'exprList': [1]}]}
assignment
quantum instruction
{'type': 'quantumGateCall', 'name': 'h', 'mods': [], 'exps': [], 'indexIdList': [{'id': 'q', 'exprList': [2]}]}
assignment
quantum instruction
{'type': 'quantumGateCall', 'name': 'h', 'mods': [], 'exps': [], 'indexIdList': [{'id': 'q', 'exprList': [3]}]}
assignment
Instruction Type quantumInstruction
RESET
Exps None
Mods None
IDS ['q']
Instruction Type quantumInstruction
Instruction Name h
Exps []
Mods []
IDS ['q']
Instruction Type quantumInstruction
barrier
Exps None
Mods None
IDS ['q']
Instruction Type quantumInstruction
Instruction Name h
Exps []
Mods []
IDS ['q']
Instruction Type quantumInstruction
Instruction Name h
Exps []
Mods []
IDS ['q']
Instruction Type quantumInstruction
Instruction Name h
Exps []
Mods []
IDS ['q']
Instruction Type quantumInstruction
Instruction Name h
Exps []
Mods []
IDS ['q']
Success!
Trying File ./examples/defcal.qasm
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
Starting synthesis
0
Success!
Trying File ./examples/ipe.qasm
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
Starting synthesis
Using built-in gate p
Using built-in gate x
Using built-in gate y
Using built-in gate z
Using built-in gate h
Defining QGate s
Defining QGate sdg
Defining QGate t
Defining QGate tdg
Defining QGate sx
Defining QGate rx
Defining QGate ry
Defining QGate rz
Using built-in gate cx
Using built-in gate cy
Using built-in gate cz
Defining QGate cp
Defining QGate crx
Defining QGate cry
Defining QGate crz
Using built-in gate ch
Defining QGate swap
Defining QGate ccx
Defining QGate cswap
Defining QGate cu
Defining QGate CX
Defining QGate phase
Defining QGate cphase
Defining QGate id
Defining QGate u1
Defining QGate u2
Defining QGate u3
s
[]
['a']
sdg
[]
['a']
t
[]
['a']
tdg
[]
['a']
sx
[]
['a']
rx
['a']
['θ']
ry
['a']
['θ']
rz
['a']
['λ']
cp
['a', 'b']
['λ']
crx
['a', 'b']
['θ']
cry
['a', 'b']
['θ']
crz
['a', 'b']
['θ']
swap
[]
['a', 'b']
ccx
[]
['a', 'b', 'c']
cswap
[]
['a', 'b', 'c']
cu
['c', 't']
['θ', 'φ', 'λ', 'γ']
CX
[]
['c', 't']
phase
['q']
['λ']
cphase
['a', 'b']
['λ']
id
[]
['a']
u1
['q']
['λ']
u2
['q']
['φ', 'λ']
u3
['q']
['θ', 'φ', 'λ']
8
classical declaration
classical declaration
classical declaration
quantum instruction
{'type': 'RESET', 'indexIdList': [{'id': 'q', 'exprList': []}]}
quantum instruction
{'type': 'RESET', 'indexIdList': [{'id': 'r', 'exprList': []}]}
quantum instruction
{'type': 'quantumGateCall', 'name': 'h', 'mods': [], 'exps': [], 'indexIdList': [{'id': 'r', 'exprList': []}]}
classical declaration
loop
Instruction Type quantumInstruction
RESET
Exps None
Mods None
IDS ['q']
Instruction Type quantumInstruction
RESET
Exps None
Mods None
IDS ['r']
Instruction Type quantumInstruction
Instruction Name h
Exps []
Mods []
IDS ['r']
Success!
Trying File ./examples/cphase.qasm
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
ANTLR runtime and generated code versions disagree: 4.9.2!=4.7.2
Starting synthesis
Defining QGate cphase
cphase
['a', 'b']
['θ']
1
quantum instruction
{'type': 'quantumGateCall', 'name': 'cphase', 'mods': [], 'exps': [1.5714285714285714], 'indexIdList': [{'id': 'q', 'exprList': [0]}, {'id': 'q', 'exprList': [1]}]}
Instruction Type quantumInstruction
Instruction Name cphase
Exps [1.5714285714285714]
Mods []
IDS ['q', 'q']
Success!
Success Rate: 100%
Failed Files: None!
